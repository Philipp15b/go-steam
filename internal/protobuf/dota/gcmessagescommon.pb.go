// Code generated by protoc-gen-go.
// source: dota_gcmessages_common.proto
// DO NOT EDIT!

package dota

import proto "code.google.com/p/goprotobuf/proto"
import math "math"

// discarding unused import steammessages "steammessages.pb"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type EDOTAGCMsg int32

const (
	EDOTAGCMsg_k_EMsgGCDOTABase                                EDOTAGCMsg = 7000
	EDOTAGCMsg_k_EMsgGCGeneralResponse                         EDOTAGCMsg = 7001
	EDOTAGCMsg_k_EMsgGCGameMatchSignOut                        EDOTAGCMsg = 7004
	EDOTAGCMsg_k_EMsgGCGameMatchSignOutResponse                EDOTAGCMsg = 7005
	EDOTAGCMsg_k_EMsgGCJoinChatChannel                         EDOTAGCMsg = 7009
	EDOTAGCMsg_k_EMsgGCJoinChatChannelResponse                 EDOTAGCMsg = 7010
	EDOTAGCMsg_k_EMsgGCOtherJoinedChannel                      EDOTAGCMsg = 7013
	EDOTAGCMsg_k_EMsgGCOtherLeftChannel                        EDOTAGCMsg = 7014
	EDOTAGCMsg_k_EMsgGCMatchHistoryList                        EDOTAGCMsg = 7017
	EDOTAGCMsg_k_EMsgGCStatus                                  EDOTAGCMsg = 7026
	EDOTAGCMsg_k_EMsgGCGetRecentMatches                        EDOTAGCMsg = 7027
	EDOTAGCMsg_k_EMsgGCRecentMatchesResponse                   EDOTAGCMsg = 7028
	EDOTAGCMsg_k_EMsgGCFindSourceTVGames                       EDOTAGCMsg = 7031
	EDOTAGCMsg_k_EMsgGCSourceTVGamesResponse                   EDOTAGCMsg = 7032
	EDOTAGCMsg_k_EMsgGCStartFindingMatch                       EDOTAGCMsg = 7033
	EDOTAGCMsg_k_EMsgGCConnectedPlayers                        EDOTAGCMsg = 7034
	EDOTAGCMsg_k_EMsgGCAbandonCurrentGame                      EDOTAGCMsg = 7035
	EDOTAGCMsg_k_EMsgGCStopFindingMatch                        EDOTAGCMsg = 7036
	EDOTAGCMsg_k_EMsgGCPracticeLobbyCreate                     EDOTAGCMsg = 7038
	EDOTAGCMsg_k_EMsgGCPracticeLobbyLeave                      EDOTAGCMsg = 7040
	EDOTAGCMsg_k_EMsgGCPracticeLobbyLaunch                     EDOTAGCMsg = 7041
	EDOTAGCMsg_k_EMsgGCPracticeLobbyList                       EDOTAGCMsg = 7042
	EDOTAGCMsg_k_EMsgGCPracticeLobbyListResponse               EDOTAGCMsg = 7043
	EDOTAGCMsg_k_EMsgGCPracticeLobbyJoin                       EDOTAGCMsg = 7044
	EDOTAGCMsg_k_EMsgGCPracticeLobbySetDetails                 EDOTAGCMsg = 7046
	EDOTAGCMsg_k_EMsgGCPracticeLobbySetTeamSlot                EDOTAGCMsg = 7047
	EDOTAGCMsg_k_EMsgGCInitialQuestionnaireResponse            EDOTAGCMsg = 7049
	EDOTAGCMsg_k_EMsgGCTournamentRequest                       EDOTAGCMsg = 7051
	EDOTAGCMsg_k_EMsgGCTournamentResponse                      EDOTAGCMsg = 7052
	EDOTAGCMsg_k_EMsgGCPracticeLobbyResponse                   EDOTAGCMsg = 7055
	EDOTAGCMsg_k_EMsgGCBroadcastNotification                   EDOTAGCMsg = 7056
	EDOTAGCMsg_k_EMsgGCLiveScoreboardUpdate                    EDOTAGCMsg = 7057
	EDOTAGCMsg_k_EMsgGCRequestChatChannelList                  EDOTAGCMsg = 7060
	EDOTAGCMsg_k_EMsgGCRequestChatChannelListResponse          EDOTAGCMsg = 7061
	EDOTAGCMsg_k_EMsgGCRequestMatches                          EDOTAGCMsg = 7064
	EDOTAGCMsg_k_EMsgGCRequestMatchesResponse                  EDOTAGCMsg = 7065
	EDOTAGCMsg_k_EMsgGCRequestPlayerResources                  EDOTAGCMsg = 7068
	EDOTAGCMsg_k_EMsgGCRequestPlayerResourcesResponse          EDOTAGCMsg = 7069
	EDOTAGCMsg_k_EMsgGCReadyUp                                 EDOTAGCMsg = 7070
	EDOTAGCMsg_k_EMsgGCKickedFromMatchmakingQueue              EDOTAGCMsg = 7071
	EDOTAGCMsg_k_EMsgGCLeaverDetected                          EDOTAGCMsg = 7072
	EDOTAGCMsg_k_EMsgGCSpectateFriendGame                      EDOTAGCMsg = 7073
	EDOTAGCMsg_k_EMsgGCSpectateFriendGameResponse              EDOTAGCMsg = 7074
	EDOTAGCMsg_k_EMsgGCPlayerReports                           EDOTAGCMsg = 7075
	EDOTAGCMsg_k_EMsgGCReportsRemainingRequest                 EDOTAGCMsg = 7076
	EDOTAGCMsg_k_EMsgGCReportsRemainingResponse                EDOTAGCMsg = 7077
	EDOTAGCMsg_k_EMsgGCSubmitPlayerReport                      EDOTAGCMsg = 7078
	EDOTAGCMsg_k_EMsgGCSubmitPlayerReportResponse              EDOTAGCMsg = 7079
	EDOTAGCMsg_k_EMsgGCGameChatLog                             EDOTAGCMsg = 7080
	EDOTAGCMsg_k_EMsgGCPracticeLobbyKick                       EDOTAGCMsg = 7081
	EDOTAGCMsg_k_EMsgGCReportCountsRequest                     EDOTAGCMsg = 7082
	EDOTAGCMsg_k_EMsgGCReportCountsResponse                    EDOTAGCMsg = 7083
	EDOTAGCMsg_k_EMsgGCRequestSaveGames                        EDOTAGCMsg = 7084
	EDOTAGCMsg_k_EMsgGCRequestSaveGamesServer                  EDOTAGCMsg = 7085
	EDOTAGCMsg_k_EMsgGCRequestSaveGamesResponse                EDOTAGCMsg = 7086
	EDOTAGCMsg_k_EMsgGCLeaverDetectedResponse                  EDOTAGCMsg = 7087
	EDOTAGCMsg_k_EMsgGCPlayerFailedToConnect                   EDOTAGCMsg = 7088
	EDOTAGCMsg_k_EMsgGCGCToRelayConnect                        EDOTAGCMsg = 7089
	EDOTAGCMsg_k_EMsgGCGCToRelayConnectresponse                EDOTAGCMsg = 7090
	EDOTAGCMsg_k_EMsgGCWatchGame                               EDOTAGCMsg = 7091
	EDOTAGCMsg_k_EMsgGCWatchGameResponse                       EDOTAGCMsg = 7092
	EDOTAGCMsg_k_EMsgGCBanStatusRequest                        EDOTAGCMsg = 7093
	EDOTAGCMsg_k_EMsgGCBanStatusResponse                       EDOTAGCMsg = 7094
	EDOTAGCMsg_k_EMsgGCMatchDetailsRequest                     EDOTAGCMsg = 7095
	EDOTAGCMsg_k_EMsgGCMatchDetailsResponse                    EDOTAGCMsg = 7096
	EDOTAGCMsg_k_EMsgGCCancelWatchGame                         EDOTAGCMsg = 7097
	EDOTAGCMsg_k_EMsgGCProfileRequest                          EDOTAGCMsg = 7098
	EDOTAGCMsg_k_EMsgGCProfileResponse                         EDOTAGCMsg = 7099
	EDOTAGCMsg_k_EMsgGCPopup                                   EDOTAGCMsg = 7102
	EDOTAGCMsg_k_EMsgGCDOTAClearNotifySuccessfulReport         EDOTAGCMsg = 7104
	EDOTAGCMsg_k_EMsgGCGenericResult                           EDOTAGCMsg = 7108
	EDOTAGCMsg_k_EMsgGCFriendPracticeLobbyListRequest          EDOTAGCMsg = 7111
	EDOTAGCMsg_k_EMsgGCFriendPracticeLobbyListResponse         EDOTAGCMsg = 7112
	EDOTAGCMsg_k_EMsgGCPracticeLobbyJoinResponse               EDOTAGCMsg = 7113
	EDOTAGCMsg_k_EMsgClientEconNotification_Job                EDOTAGCMsg = 7114
	EDOTAGCMsg_k_EMsgGCCreateTeam                              EDOTAGCMsg = 7115
	EDOTAGCMsg_k_EMsgGCCreateTeamResponse                      EDOTAGCMsg = 7116
	EDOTAGCMsg_k_EMsgGCDisbandTeam                             EDOTAGCMsg = 7117
	EDOTAGCMsg_k_EMsgGCDisbandTeamResponse                     EDOTAGCMsg = 7118
	EDOTAGCMsg_k_EMsgGCRequestTeamData                         EDOTAGCMsg = 7119
	EDOTAGCMsg_k_EMsgGCRequestTeamDataResponse                 EDOTAGCMsg = 7120
	EDOTAGCMsg_k_EMsgGCTeamData                                EDOTAGCMsg = 7121
	EDOTAGCMsg_k_EMsgGCTeamInvite_InviterToGC                  EDOTAGCMsg = 7122
	EDOTAGCMsg_k_EMsgGCTeamInvite_GCImmediateResponseToInviter EDOTAGCMsg = 7123
	EDOTAGCMsg_k_EMsgGCTeamInvite_GCRequestToInvitee           EDOTAGCMsg = 7124
	EDOTAGCMsg_k_EMsgGCTeamInvite_InviteeResponseToGC          EDOTAGCMsg = 7125
	EDOTAGCMsg_k_EMsgGCTeamInvite_GCResponseToInviter          EDOTAGCMsg = 7126
	EDOTAGCMsg_k_EMsgGCTeamInvite_GCResponseToInvitee          EDOTAGCMsg = 7127
	EDOTAGCMsg_k_EMsgGCKickTeamMember                          EDOTAGCMsg = 7128
	EDOTAGCMsg_k_EMsgGCKickTeamMemberResponse                  EDOTAGCMsg = 7129
	EDOTAGCMsg_k_EMsgGCLeaveTeam                               EDOTAGCMsg = 7130
	EDOTAGCMsg_k_EMsgGCLeaveTeamResponse                       EDOTAGCMsg = 7131
	EDOTAGCMsg_k_EMsgGCSuggestTeamMatchmaking                  EDOTAGCMsg = 7132
	EDOTAGCMsg_k_EMsgGCPlayerHeroesFavoritesAdd                EDOTAGCMsg = 7133
	EDOTAGCMsg_k_EMsgGCPlayerHeroesFavoritesRemove             EDOTAGCMsg = 7134
	EDOTAGCMsg_k_EMsgGCEditTeamLogo                            EDOTAGCMsg = 7139
	EDOTAGCMsg_k_EMsgGCEditTeamLogoResponse                    EDOTAGCMsg = 7140
	EDOTAGCMsg_k_EMsgGCSetShowcaseHero                         EDOTAGCMsg = 7141
	EDOTAGCMsg_k_EMsgGCApplyTeamToPracticeLobby                EDOTAGCMsg = 7142
	EDOTAGCMsg_k_EMsgGCRequestInternatinalTicketEmail          EDOTAGCMsg = 7143
	EDOTAGCMsg_k_EMsgGCTransferTeamAdmin                       EDOTAGCMsg = 7144
	EDOTAGCMsg_k_EMsgGCClearTournamentGame                     EDOTAGCMsg = 7145
	EDOTAGCMsg_k_EMsgRequestLeagueInfo                         EDOTAGCMsg = 7147
	EDOTAGCMsg_k_EMsgResponseLeagueInfo                        EDOTAGCMsg = 7148
	EDOTAGCMsg_k_EMsgGCPracticeLobbyJoinBroadcastChannel       EDOTAGCMsg = 7149
	EDOTAGCMsg_k_EMsgGC_TournamentItemEvent                    EDOTAGCMsg = 7150
	EDOTAGCMsg_k_EMsgGC_TournamentItemEventResponse            EDOTAGCMsg = 7151
	EDOTAGCMsg_k_EMsgCastMatchVote                             EDOTAGCMsg = 7152
	EDOTAGCMsg_k_EMsgCastMatchVoteResponse                     EDOTAGCMsg = 7153
	EDOTAGCMsg_k_EMsgRetrieveMatchVote                         EDOTAGCMsg = 7154
	EDOTAGCMsg_k_EMsgRetrieveMatchVoteResponse                 EDOTAGCMsg = 7155
	EDOTAGCMsg_k_EMsgTeamFanfare                               EDOTAGCMsg = 7156
	EDOTAGCMsg_k_EMsgResponseTeamFanfare                       EDOTAGCMsg = 7157
	EDOTAGCMsg_k_EMsgGC_GameServerUploadSaveGame               EDOTAGCMsg = 7158
	EDOTAGCMsg_k_EMsgGC_GameServerSaveGameResult               EDOTAGCMsg = 7159
	EDOTAGCMsg_k_EMsgGC_GameServerGetLoadGame                  EDOTAGCMsg = 7160
	EDOTAGCMsg_k_EMsgGC_GameServerGetLoadGameResult            EDOTAGCMsg = 7161
	EDOTAGCMsg_k_EMsgGCTeamProfileRequest                      EDOTAGCMsg = 7164
	EDOTAGCMsg_k_EMsgGCTeamProfileResponse                     EDOTAGCMsg = 7165
	EDOTAGCMsg_k_EMsgGCEditTeamDetails                         EDOTAGCMsg = 7166
	EDOTAGCMsg_k_EMsgGCEditTeamDetailsResponse                 EDOTAGCMsg = 7167
	EDOTAGCMsg_k_EMsgGCProTeamListRequest                      EDOTAGCMsg = 7168
	EDOTAGCMsg_k_EMsgGCProTeamListResponse                     EDOTAGCMsg = 7169
	EDOTAGCMsg_k_EMsgGCReadyUpStatus                           EDOTAGCMsg = 7170
	EDOTAGCMsg_k_EMsgGCHallOfFame                              EDOTAGCMsg = 7171
	EDOTAGCMsg_k_EMsgGCHallOfFameRequest                       EDOTAGCMsg = 7172
	EDOTAGCMsg_k_EMsgGCHallOfFameResponse                      EDOTAGCMsg = 7173
	EDOTAGCMsg_k_EMsgGCGenerateDiretidePrizeList               EDOTAGCMsg = 7174
	EDOTAGCMsg_k_EMsgGCRewardDiretidePrizes                    EDOTAGCMsg = 7176
	EDOTAGCMsg_k_EMsgGCDiretidePrizesRewardedResponse          EDOTAGCMsg = 7177
	EDOTAGCMsg_k_EMsgGCHalloweenHighScoreRequest               EDOTAGCMsg = 7178
	EDOTAGCMsg_k_EMsgGCHalloweenHighScoreResponse              EDOTAGCMsg = 7179
	EDOTAGCMsg_k_EMsgGCGenerateDiretidePrizeListResponse       EDOTAGCMsg = 7180
	EDOTAGCMsg_k_EMsgGCStorePromoPagesRequest                  EDOTAGCMsg = 7182
	EDOTAGCMsg_k_EMsgGCStorePromoPagesResponse                 EDOTAGCMsg = 7183
	EDOTAGCMsg_k_EMsgGCSpawnLootGreevil                        EDOTAGCMsg = 7184
	EDOTAGCMsg_k_EMsgGCDismissLootGreevil                      EDOTAGCMsg = 7185
	EDOTAGCMsg_k_EMsgGCToGCMatchCompleted                      EDOTAGCMsg = 7186
	EDOTAGCMsg_k_EMsgGCDismissLootGreevilResponse              EDOTAGCMsg = 7187
	EDOTAGCMsg_k_EMsgGCBalancedShuffleLobby                    EDOTAGCMsg = 7188
	EDOTAGCMsg_k_EMsgGCToGCCheckLeaguePermission               EDOTAGCMsg = 7189
	EDOTAGCMsg_k_EMsgGCToGCCheckLeaguePermissionResponse       EDOTAGCMsg = 7190
	EDOTAGCMsg_k_EMsgGCLeagueScheduleRequest                   EDOTAGCMsg = 7191
	EDOTAGCMsg_k_EMsgGCLeagueScheduleResponse                  EDOTAGCMsg = 7192
	EDOTAGCMsg_k_EMsgGCLeagueScheduleEdit                      EDOTAGCMsg = 7193
	EDOTAGCMsg_k_EMsgGCLeagueScheduleEditResponse              EDOTAGCMsg = 7194
	EDOTAGCMsg_k_EMsgGCLeaguesInMonthRequest                   EDOTAGCMsg = 7195
	EDOTAGCMsg_k_EMsgGCLeaguesInMonthResponse                  EDOTAGCMsg = 7196
	EDOTAGCMsg_k_EMsgGCMatchmakingStatsRequest                 EDOTAGCMsg = 7197
	EDOTAGCMsg_k_EMsgGCMatchmakingStatsResponse                EDOTAGCMsg = 7198
	EDOTAGCMsg_k_EMsgGCBotGameCreate                           EDOTAGCMsg = 7199
	EDOTAGCMsg_k_EMsgGCSetMatchHistoryAccess                   EDOTAGCMsg = 7200
	EDOTAGCMsg_k_EMsgGCSetMatchHistoryAccessResponse           EDOTAGCMsg = 7201
	EDOTAGCMsg_k_EMsgUpgradeLeagueItem                         EDOTAGCMsg = 7203
	EDOTAGCMsg_k_EMsgUpgradeLeagueItemResponse                 EDOTAGCMsg = 7204
	EDOTAGCMsg_k_EMsgGCTeamMemberProfileRequest                EDOTAGCMsg = 7205
	EDOTAGCMsg_k_EMsgGCWatchDownloadedReplay                   EDOTAGCMsg = 7206
	EDOTAGCMsg_k_EMsgGCSetMapLocationState                     EDOTAGCMsg = 7207
	EDOTAGCMsg_k_EMsgGCSetMapLocationStateResponse             EDOTAGCMsg = 7208
	EDOTAGCMsg_k_EMsgGCResetMapLocations                       EDOTAGCMsg = 7209
	EDOTAGCMsg_k_EMsgGCResetMapLocationsResponse               EDOTAGCMsg = 7210
	EDOTAGCMsg_k_EMsgGCTeamOnProfile                           EDOTAGCMsg = 7211
	EDOTAGCMsg_k_EMsgGCSetFeaturedItems                        EDOTAGCMsg = 7212
	EDOTAGCMsg_k_EMsgGCFeaturedItems                           EDOTAGCMsg = 7215
	EDOTAGCMsg_k_EMsgRefreshPartnerAccountLink                 EDOTAGCMsg = 7216
	EDOTAGCMsg_k_EMsgClientsRejoinChatChannels                 EDOTAGCMsg = 7217
	EDOTAGCMsg_k_EMsgGCToGCGetUserChatInfo                     EDOTAGCMsg = 7218
	EDOTAGCMsg_k_EMsgGCToGCGetUserChatInfoResponse             EDOTAGCMsg = 7219
	EDOTAGCMsg_k_EMsgGCToGCLeaveAllChatChannels                EDOTAGCMsg = 7220
	EDOTAGCMsg_k_EMsgGCToGCUpdateAccountChatBan                EDOTAGCMsg = 7221
	EDOTAGCMsg_k_EMsgGCGuildCreateRequest                      EDOTAGCMsg = 7222
	EDOTAGCMsg_k_EMsgGCGuildCreateResponse                     EDOTAGCMsg = 7223
	EDOTAGCMsg_k_EMsgGCGuildSetAccountRoleRequest              EDOTAGCMsg = 7224
	EDOTAGCMsg_k_EMsgGCGuildSetAccountRoleResponse             EDOTAGCMsg = 7225
	EDOTAGCMsg_k_EMsgGCRequestGuildData                        EDOTAGCMsg = 7226
	EDOTAGCMsg_k_EMsgGCGuildData                               EDOTAGCMsg = 7227
	EDOTAGCMsg_k_EMsgGCGuildInviteAccountRequest               EDOTAGCMsg = 7228
	EDOTAGCMsg_k_EMsgGCGuildInviteAccountResponse              EDOTAGCMsg = 7229
	EDOTAGCMsg_k_EMsgGCGuildCancelInviteRequest                EDOTAGCMsg = 7230
	EDOTAGCMsg_k_EMsgGCGuildCancelInviteResponse               EDOTAGCMsg = 7231
	EDOTAGCMsg_k_EMsgGCGuildUpdateDetailsRequest               EDOTAGCMsg = 7232
	EDOTAGCMsg_k_EMsgGCGuildUpdateDetailsResponse              EDOTAGCMsg = 7233
	EDOTAGCMsg_k_EMsgGCToGCCanInviteUser                       EDOTAGCMsg = 7234
	EDOTAGCMsg_k_EMsgGCToGCCanInviteUserResponse               EDOTAGCMsg = 7235
	EDOTAGCMsg_k_EMsgGCToGCGetUserRank                         EDOTAGCMsg = 7236
	EDOTAGCMsg_k_EMsgGCToGCGetUserRankResponse                 EDOTAGCMsg = 7237
	EDOTAGCMsg_k_EMsgGCToGCUpdateTeamStats                     EDOTAGCMsg = 7240
	EDOTAGCMsg_k_EMsgGCToGCGetTeamRank                         EDOTAGCMsg = 7241
	EDOTAGCMsg_k_EMsgGCToGCGetTeamRankResponse                 EDOTAGCMsg = 7242
	EDOTAGCMsg_k_EMsgGCTeamIDByNameRequest                     EDOTAGCMsg = 7245
	EDOTAGCMsg_k_EMsgGCTeamIDByNameResponse                    EDOTAGCMsg = 7246
	EDOTAGCMsg_k_EMsgGCEditTeam                                EDOTAGCMsg = 7247
	EDOTAGCMsg_k_EMsgGCPassportDataRequest                     EDOTAGCMsg = 7248
	EDOTAGCMsg_k_EMsgGCPassportDataResponse                    EDOTAGCMsg = 7249
	EDOTAGCMsg_k_EMsgGCNotInGuildData                          EDOTAGCMsg = 7251
	EDOTAGCMsg_k_EMsgGCGuildInviteData                         EDOTAGCMsg = 7254
	EDOTAGCMsg_k_EMsgGCToGCGetLeagueAdmin                      EDOTAGCMsg = 7255
	EDOTAGCMsg_k_EMsgGCToGCGetLeagueAdminResponse              EDOTAGCMsg = 7256
	EDOTAGCMsg_k_EMsgGCRequestLeaguePrizePool                  EDOTAGCMsg = 7258
	EDOTAGCMsg_k_EMsgGCRequestLeaguePrizePoolResponse          EDOTAGCMsg = 7259
	EDOTAGCMsg_k_EMsgGCToGCUpdateOpenGuildPartyRequest         EDOTAGCMsg = 7261
	EDOTAGCMsg_k_EMsgGCToGCUpdateOpenGuildPartyResponse        EDOTAGCMsg = 7262
	EDOTAGCMsg_k_EMsgGCToGCDestroyOpenGuildPartyRequest        EDOTAGCMsg = 7263
	EDOTAGCMsg_k_EMsgGCToGCDestroyOpenGuildPartyResponse       EDOTAGCMsg = 7264
	EDOTAGCMsg_k_EMsgGCGuildUpdateMessage                      EDOTAGCMsg = 7265
	EDOTAGCMsg_k_EMsgGCPartySetOpenGuildRequest                EDOTAGCMsg = 7266
	EDOTAGCMsg_k_EMsgGCPartySetOpenGuildResponse               EDOTAGCMsg = 7267
	EDOTAGCMsg_k_EMsgGCGuildOpenPartyRefresh                   EDOTAGCMsg = 7268
	EDOTAGCMsg_k_EMsgGCJoinOpenGuildPartyRequest               EDOTAGCMsg = 7269
	EDOTAGCMsg_k_EMsgGCJoinOpenGuildPartyResponse              EDOTAGCMsg = 7270
	EDOTAGCMsg_k_EMsgGCLeaveChatChannel                        EDOTAGCMsg = 7272
	EDOTAGCMsg_k_EMsgGCChatMessage                             EDOTAGCMsg = 7273
	EDOTAGCMsg_k_EMsgGCGetHeroStandings                        EDOTAGCMsg = 7274
	EDOTAGCMsg_k_EMsgGCGetHeroStandingsResponse                EDOTAGCMsg = 7275
	EDOTAGCMsg_k_EMsgGCGuildEditLogoRequest                    EDOTAGCMsg = 7279
	EDOTAGCMsg_k_EMsgGCGuildEditLogoResponse                   EDOTAGCMsg = 7280
	EDOTAGCMsg_k_EMsgGCGuildmatePracticeLobbyListRequest       EDOTAGCMsg = 7281
	EDOTAGCMsg_k_EMsgGCGuildmatePracticeLobbyListResponse      EDOTAGCMsg = 7282
	EDOTAGCMsg_k_EMsgGCItemEditorReservationsRequest           EDOTAGCMsg = 7283
	EDOTAGCMsg_k_EMsgGCItemEditorReservationsResponse          EDOTAGCMsg = 7284
	EDOTAGCMsg_k_EMsgGCItemEditorReserveItemDef                EDOTAGCMsg = 7285
	EDOTAGCMsg_k_EMsgGCItemEditorReserveItemDefResponse        EDOTAGCMsg = 7286
	EDOTAGCMsg_k_EMsgGCItemEditorReleaseReservation            EDOTAGCMsg = 7287
	EDOTAGCMsg_k_EMsgGCItemEditorReleaseReservationResponse    EDOTAGCMsg = 7288
	EDOTAGCMsg_k_EMsgGCRewardTutorialPrizes                    EDOTAGCMsg = 7289
	EDOTAGCMsg_k_EMsgGCLastHitChallengeHighScorePost           EDOTAGCMsg = 7290
	EDOTAGCMsg_k_EMsgGCLastHitChallengeHighScoreRequest        EDOTAGCMsg = 7291
	EDOTAGCMsg_k_EMsgGCLastHitChallengeHighScoreResponse       EDOTAGCMsg = 7292
	EDOTAGCMsg_k_EMsgGCCreateFantasyLeagueRequest              EDOTAGCMsg = 7293
	EDOTAGCMsg_k_EMsgGCCreateFantasyLeagueResponse             EDOTAGCMsg = 7294
	EDOTAGCMsg_k_EMsgGCFantasyLeagueInfoRequest                EDOTAGCMsg = 7297
	EDOTAGCMsg_k_EMsgGCFantasyLeagueInfoResponse               EDOTAGCMsg = 7298
	EDOTAGCMsg_k_EMsgGCFantasyLeagueInfo                       EDOTAGCMsg = 7299
	EDOTAGCMsg_k_EMsgGCCreateFantasyTeamRequest                EDOTAGCMsg = 7300
	EDOTAGCMsg_k_EMsgGCCreateFantasyTeamResponse               EDOTAGCMsg = 7301
	EDOTAGCMsg_k_EMsgGCEditFantasyTeamRequest                  EDOTAGCMsg = 7302
	EDOTAGCMsg_k_EMsgGCEditFantasyTeamResponse                 EDOTAGCMsg = 7303
	EDOTAGCMsg_k_EMsgGCFantasyTeamInfoRequestByFantasyLeagueID EDOTAGCMsg = 7304
	EDOTAGCMsg_k_EMsgGCFantasyTeamInfoRequestByOwnerAccountID  EDOTAGCMsg = 7305
	EDOTAGCMsg_k_EMsgGCFantasyTeamInfoResponse                 EDOTAGCMsg = 7306
	EDOTAGCMsg_k_EMsgGCFantasyTeamInfo                         EDOTAGCMsg = 7307
	EDOTAGCMsg_k_EMsgGCFantasyLivePlayerStats                  EDOTAGCMsg = 7308
	EDOTAGCMsg_k_EMsgGCFantasyFinalPlayerStats                 EDOTAGCMsg = 7309
	EDOTAGCMsg_k_EMsgGCFantasyMatchFinished                    EDOTAGCMsg = 7310
	EDOTAGCMsg_k_EMsgGCToGCReloadVersions                      EDOTAGCMsg = 7311
	EDOTAGCMsg_k_EMsgGCFantasyTeamScoreRequest                 EDOTAGCMsg = 7312
	EDOTAGCMsg_k_EMsgGCFantasyTeamScoreResponse                EDOTAGCMsg = 7313
	EDOTAGCMsg_k_EMsgGCFantasyTeamStandingsRequest             EDOTAGCMsg = 7314
	EDOTAGCMsg_k_EMsgGCFantasyTeamStandingsResponse            EDOTAGCMsg = 7315
	EDOTAGCMsg_k_EMsgGCFantasyPlayerScoreRequest               EDOTAGCMsg = 7316
	EDOTAGCMsg_k_EMsgGCFantasyPlayerScoreResponse              EDOTAGCMsg = 7317
	EDOTAGCMsg_k_EMsgGCFantasyPlayerStandingsRequest           EDOTAGCMsg = 7318
	EDOTAGCMsg_k_EMsgGCFantasyPlayerStandingsResponse          EDOTAGCMsg = 7319
	EDOTAGCMsg_k_EMsgGCFlipLobbyTeams                          EDOTAGCMsg = 7320
	EDOTAGCMsg_k_EMsgGCCustomGameCreate                        EDOTAGCMsg = 7321
	EDOTAGCMsg_k_EMsgGCFantasyPlayerInfoRequest                EDOTAGCMsg = 7322
	EDOTAGCMsg_k_EMsgGCFantasyPlayerInfoResponse               EDOTAGCMsg = 7323
	EDOTAGCMsg_k_EMsgGCToGCProcessPlayerReportForTarget        EDOTAGCMsg = 7324
	EDOTAGCMsg_k_EMsgGCToGCProcessReportSuccess                EDOTAGCMsg = 7325
	EDOTAGCMsg_k_EMsgGCNotifyAccountFlagsChange                EDOTAGCMsg = 7326
	EDOTAGCMsg_k_EMsgGCSetProfilePrivacy                       EDOTAGCMsg = 7327
	EDOTAGCMsg_k_EMsgGCSetProfilePrivacyResponse               EDOTAGCMsg = 7328
	EDOTAGCMsg_k_EMsgGCSteamProfileRequest                     EDOTAGCMsg = 7329
	EDOTAGCMsg_k_EMsgGCSteamProfileRequestResponse             EDOTAGCMsg = 7330
	EDOTAGCMsg_k_EMsgGCFantasyLeagueCreateInfoRequest          EDOTAGCMsg = 7331
	EDOTAGCMsg_k_EMsgGCFantasyLeagueCreateInfoResponse         EDOTAGCMsg = 7332
	EDOTAGCMsg_k_EMsgGCFantasyLeagueInviteInfoRequest          EDOTAGCMsg = 7333
	EDOTAGCMsg_k_EMsgGCFantasyLeagueInviteInfoResponse         EDOTAGCMsg = 7334
	EDOTAGCMsg_k_EMsgGCClientIgnoredUser                       EDOTAGCMsg = 7335
	EDOTAGCMsg_k_EMsgGCFantasyLeagueCreateRequest              EDOTAGCMsg = 7336
	EDOTAGCMsg_k_EMsgGCFantasyLeagueCreateResponse             EDOTAGCMsg = 7337
	EDOTAGCMsg_k_EMsgGCFantasyTeamCreateRequest                EDOTAGCMsg = 7338
	EDOTAGCMsg_k_EMsgGCFantasyTeamCreateResponse               EDOTAGCMsg = 7339
	EDOTAGCMsg_k_EMsgGCFantasyLeagueFriendJoinListRequest      EDOTAGCMsg = 7340
	EDOTAGCMsg_k_EMsgGCFantasyLeagueFriendJoinListResponse     EDOTAGCMsg = 7341
	EDOTAGCMsg_k_EMsgGCClientSuspended                         EDOTAGCMsg = 7342
	EDOTAGCMsg_k_EMsgGCPartyMemberSetCoach                     EDOTAGCMsg = 7343
	EDOTAGCMsg_k_EMsgGCFantasyLeagueEditInvitesRequest         EDOTAGCMsg = 7344
	EDOTAGCMsg_k_EMsgGCFantasyLeagueEditInvitesResponse        EDOTAGCMsg = 7345
	EDOTAGCMsg_k_EMsgGCPracticeLobbySetCoach                   EDOTAGCMsg = 7346
	EDOTAGCMsg_k_EMsgGCFantasyLeagueEditInfoRequest            EDOTAGCMsg = 7347
	EDOTAGCMsg_k_EMsgGCFantasyLeagueEditInfoResponse           EDOTAGCMsg = 7348
	EDOTAGCMsg_k_EMsgGCFantasyLeagueDraftStatusRequest         EDOTAGCMsg = 7349
	EDOTAGCMsg_k_EMsgGCFantasyLeagueDraftStatus                EDOTAGCMsg = 7350
	EDOTAGCMsg_k_EMsgGCFantasyLeagueDraftPlayerRequest         EDOTAGCMsg = 7351
	EDOTAGCMsg_k_EMsgGCFantasyLeagueDraftPlayerResponse        EDOTAGCMsg = 7352
	EDOTAGCMsg_k_EMsgGCFantasyLeagueMatchupsRequest            EDOTAGCMsg = 7353
	EDOTAGCMsg_k_EMsgGCFantasyLeagueMatchupsResponse           EDOTAGCMsg = 7354
	EDOTAGCMsg_k_EMsgGCFantasyTeamRosterSwapRequest            EDOTAGCMsg = 7355
	EDOTAGCMsg_k_EMsgGCFantasyTeamRosterSwapResponse           EDOTAGCMsg = 7356
	EDOTAGCMsg_k_EMsgGCFantasyTeamRosterRequest                EDOTAGCMsg = 7357
	EDOTAGCMsg_k_EMsgGCFantasyTeamRosterResponse               EDOTAGCMsg = 7358
	EDOTAGCMsg_k_EMsgGCNexonPartnerUpdate                      EDOTAGCMsg = 7359
	EDOTAGCMsg_k_EMsgGCToGCProcessPCBangRewardPoints           EDOTAGCMsg = 7360
	EDOTAGCMsg_k_EMsgGCFantasyTeamRosterAddDropRequest         EDOTAGCMsg = 7361
	EDOTAGCMsg_k_EMsgGCFantasyTeamRosterAddDropResponse        EDOTAGCMsg = 7362
	EDOTAGCMsg_k_EMsgPresentedClientTerminateDlg               EDOTAGCMsg = 7363
	EDOTAGCMsg_k_EMsgGCFantasyPlayerHisoricalStatsRequest      EDOTAGCMsg = 7364
	EDOTAGCMsg_k_EMsgGCFantasyPlayerHisoricalStatsResponse     EDOTAGCMsg = 7365
	EDOTAGCMsg_k_EMsgGCPCBangTimedRewardMessage                EDOTAGCMsg = 7366
	EDOTAGCMsg_k_EMsgGCLobbyUpdateBroadcastChannelInfo         EDOTAGCMsg = 7367
	EDOTAGCMsg_k_EMsgGCFantasyTeamTradesRequest                EDOTAGCMsg = 7368
	EDOTAGCMsg_k_EMsgGCFantasyTeamTradesResponse               EDOTAGCMsg = 7369
	EDOTAGCMsg_k_EMsgGCFantasyTeamTradeCancelRequest           EDOTAGCMsg = 7370
	EDOTAGCMsg_k_EMsgGCFantasyTeamTradeCancelResponse          EDOTAGCMsg = 7371
	EDOTAGCMsg_k_EMsgGCToGCGrantTournamentItem                 EDOTAGCMsg = 7372
	EDOTAGCMsg_k_EMsgGCProcessFantasyScheduledEvent            EDOTAGCMsg = 7373
	EDOTAGCMsg_k_EMsgGCToGCGrantPCBangRewardItem               EDOTAGCMsg = 7374
	EDOTAGCMsg_k_EMsgGCToGCUpgradeTwitchViewerItems            EDOTAGCMsg = 7375
	EDOTAGCMsg_k_EMsgGCToGCGetLiveMatchAffiliates              EDOTAGCMsg = 7376
	EDOTAGCMsg_k_EMsgGCToGCGetLiveMatchAffiliatesResponse      EDOTAGCMsg = 7377
	EDOTAGCMsg_k_EMsgGCToGCUpdatePlayerPennantCounts           EDOTAGCMsg = 7378
	EDOTAGCMsg_k_EMsgGCToGCGetPlayerPennantCounts              EDOTAGCMsg = 7379
	EDOTAGCMsg_k_EMsgGCToGCGetPlayerPennantCountsResponse      EDOTAGCMsg = 7380
	EDOTAGCMsg_k_EMsgGCGameMatchSignOutPermissionRequest       EDOTAGCMsg = 7381
	EDOTAGCMsg_k_EMsgGCGameMatchSignOutPermissionResponse      EDOTAGCMsg = 7382
	EDOTAGCMsg_k_EMsgDOTAChatChannelMemberUpdate               EDOTAGCMsg = 7383
	EDOTAGCMsg_k_EMsgDOTAAwardEventPoints                      EDOTAGCMsg = 7384
	EDOTAGCMsg_k_EMsgDOTARedeemEventPrize                      EDOTAGCMsg = 7385
	EDOTAGCMsg_k_EMsgDOTARedeemEventPrizeResponse              EDOTAGCMsg = 7386
	EDOTAGCMsg_k_EMsgDOTAGetEventPoints                        EDOTAGCMsg = 7387
	EDOTAGCMsg_k_EMsgDOTAGetEventPointsResponse                EDOTAGCMsg = 7388
	EDOTAGCMsg_k_EMsgGCToGCSignoutAwardEventPoints             EDOTAGCMsg = 7390
	EDOTAGCMsg_k_EMsgDOTASendFriendRecruits                    EDOTAGCMsg = 7393
	EDOTAGCMsg_k_EMsgDOTAFriendRecruitsRequest                 EDOTAGCMsg = 7394
	EDOTAGCMsg_k_EMsgDOTAFriendRecruitsResponse                EDOTAGCMsg = 7395
	EDOTAGCMsg_k_EMsgDOTAFriendRecruitInviteAcceptDecline      EDOTAGCMsg = 7396
	EDOTAGCMsg_k_EMsgGCPartyLeaderWatchGamePrompt              EDOTAGCMsg = 7397
	EDOTAGCMsg_k_EMsgDOTAFrostivusTimeElapsed                  EDOTAGCMsg = 7398
	EDOTAGCMsg_k_EMsgGCToGCGrantEarnedLicense                  EDOTAGCMsg = 7399
	EDOTAGCMsg_k_EMsgDOTAExchangeEventPoints                   EDOTAGCMsg = 7400
	EDOTAGCMsg_k_EMsgDOTAExchangeEventPointsResponse           EDOTAGCMsg = 7401
	EDOTAGCMsg_k_EMsgDOTALiveLeagueGameUpdate                  EDOTAGCMsg = 7402
	EDOTAGCMsg_k_EMsgDOTAChatGetUserList                       EDOTAGCMsg = 7403
	EDOTAGCMsg_k_EMsgDOTAChatGetUserListResponse               EDOTAGCMsg = 7404
	EDOTAGCMsg_k_EMsgGCCompendiumSetSelection                  EDOTAGCMsg = 7405
	EDOTAGCMsg_k_EMsgGCCompendiumDataRequest                   EDOTAGCMsg = 7406
	EDOTAGCMsg_k_EMsgGCCompendiumDataResponse                  EDOTAGCMsg = 7407
	EDOTAGCMsg_k_EMsgDOTAGetPlayerMatchHistory                 EDOTAGCMsg = 7408
	EDOTAGCMsg_k_EMsgDOTAGetPlayerMatchHistoryResponse         EDOTAGCMsg = 7409
	EDOTAGCMsg_k_EMsgGCToGCMatchmakingAddParty                 EDOTAGCMsg = 7410
	EDOTAGCMsg_k_EMsgGCToGCMatchmakingRemoveParty              EDOTAGCMsg = 7411
	EDOTAGCMsg_k_EMsgGCToGCMatchmakingRemoveAllParties         EDOTAGCMsg = 7412
	EDOTAGCMsg_k_EMsgGCToGCMatchmakingMatchFound               EDOTAGCMsg = 7413
	EDOTAGCMsg_k_EMsgGCToGCUpdateMatchManagementStats          EDOTAGCMsg = 7414
	EDOTAGCMsg_k_EMsgGCToGCUpdateMatchmakingStats              EDOTAGCMsg = 7415
	EDOTAGCMsg_k_EMsgGCToServerPingRequest                     EDOTAGCMsg = 7416
	EDOTAGCMsg_k_EMsgGCToServerPingResponse                    EDOTAGCMsg = 7417
	EDOTAGCMsg_k_EMsgGCToServerConsoleCommand                  EDOTAGCMsg = 7418
	EDOTAGCMsg_k_EMsgGCToGCUpdateLiveLeagueGameInfo            EDOTAGCMsg = 7420
	EDOTAGCMsg_k_EMsgGCNewBloomModeState                       EDOTAGCMsg = 7421
	EDOTAGCMsg_k_EMsgGCNewBloomModeStateResponse               EDOTAGCMsg = 7422
	EDOTAGCMsg_k_EMsgGCMakeOffering                            EDOTAGCMsg = 7423
	EDOTAGCMsg_k_EMsgGCRequestOfferings                        EDOTAGCMsg = 7424
	EDOTAGCMsg_k_EMsgGCRequestOfferingsResponse                EDOTAGCMsg = 7425
	EDOTAGCMsg_k_EMsgGCToGCProcessMatchLeaver                  EDOTAGCMsg = 7426
	EDOTAGCMsg_k_EMsgGCNotificationsRequest                    EDOTAGCMsg = 7427
	EDOTAGCMsg_k_EMsgGCNotificationsResponse                   EDOTAGCMsg = 7428
	EDOTAGCMsg_k_EMsgGCToGCModifyNotification                  EDOTAGCMsg = 7429
	EDOTAGCMsg_k_EMsgGCToGCSetNewNotifications                 EDOTAGCMsg = 7430
	EDOTAGCMsg_k_EMsgGCToGCSetIsLeagueAdmin                    EDOTAGCMsg = 7431
	EDOTAGCMsg_k_EMsgGCLeagueAdminState                        EDOTAGCMsg = 7432
	EDOTAGCMsg_k_EMsgGCToGCSendLeagueAdminState                EDOTAGCMsg = 7433
	EDOTAGCMsg_k_EMsgGCLeagueAdminList                         EDOTAGCMsg = 7434
	EDOTAGCMsg_k_EMsgGCNotificationsMarkReadRequest            EDOTAGCMsg = 7435
	EDOTAGCMsg_k_EMsgGCFantasyMessageAdd                       EDOTAGCMsg = 7436
	EDOTAGCMsg_k_EMsgGCFantasyMessagesRequest                  EDOTAGCMsg = 7437
	EDOTAGCMsg_k_EMsgGCFantasyMessagesResponse                 EDOTAGCMsg = 7438
	EDOTAGCMsg_k_EMsgGCFantasyScheduledMatchesRequest          EDOTAGCMsg = 7439
	EDOTAGCMsg_k_EMsgGCFantasyScheduledMatchesResponse         EDOTAGCMsg = 7440
	EDOTAGCMsg_k_EMsgGCToGCGrantLeagueAccess                   EDOTAGCMsg = 7441
	EDOTAGCMsg_k_EMsgGCEventGameCreate                         EDOTAGCMsg = 7443
	EDOTAGCMsg_k_EMsgGCPerfectWorldUserLookupRequest           EDOTAGCMsg = 7444
	EDOTAGCMsg_k_EMsgGCPerfectWorldUserLookupResponse          EDOTAGCMsg = 7445
	EDOTAGCMsg_k_EMsgGCToGCIncrementRecruitmentSDO             EDOTAGCMsg = 7446
	EDOTAGCMsg_k_EMsgGCToGCIncrementRecruitmentLevel           EDOTAGCMsg = 7447
	EDOTAGCMsg_k_EMsgGCFantasyRemoveOwner                      EDOTAGCMsg = 7448
	EDOTAGCMsg_k_EMsgGCFantasyRemoveOwnerResponse              EDOTAGCMsg = 7449
	EDOTAGCMsg_k_EMsgGCRequestBatchPlayerResources             EDOTAGCMsg = 7450
	EDOTAGCMsg_k_EMsgGCRequestBatchPlayerResourcesResponse     EDOTAGCMsg = 7451
	EDOTAGCMsg_k_EMsgGCToGCSendUpdateLeagues                   EDOTAGCMsg = 7452
	EDOTAGCMsg_k_EMsgGCCompendiumSetSelectionResponse          EDOTAGCMsg = 7453
	EDOTAGCMsg_k_EMsgGCPlayerInfoRequest                       EDOTAGCMsg = 7454
	EDOTAGCMsg_k_EMsgGCPlayerInfo                              EDOTAGCMsg = 7455
	EDOTAGCMsg_k_EMsgGCPlayerInfoSubmit                        EDOTAGCMsg = 7456
	EDOTAGCMsg_k_EMsgGCPlayerInfoSubmitResponse                EDOTAGCMsg = 7457
	EDOTAGCMsg_k_EMsgGCToGCGetAccountLevel                     EDOTAGCMsg = 7458
	EDOTAGCMsg_k_EMsgGCToGCGetAccountLevelResponse             EDOTAGCMsg = 7459
	EDOTAGCMsg_k_EMsgGCToGCGetAccountPartner                   EDOTAGCMsg = 7460
	EDOTAGCMsg_k_EMsgGCToGCGetAccountPartnerResponse           EDOTAGCMsg = 7461
	EDOTAGCMsg_k_EMsgGCToGCGetAccountProfile                   EDOTAGCMsg = 7462
	EDOTAGCMsg_k_EMsgGCToGCGetAccountProfileResponse           EDOTAGCMsg = 7463
	EDOTAGCMsg_k_EMsgDOTAGetWeekendTourneySchedule             EDOTAGCMsg = 7464
	EDOTAGCMsg_k_EMsgDOTAWeekendTourneySchedule                EDOTAGCMsg = 7465
	EDOTAGCMsg_k_EMsgGCJoinableCustomGameModesRequest          EDOTAGCMsg = 7466
	EDOTAGCMsg_k_EMsgGCJoinableCustomGameModesResponse         EDOTAGCMsg = 7467
	EDOTAGCMsg_k_EMsgGCJoinableCustomLobbiesRequest            EDOTAGCMsg = 7468
	EDOTAGCMsg_k_EMsgGCJoinableCustomLobbiesResponse           EDOTAGCMsg = 7469
	EDOTAGCMsg_k_EMsgGCQuickJoinCustomLobby                    EDOTAGCMsg = 7470
	EDOTAGCMsg_k_EMsgGCQuickJoinCustomLobbyResponse            EDOTAGCMsg = 7471
	EDOTAGCMsg_k_EMsgGCToGCGrantEventPointAction               EDOTAGCMsg = 7472
	EDOTAGCMsg_k_EMsgServerGetEventPoints                      EDOTAGCMsg = 7473
	EDOTAGCMsg_k_EMsgServerGetEventPointsResponse              EDOTAGCMsg = 7474
	EDOTAGCMsg_k_EMsgServerGrantSurveyPermission               EDOTAGCMsg = 7475
	EDOTAGCMsg_k_EMsgServerGrantSurveyPermissionResponse       EDOTAGCMsg = 7476
	EDOTAGCMsg_k_EMsgClientProvideSurveyResult                 EDOTAGCMsg = 7477
	EDOTAGCMsg_k_EMsgGCToGCSetCompendiumSelection              EDOTAGCMsg = 7478
	EDOTAGCMsg_k_EMsgDOTAUpdateTI4HeroQuest                    EDOTAGCMsg = 7479
	EDOTAGCMsg_k_EMsgGCToGCUpdateTI4HeroQuest                  EDOTAGCMsg = 7480
	EDOTAGCMsg_k_EMsgGCCompendiumDataChanged                   EDOTAGCMsg = 7481
	EDOTAGCMsg_k_EMsgDOTAFantasyLeagueFindRequest              EDOTAGCMsg = 7482
	EDOTAGCMsg_k_EMsgDOTAFantasyLeagueFindResponse             EDOTAGCMsg = 7483
	EDOTAGCMsg_k_EMsgGCHasItemQuery                            EDOTAGCMsg = 7484
	EDOTAGCMsg_k_EMsgGCHasItemResponse                         EDOTAGCMsg = 7485
	EDOTAGCMsg_k_EMsgGCConsumeFantasyTicket                    EDOTAGCMsg = 7486
	EDOTAGCMsg_k_EMsgGCConsumeFantasyTicketFailure             EDOTAGCMsg = 7487
	EDOTAGCMsg_k_EMsgGCToGCGrantEventPointActionMsg            EDOTAGCMsg = 7488
	EDOTAGCMsg_k_EMsgClientToGCTrackDialogResult               EDOTAGCMsg = 7489
	EDOTAGCMsg_k_EMsgGCFantasyLeaveLeagueRequest               EDOTAGCMsg = 7490
	EDOTAGCMsg_k_EMsgGCFantasyLeaveLeagueResponse              EDOTAGCMsg = 7491
	EDOTAGCMsg_k_EMsgGCToGCGetCompendiumSelections             EDOTAGCMsg = 7492
	EDOTAGCMsg_k_EMsgGCToGCGetCompendiumSelectionsResponse     EDOTAGCMsg = 7493
	EDOTAGCMsg_k_EMsgServerToGCMatchConnectionStats            EDOTAGCMsg = 7494
	EDOTAGCMsg_k_EMsgGCToClientTournamentItemDrop              EDOTAGCMsg = 7495
	EDOTAGCMsg_k_EMsgSQLDelayedGrantLeagueDrop                 EDOTAGCMsg = 7496
	EDOTAGCMsg_k_EMsgServerGCUpdateSpectatorCount              EDOTAGCMsg = 7497
	EDOTAGCMsg_k_EMsgDOTAStartDailyHeroChallengeRequest        EDOTAGCMsg = 7498
	EDOTAGCMsg_k_EMsgGCFantasyPlayerScoreDetailsRequest        EDOTAGCMsg = 7499
	EDOTAGCMsg_k_EMsgGCFantasyPlayerScoreDetailsResponse       EDOTAGCMsg = 7500
	EDOTAGCMsg_k_EMsgGCToGCEmoticonUnlock                      EDOTAGCMsg = 7501
	EDOTAGCMsg_k_EMsgSignOutDraftInfo                          EDOTAGCMsg = 7502
	EDOTAGCMsg_k_EMsgGCDev_GrantWarKill                        EDOTAGCMsg = 8001
)

var EDOTAGCMsg_name = map[int32]string{
	7000: "k_EMsgGCDOTABase",
	7001: "k_EMsgGCGeneralResponse",
	7004: "k_EMsgGCGameMatchSignOut",
	7005: "k_EMsgGCGameMatchSignOutResponse",
	7009: "k_EMsgGCJoinChatChannel",
	7010: "k_EMsgGCJoinChatChannelResponse",
	7013: "k_EMsgGCOtherJoinedChannel",
	7014: "k_EMsgGCOtherLeftChannel",
	7017: "k_EMsgGCMatchHistoryList",
	7026: "k_EMsgGCStatus",
	7027: "k_EMsgGCGetRecentMatches",
	7028: "k_EMsgGCRecentMatchesResponse",
	7031: "k_EMsgGCFindSourceTVGames",
	7032: "k_EMsgGCSourceTVGamesResponse",
	7033: "k_EMsgGCStartFindingMatch",
	7034: "k_EMsgGCConnectedPlayers",
	7035: "k_EMsgGCAbandonCurrentGame",
	7036: "k_EMsgGCStopFindingMatch",
	7038: "k_EMsgGCPracticeLobbyCreate",
	7040: "k_EMsgGCPracticeLobbyLeave",
	7041: "k_EMsgGCPracticeLobbyLaunch",
	7042: "k_EMsgGCPracticeLobbyList",
	7043: "k_EMsgGCPracticeLobbyListResponse",
	7044: "k_EMsgGCPracticeLobbyJoin",
	7046: "k_EMsgGCPracticeLobbySetDetails",
	7047: "k_EMsgGCPracticeLobbySetTeamSlot",
	7049: "k_EMsgGCInitialQuestionnaireResponse",
	7051: "k_EMsgGCTournamentRequest",
	7052: "k_EMsgGCTournamentResponse",
	7055: "k_EMsgGCPracticeLobbyResponse",
	7056: "k_EMsgGCBroadcastNotification",
	7057: "k_EMsgGCLiveScoreboardUpdate",
	7060: "k_EMsgGCRequestChatChannelList",
	7061: "k_EMsgGCRequestChatChannelListResponse",
	7064: "k_EMsgGCRequestMatches",
	7065: "k_EMsgGCRequestMatchesResponse",
	7068: "k_EMsgGCRequestPlayerResources",
	7069: "k_EMsgGCRequestPlayerResourcesResponse",
	7070: "k_EMsgGCReadyUp",
	7071: "k_EMsgGCKickedFromMatchmakingQueue",
	7072: "k_EMsgGCLeaverDetected",
	7073: "k_EMsgGCSpectateFriendGame",
	7074: "k_EMsgGCSpectateFriendGameResponse",
	7075: "k_EMsgGCPlayerReports",
	7076: "k_EMsgGCReportsRemainingRequest",
	7077: "k_EMsgGCReportsRemainingResponse",
	7078: "k_EMsgGCSubmitPlayerReport",
	7079: "k_EMsgGCSubmitPlayerReportResponse",
	7080: "k_EMsgGCGameChatLog",
	7081: "k_EMsgGCPracticeLobbyKick",
	7082: "k_EMsgGCReportCountsRequest",
	7083: "k_EMsgGCReportCountsResponse",
	7084: "k_EMsgGCRequestSaveGames",
	7085: "k_EMsgGCRequestSaveGamesServer",
	7086: "k_EMsgGCRequestSaveGamesResponse",
	7087: "k_EMsgGCLeaverDetectedResponse",
	7088: "k_EMsgGCPlayerFailedToConnect",
	7089: "k_EMsgGCGCToRelayConnect",
	7090: "k_EMsgGCGCToRelayConnectresponse",
	7091: "k_EMsgGCWatchGame",
	7092: "k_EMsgGCWatchGameResponse",
	7093: "k_EMsgGCBanStatusRequest",
	7094: "k_EMsgGCBanStatusResponse",
	7095: "k_EMsgGCMatchDetailsRequest",
	7096: "k_EMsgGCMatchDetailsResponse",
	7097: "k_EMsgGCCancelWatchGame",
	7098: "k_EMsgGCProfileRequest",
	7099: "k_EMsgGCProfileResponse",
	7102: "k_EMsgGCPopup",
	7104: "k_EMsgGCDOTAClearNotifySuccessfulReport",
	7108: "k_EMsgGCGenericResult",
	7111: "k_EMsgGCFriendPracticeLobbyListRequest",
	7112: "k_EMsgGCFriendPracticeLobbyListResponse",
	7113: "k_EMsgGCPracticeLobbyJoinResponse",
	7114: "k_EMsgClientEconNotification_Job",
	7115: "k_EMsgGCCreateTeam",
	7116: "k_EMsgGCCreateTeamResponse",
	7117: "k_EMsgGCDisbandTeam",
	7118: "k_EMsgGCDisbandTeamResponse",
	7119: "k_EMsgGCRequestTeamData",
	7120: "k_EMsgGCRequestTeamDataResponse",
	7121: "k_EMsgGCTeamData",
	7122: "k_EMsgGCTeamInvite_InviterToGC",
	7123: "k_EMsgGCTeamInvite_GCImmediateResponseToInviter",
	7124: "k_EMsgGCTeamInvite_GCRequestToInvitee",
	7125: "k_EMsgGCTeamInvite_InviteeResponseToGC",
	7126: "k_EMsgGCTeamInvite_GCResponseToInviter",
	7127: "k_EMsgGCTeamInvite_GCResponseToInvitee",
	7128: "k_EMsgGCKickTeamMember",
	7129: "k_EMsgGCKickTeamMemberResponse",
	7130: "k_EMsgGCLeaveTeam",
	7131: "k_EMsgGCLeaveTeamResponse",
	7132: "k_EMsgGCSuggestTeamMatchmaking",
	7133: "k_EMsgGCPlayerHeroesFavoritesAdd",
	7134: "k_EMsgGCPlayerHeroesFavoritesRemove",
	7139: "k_EMsgGCEditTeamLogo",
	7140: "k_EMsgGCEditTeamLogoResponse",
	7141: "k_EMsgGCSetShowcaseHero",
	7142: "k_EMsgGCApplyTeamToPracticeLobby",
	7143: "k_EMsgGCRequestInternatinalTicketEmail",
	7144: "k_EMsgGCTransferTeamAdmin",
	7145: "k_EMsgGCClearTournamentGame",
	7147: "k_EMsgRequestLeagueInfo",
	7148: "k_EMsgResponseLeagueInfo",
	7149: "k_EMsgGCPracticeLobbyJoinBroadcastChannel",
	7150: "k_EMsgGC_TournamentItemEvent",
	7151: "k_EMsgGC_TournamentItemEventResponse",
	7152: "k_EMsgCastMatchVote",
	7153: "k_EMsgCastMatchVoteResponse",
	7154: "k_EMsgRetrieveMatchVote",
	7155: "k_EMsgRetrieveMatchVoteResponse",
	7156: "k_EMsgTeamFanfare",
	7157: "k_EMsgResponseTeamFanfare",
	7158: "k_EMsgGC_GameServerUploadSaveGame",
	7159: "k_EMsgGC_GameServerSaveGameResult",
	7160: "k_EMsgGC_GameServerGetLoadGame",
	7161: "k_EMsgGC_GameServerGetLoadGameResult",
	7164: "k_EMsgGCTeamProfileRequest",
	7165: "k_EMsgGCTeamProfileResponse",
	7166: "k_EMsgGCEditTeamDetails",
	7167: "k_EMsgGCEditTeamDetailsResponse",
	7168: "k_EMsgGCProTeamListRequest",
	7169: "k_EMsgGCProTeamListResponse",
	7170: "k_EMsgGCReadyUpStatus",
	7171: "k_EMsgGCHallOfFame",
	7172: "k_EMsgGCHallOfFameRequest",
	7173: "k_EMsgGCHallOfFameResponse",
	7174: "k_EMsgGCGenerateDiretidePrizeList",
	7176: "k_EMsgGCRewardDiretidePrizes",
	7177: "k_EMsgGCDiretidePrizesRewardedResponse",
	7178: "k_EMsgGCHalloweenHighScoreRequest",
	7179: "k_EMsgGCHalloweenHighScoreResponse",
	7180: "k_EMsgGCGenerateDiretidePrizeListResponse",
	7182: "k_EMsgGCStorePromoPagesRequest",
	7183: "k_EMsgGCStorePromoPagesResponse",
	7184: "k_EMsgGCSpawnLootGreevil",
	7185: "k_EMsgGCDismissLootGreevil",
	7186: "k_EMsgGCToGCMatchCompleted",
	7187: "k_EMsgGCDismissLootGreevilResponse",
	7188: "k_EMsgGCBalancedShuffleLobby",
	7189: "k_EMsgGCToGCCheckLeaguePermission",
	7190: "k_EMsgGCToGCCheckLeaguePermissionResponse",
	7191: "k_EMsgGCLeagueScheduleRequest",
	7192: "k_EMsgGCLeagueScheduleResponse",
	7193: "k_EMsgGCLeagueScheduleEdit",
	7194: "k_EMsgGCLeagueScheduleEditResponse",
	7195: "k_EMsgGCLeaguesInMonthRequest",
	7196: "k_EMsgGCLeaguesInMonthResponse",
	7197: "k_EMsgGCMatchmakingStatsRequest",
	7198: "k_EMsgGCMatchmakingStatsResponse",
	7199: "k_EMsgGCBotGameCreate",
	7200: "k_EMsgGCSetMatchHistoryAccess",
	7201: "k_EMsgGCSetMatchHistoryAccessResponse",
	7203: "k_EMsgUpgradeLeagueItem",
	7204: "k_EMsgUpgradeLeagueItemResponse",
	7205: "k_EMsgGCTeamMemberProfileRequest",
	7206: "k_EMsgGCWatchDownloadedReplay",
	7207: "k_EMsgGCSetMapLocationState",
	7208: "k_EMsgGCSetMapLocationStateResponse",
	7209: "k_EMsgGCResetMapLocations",
	7210: "k_EMsgGCResetMapLocationsResponse",
	7211: "k_EMsgGCTeamOnProfile",
	7212: "k_EMsgGCSetFeaturedItems",
	7215: "k_EMsgGCFeaturedItems",
	7216: "k_EMsgRefreshPartnerAccountLink",
	7217: "k_EMsgClientsRejoinChatChannels",
	7218: "k_EMsgGCToGCGetUserChatInfo",
	7219: "k_EMsgGCToGCGetUserChatInfoResponse",
	7220: "k_EMsgGCToGCLeaveAllChatChannels",
	7221: "k_EMsgGCToGCUpdateAccountChatBan",
	7222: "k_EMsgGCGuildCreateRequest",
	7223: "k_EMsgGCGuildCreateResponse",
	7224: "k_EMsgGCGuildSetAccountRoleRequest",
	7225: "k_EMsgGCGuildSetAccountRoleResponse",
	7226: "k_EMsgGCRequestGuildData",
	7227: "k_EMsgGCGuildData",
	7228: "k_EMsgGCGuildInviteAccountRequest",
	7229: "k_EMsgGCGuildInviteAccountResponse",
	7230: "k_EMsgGCGuildCancelInviteRequest",
	7231: "k_EMsgGCGuildCancelInviteResponse",
	7232: "k_EMsgGCGuildUpdateDetailsRequest",
	7233: "k_EMsgGCGuildUpdateDetailsResponse",
	7234: "k_EMsgGCToGCCanInviteUser",
	7235: "k_EMsgGCToGCCanInviteUserResponse",
	7236: "k_EMsgGCToGCGetUserRank",
	7237: "k_EMsgGCToGCGetUserRankResponse",
	7240: "k_EMsgGCToGCUpdateTeamStats",
	7241: "k_EMsgGCToGCGetTeamRank",
	7242: "k_EMsgGCToGCGetTeamRankResponse",
	7245: "k_EMsgGCTeamIDByNameRequest",
	7246: "k_EMsgGCTeamIDByNameResponse",
	7247: "k_EMsgGCEditTeam",
	7248: "k_EMsgGCPassportDataRequest",
	7249: "k_EMsgGCPassportDataResponse",
	7251: "k_EMsgGCNotInGuildData",
	7254: "k_EMsgGCGuildInviteData",
	7255: "k_EMsgGCToGCGetLeagueAdmin",
	7256: "k_EMsgGCToGCGetLeagueAdminResponse",
	7258: "k_EMsgGCRequestLeaguePrizePool",
	7259: "k_EMsgGCRequestLeaguePrizePoolResponse",
	7261: "k_EMsgGCToGCUpdateOpenGuildPartyRequest",
	7262: "k_EMsgGCToGCUpdateOpenGuildPartyResponse",
	7263: "k_EMsgGCToGCDestroyOpenGuildPartyRequest",
	7264: "k_EMsgGCToGCDestroyOpenGuildPartyResponse",
	7265: "k_EMsgGCGuildUpdateMessage",
	7266: "k_EMsgGCPartySetOpenGuildRequest",
	7267: "k_EMsgGCPartySetOpenGuildResponse",
	7268: "k_EMsgGCGuildOpenPartyRefresh",
	7269: "k_EMsgGCJoinOpenGuildPartyRequest",
	7270: "k_EMsgGCJoinOpenGuildPartyResponse",
	7272: "k_EMsgGCLeaveChatChannel",
	7273: "k_EMsgGCChatMessage",
	7274: "k_EMsgGCGetHeroStandings",
	7275: "k_EMsgGCGetHeroStandingsResponse",
	7279: "k_EMsgGCGuildEditLogoRequest",
	7280: "k_EMsgGCGuildEditLogoResponse",
	7281: "k_EMsgGCGuildmatePracticeLobbyListRequest",
	7282: "k_EMsgGCGuildmatePracticeLobbyListResponse",
	7283: "k_EMsgGCItemEditorReservationsRequest",
	7284: "k_EMsgGCItemEditorReservationsResponse",
	7285: "k_EMsgGCItemEditorReserveItemDef",
	7286: "k_EMsgGCItemEditorReserveItemDefResponse",
	7287: "k_EMsgGCItemEditorReleaseReservation",
	7288: "k_EMsgGCItemEditorReleaseReservationResponse",
	7289: "k_EMsgGCRewardTutorialPrizes",
	7290: "k_EMsgGCLastHitChallengeHighScorePost",
	7291: "k_EMsgGCLastHitChallengeHighScoreRequest",
	7292: "k_EMsgGCLastHitChallengeHighScoreResponse",
	7293: "k_EMsgGCCreateFantasyLeagueRequest",
	7294: "k_EMsgGCCreateFantasyLeagueResponse",
	7297: "k_EMsgGCFantasyLeagueInfoRequest",
	7298: "k_EMsgGCFantasyLeagueInfoResponse",
	7299: "k_EMsgGCFantasyLeagueInfo",
	7300: "k_EMsgGCCreateFantasyTeamRequest",
	7301: "k_EMsgGCCreateFantasyTeamResponse",
	7302: "k_EMsgGCEditFantasyTeamRequest",
	7303: "k_EMsgGCEditFantasyTeamResponse",
	7304: "k_EMsgGCFantasyTeamInfoRequestByFantasyLeagueID",
	7305: "k_EMsgGCFantasyTeamInfoRequestByOwnerAccountID",
	7306: "k_EMsgGCFantasyTeamInfoResponse",
	7307: "k_EMsgGCFantasyTeamInfo",
	7308: "k_EMsgGCFantasyLivePlayerStats",
	7309: "k_EMsgGCFantasyFinalPlayerStats",
	7310: "k_EMsgGCFantasyMatchFinished",
	7311: "k_EMsgGCToGCReloadVersions",
	7312: "k_EMsgGCFantasyTeamScoreRequest",
	7313: "k_EMsgGCFantasyTeamScoreResponse",
	7314: "k_EMsgGCFantasyTeamStandingsRequest",
	7315: "k_EMsgGCFantasyTeamStandingsResponse",
	7316: "k_EMsgGCFantasyPlayerScoreRequest",
	7317: "k_EMsgGCFantasyPlayerScoreResponse",
	7318: "k_EMsgGCFantasyPlayerStandingsRequest",
	7319: "k_EMsgGCFantasyPlayerStandingsResponse",
	7320: "k_EMsgGCFlipLobbyTeams",
	7321: "k_EMsgGCCustomGameCreate",
	7322: "k_EMsgGCFantasyPlayerInfoRequest",
	7323: "k_EMsgGCFantasyPlayerInfoResponse",
	7324: "k_EMsgGCToGCProcessPlayerReportForTarget",
	7325: "k_EMsgGCToGCProcessReportSuccess",
	7326: "k_EMsgGCNotifyAccountFlagsChange",
	7327: "k_EMsgGCSetProfilePrivacy",
	7328: "k_EMsgGCSetProfilePrivacyResponse",
	7329: "k_EMsgGCSteamProfileRequest",
	7330: "k_EMsgGCSteamProfileRequestResponse",
	7331: "k_EMsgGCFantasyLeagueCreateInfoRequest",
	7332: "k_EMsgGCFantasyLeagueCreateInfoResponse",
	7333: "k_EMsgGCFantasyLeagueInviteInfoRequest",
	7334: "k_EMsgGCFantasyLeagueInviteInfoResponse",
	7335: "k_EMsgGCClientIgnoredUser",
	7336: "k_EMsgGCFantasyLeagueCreateRequest",
	7337: "k_EMsgGCFantasyLeagueCreateResponse",
	7338: "k_EMsgGCFantasyTeamCreateRequest",
	7339: "k_EMsgGCFantasyTeamCreateResponse",
	7340: "k_EMsgGCFantasyLeagueFriendJoinListRequest",
	7341: "k_EMsgGCFantasyLeagueFriendJoinListResponse",
	7342: "k_EMsgGCClientSuspended",
	7343: "k_EMsgGCPartyMemberSetCoach",
	7344: "k_EMsgGCFantasyLeagueEditInvitesRequest",
	7345: "k_EMsgGCFantasyLeagueEditInvitesResponse",
	7346: "k_EMsgGCPracticeLobbySetCoach",
	7347: "k_EMsgGCFantasyLeagueEditInfoRequest",
	7348: "k_EMsgGCFantasyLeagueEditInfoResponse",
	7349: "k_EMsgGCFantasyLeagueDraftStatusRequest",
	7350: "k_EMsgGCFantasyLeagueDraftStatus",
	7351: "k_EMsgGCFantasyLeagueDraftPlayerRequest",
	7352: "k_EMsgGCFantasyLeagueDraftPlayerResponse",
	7353: "k_EMsgGCFantasyLeagueMatchupsRequest",
	7354: "k_EMsgGCFantasyLeagueMatchupsResponse",
	7355: "k_EMsgGCFantasyTeamRosterSwapRequest",
	7356: "k_EMsgGCFantasyTeamRosterSwapResponse",
	7357: "k_EMsgGCFantasyTeamRosterRequest",
	7358: "k_EMsgGCFantasyTeamRosterResponse",
	7359: "k_EMsgGCNexonPartnerUpdate",
	7360: "k_EMsgGCToGCProcessPCBangRewardPoints",
	7361: "k_EMsgGCFantasyTeamRosterAddDropRequest",
	7362: "k_EMsgGCFantasyTeamRosterAddDropResponse",
	7363: "k_EMsgPresentedClientTerminateDlg",
	7364: "k_EMsgGCFantasyPlayerHisoricalStatsRequest",
	7365: "k_EMsgGCFantasyPlayerHisoricalStatsResponse",
	7366: "k_EMsgGCPCBangTimedRewardMessage",
	7367: "k_EMsgGCLobbyUpdateBroadcastChannelInfo",
	7368: "k_EMsgGCFantasyTeamTradesRequest",
	7369: "k_EMsgGCFantasyTeamTradesResponse",
	7370: "k_EMsgGCFantasyTeamTradeCancelRequest",
	7371: "k_EMsgGCFantasyTeamTradeCancelResponse",
	7372: "k_EMsgGCToGCGrantTournamentItem",
	7373: "k_EMsgGCProcessFantasyScheduledEvent",
	7374: "k_EMsgGCToGCGrantPCBangRewardItem",
	7375: "k_EMsgGCToGCUpgradeTwitchViewerItems",
	7376: "k_EMsgGCToGCGetLiveMatchAffiliates",
	7377: "k_EMsgGCToGCGetLiveMatchAffiliatesResponse",
	7378: "k_EMsgGCToGCUpdatePlayerPennantCounts",
	7379: "k_EMsgGCToGCGetPlayerPennantCounts",
	7380: "k_EMsgGCToGCGetPlayerPennantCountsResponse",
	7381: "k_EMsgGCGameMatchSignOutPermissionRequest",
	7382: "k_EMsgGCGameMatchSignOutPermissionResponse",
	7383: "k_EMsgDOTAChatChannelMemberUpdate",
	7384: "k_EMsgDOTAAwardEventPoints",
	7385: "k_EMsgDOTARedeemEventPrize",
	7386: "k_EMsgDOTARedeemEventPrizeResponse",
	7387: "k_EMsgDOTAGetEventPoints",
	7388: "k_EMsgDOTAGetEventPointsResponse",
	7390: "k_EMsgGCToGCSignoutAwardEventPoints",
	7393: "k_EMsgDOTASendFriendRecruits",
	7394: "k_EMsgDOTAFriendRecruitsRequest",
	7395: "k_EMsgDOTAFriendRecruitsResponse",
	7396: "k_EMsgDOTAFriendRecruitInviteAcceptDecline",
	7397: "k_EMsgGCPartyLeaderWatchGamePrompt",
	7398: "k_EMsgDOTAFrostivusTimeElapsed",
	7399: "k_EMsgGCToGCGrantEarnedLicense",
	7400: "k_EMsgDOTAExchangeEventPoints",
	7401: "k_EMsgDOTAExchangeEventPointsResponse",
	7402: "k_EMsgDOTALiveLeagueGameUpdate",
	7403: "k_EMsgDOTAChatGetUserList",
	7404: "k_EMsgDOTAChatGetUserListResponse",
	7405: "k_EMsgGCCompendiumSetSelection",
	7406: "k_EMsgGCCompendiumDataRequest",
	7407: "k_EMsgGCCompendiumDataResponse",
	7408: "k_EMsgDOTAGetPlayerMatchHistory",
	7409: "k_EMsgDOTAGetPlayerMatchHistoryResponse",
	7410: "k_EMsgGCToGCMatchmakingAddParty",
	7411: "k_EMsgGCToGCMatchmakingRemoveParty",
	7412: "k_EMsgGCToGCMatchmakingRemoveAllParties",
	7413: "k_EMsgGCToGCMatchmakingMatchFound",
	7414: "k_EMsgGCToGCUpdateMatchManagementStats",
	7415: "k_EMsgGCToGCUpdateMatchmakingStats",
	7416: "k_EMsgGCToServerPingRequest",
	7417: "k_EMsgGCToServerPingResponse",
	7418: "k_EMsgGCToServerConsoleCommand",
	7420: "k_EMsgGCToGCUpdateLiveLeagueGameInfo",
	7421: "k_EMsgGCNewBloomModeState",
	7422: "k_EMsgGCNewBloomModeStateResponse",
	7423: "k_EMsgGCMakeOffering",
	7424: "k_EMsgGCRequestOfferings",
	7425: "k_EMsgGCRequestOfferingsResponse",
	7426: "k_EMsgGCToGCProcessMatchLeaver",
	7427: "k_EMsgGCNotificationsRequest",
	7428: "k_EMsgGCNotificationsResponse",
	7429: "k_EMsgGCToGCModifyNotification",
	7430: "k_EMsgGCToGCSetNewNotifications",
	7431: "k_EMsgGCToGCSetIsLeagueAdmin",
	7432: "k_EMsgGCLeagueAdminState",
	7433: "k_EMsgGCToGCSendLeagueAdminState",
	7434: "k_EMsgGCLeagueAdminList",
	7435: "k_EMsgGCNotificationsMarkReadRequest",
	7436: "k_EMsgGCFantasyMessageAdd",
	7437: "k_EMsgGCFantasyMessagesRequest",
	7438: "k_EMsgGCFantasyMessagesResponse",
	7439: "k_EMsgGCFantasyScheduledMatchesRequest",
	7440: "k_EMsgGCFantasyScheduledMatchesResponse",
	7441: "k_EMsgGCToGCGrantLeagueAccess",
	7443: "k_EMsgGCEventGameCreate",
	7444: "k_EMsgGCPerfectWorldUserLookupRequest",
	7445: "k_EMsgGCPerfectWorldUserLookupResponse",
	7446: "k_EMsgGCToGCIncrementRecruitmentSDO",
	7447: "k_EMsgGCToGCIncrementRecruitmentLevel",
	7448: "k_EMsgGCFantasyRemoveOwner",
	7449: "k_EMsgGCFantasyRemoveOwnerResponse",
	7450: "k_EMsgGCRequestBatchPlayerResources",
	7451: "k_EMsgGCRequestBatchPlayerResourcesResponse",
	7452: "k_EMsgGCToGCSendUpdateLeagues",
	7453: "k_EMsgGCCompendiumSetSelectionResponse",
	7454: "k_EMsgGCPlayerInfoRequest",
	7455: "k_EMsgGCPlayerInfo",
	7456: "k_EMsgGCPlayerInfoSubmit",
	7457: "k_EMsgGCPlayerInfoSubmitResponse",
	7458: "k_EMsgGCToGCGetAccountLevel",
	7459: "k_EMsgGCToGCGetAccountLevelResponse",
	7460: "k_EMsgGCToGCGetAccountPartner",
	7461: "k_EMsgGCToGCGetAccountPartnerResponse",
	7462: "k_EMsgGCToGCGetAccountProfile",
	7463: "k_EMsgGCToGCGetAccountProfileResponse",
	7464: "k_EMsgDOTAGetWeekendTourneySchedule",
	7465: "k_EMsgDOTAWeekendTourneySchedule",
	7466: "k_EMsgGCJoinableCustomGameModesRequest",
	7467: "k_EMsgGCJoinableCustomGameModesResponse",
	7468: "k_EMsgGCJoinableCustomLobbiesRequest",
	7469: "k_EMsgGCJoinableCustomLobbiesResponse",
	7470: "k_EMsgGCQuickJoinCustomLobby",
	7471: "k_EMsgGCQuickJoinCustomLobbyResponse",
	7472: "k_EMsgGCToGCGrantEventPointAction",
	7473: "k_EMsgServerGetEventPoints",
	7474: "k_EMsgServerGetEventPointsResponse",
	7475: "k_EMsgServerGrantSurveyPermission",
	7476: "k_EMsgServerGrantSurveyPermissionResponse",
	7477: "k_EMsgClientProvideSurveyResult",
	7478: "k_EMsgGCToGCSetCompendiumSelection",
	7479: "k_EMsgDOTAUpdateTI4HeroQuest",
	7480: "k_EMsgGCToGCUpdateTI4HeroQuest",
	7481: "k_EMsgGCCompendiumDataChanged",
	7482: "k_EMsgDOTAFantasyLeagueFindRequest",
	7483: "k_EMsgDOTAFantasyLeagueFindResponse",
	7484: "k_EMsgGCHasItemQuery",
	7485: "k_EMsgGCHasItemResponse",
	7486: "k_EMsgGCConsumeFantasyTicket",
	7487: "k_EMsgGCConsumeFantasyTicketFailure",
	7488: "k_EMsgGCToGCGrantEventPointActionMsg",
	7489: "k_EMsgClientToGCTrackDialogResult",
	7490: "k_EMsgGCFantasyLeaveLeagueRequest",
	7491: "k_EMsgGCFantasyLeaveLeagueResponse",
	7492: "k_EMsgGCToGCGetCompendiumSelections",
	7493: "k_EMsgGCToGCGetCompendiumSelectionsResponse",
	7494: "k_EMsgServerToGCMatchConnectionStats",
	7495: "k_EMsgGCToClientTournamentItemDrop",
	7496: "k_EMsgSQLDelayedGrantLeagueDrop",
	7497: "k_EMsgServerGCUpdateSpectatorCount",
	7498: "k_EMsgDOTAStartDailyHeroChallengeRequest",
	7499: "k_EMsgGCFantasyPlayerScoreDetailsRequest",
	7500: "k_EMsgGCFantasyPlayerScoreDetailsResponse",
	7501: "k_EMsgGCToGCEmoticonUnlock",
	7502: "k_EMsgSignOutDraftInfo",
	8001: "k_EMsgGCDev_GrantWarKill",
}
var EDOTAGCMsg_value = map[string]int32{
	"k_EMsgGCDOTABase":                                7000,
	"k_EMsgGCGeneralResponse":                         7001,
	"k_EMsgGCGameMatchSignOut":                        7004,
	"k_EMsgGCGameMatchSignOutResponse":                7005,
	"k_EMsgGCJoinChatChannel":                         7009,
	"k_EMsgGCJoinChatChannelResponse":                 7010,
	"k_EMsgGCOtherJoinedChannel":                      7013,
	"k_EMsgGCOtherLeftChannel":                        7014,
	"k_EMsgGCMatchHistoryList":                        7017,
	"k_EMsgGCStatus":                                  7026,
	"k_EMsgGCGetRecentMatches":                        7027,
	"k_EMsgGCRecentMatchesResponse":                   7028,
	"k_EMsgGCFindSourceTVGames":                       7031,
	"k_EMsgGCSourceTVGamesResponse":                   7032,
	"k_EMsgGCStartFindingMatch":                       7033,
	"k_EMsgGCConnectedPlayers":                        7034,
	"k_EMsgGCAbandonCurrentGame":                      7035,
	"k_EMsgGCStopFindingMatch":                        7036,
	"k_EMsgGCPracticeLobbyCreate":                     7038,
	"k_EMsgGCPracticeLobbyLeave":                      7040,
	"k_EMsgGCPracticeLobbyLaunch":                     7041,
	"k_EMsgGCPracticeLobbyList":                       7042,
	"k_EMsgGCPracticeLobbyListResponse":               7043,
	"k_EMsgGCPracticeLobbyJoin":                       7044,
	"k_EMsgGCPracticeLobbySetDetails":                 7046,
	"k_EMsgGCPracticeLobbySetTeamSlot":                7047,
	"k_EMsgGCInitialQuestionnaireResponse":            7049,
	"k_EMsgGCTournamentRequest":                       7051,
	"k_EMsgGCTournamentResponse":                      7052,
	"k_EMsgGCPracticeLobbyResponse":                   7055,
	"k_EMsgGCBroadcastNotification":                   7056,
	"k_EMsgGCLiveScoreboardUpdate":                    7057,
	"k_EMsgGCRequestChatChannelList":                  7060,
	"k_EMsgGCRequestChatChannelListResponse":          7061,
	"k_EMsgGCRequestMatches":                          7064,
	"k_EMsgGCRequestMatchesResponse":                  7065,
	"k_EMsgGCRequestPlayerResources":                  7068,
	"k_EMsgGCRequestPlayerResourcesResponse":          7069,
	"k_EMsgGCReadyUp":                                 7070,
	"k_EMsgGCKickedFromMatchmakingQueue":              7071,
	"k_EMsgGCLeaverDetected":                          7072,
	"k_EMsgGCSpectateFriendGame":                      7073,
	"k_EMsgGCSpectateFriendGameResponse":              7074,
	"k_EMsgGCPlayerReports":                           7075,
	"k_EMsgGCReportsRemainingRequest":                 7076,
	"k_EMsgGCReportsRemainingResponse":                7077,
	"k_EMsgGCSubmitPlayerReport":                      7078,
	"k_EMsgGCSubmitPlayerReportResponse":              7079,
	"k_EMsgGCGameChatLog":                             7080,
	"k_EMsgGCPracticeLobbyKick":                       7081,
	"k_EMsgGCReportCountsRequest":                     7082,
	"k_EMsgGCReportCountsResponse":                    7083,
	"k_EMsgGCRequestSaveGames":                        7084,
	"k_EMsgGCRequestSaveGamesServer":                  7085,
	"k_EMsgGCRequestSaveGamesResponse":                7086,
	"k_EMsgGCLeaverDetectedResponse":                  7087,
	"k_EMsgGCPlayerFailedToConnect":                   7088,
	"k_EMsgGCGCToRelayConnect":                        7089,
	"k_EMsgGCGCToRelayConnectresponse":                7090,
	"k_EMsgGCWatchGame":                               7091,
	"k_EMsgGCWatchGameResponse":                       7092,
	"k_EMsgGCBanStatusRequest":                        7093,
	"k_EMsgGCBanStatusResponse":                       7094,
	"k_EMsgGCMatchDetailsRequest":                     7095,
	"k_EMsgGCMatchDetailsResponse":                    7096,
	"k_EMsgGCCancelWatchGame":                         7097,
	"k_EMsgGCProfileRequest":                          7098,
	"k_EMsgGCProfileResponse":                         7099,
	"k_EMsgGCPopup":                                   7102,
	"k_EMsgGCDOTAClearNotifySuccessfulReport":         7104,
	"k_EMsgGCGenericResult":                           7108,
	"k_EMsgGCFriendPracticeLobbyListRequest":          7111,
	"k_EMsgGCFriendPracticeLobbyListResponse":         7112,
	"k_EMsgGCPracticeLobbyJoinResponse":               7113,
	"k_EMsgClientEconNotification_Job":                7114,
	"k_EMsgGCCreateTeam":                              7115,
	"k_EMsgGCCreateTeamResponse":                      7116,
	"k_EMsgGCDisbandTeam":                             7117,
	"k_EMsgGCDisbandTeamResponse":                     7118,
	"k_EMsgGCRequestTeamData":                         7119,
	"k_EMsgGCRequestTeamDataResponse":                 7120,
	"k_EMsgGCTeamData":                                7121,
	"k_EMsgGCTeamInvite_InviterToGC":                  7122,
	"k_EMsgGCTeamInvite_GCImmediateResponseToInviter": 7123,
	"k_EMsgGCTeamInvite_GCRequestToInvitee":           7124,
	"k_EMsgGCTeamInvite_InviteeResponseToGC":          7125,
	"k_EMsgGCTeamInvite_GCResponseToInviter":          7126,
	"k_EMsgGCTeamInvite_GCResponseToInvitee":          7127,
	"k_EMsgGCKickTeamMember":                          7128,
	"k_EMsgGCKickTeamMemberResponse":                  7129,
	"k_EMsgGCLeaveTeam":                               7130,
	"k_EMsgGCLeaveTeamResponse":                       7131,
	"k_EMsgGCSuggestTeamMatchmaking":                  7132,
	"k_EMsgGCPlayerHeroesFavoritesAdd":                7133,
	"k_EMsgGCPlayerHeroesFavoritesRemove":             7134,
	"k_EMsgGCEditTeamLogo":                            7139,
	"k_EMsgGCEditTeamLogoResponse":                    7140,
	"k_EMsgGCSetShowcaseHero":                         7141,
	"k_EMsgGCApplyTeamToPracticeLobby":                7142,
	"k_EMsgGCRequestInternatinalTicketEmail":          7143,
	"k_EMsgGCTransferTeamAdmin":                       7144,
	"k_EMsgGCClearTournamentGame":                     7145,
	"k_EMsgRequestLeagueInfo":                         7147,
	"k_EMsgResponseLeagueInfo":                        7148,
	"k_EMsgGCPracticeLobbyJoinBroadcastChannel":       7149,
	"k_EMsgGC_TournamentItemEvent":                    7150,
	"k_EMsgGC_TournamentItemEventResponse":            7151,
	"k_EMsgCastMatchVote":                             7152,
	"k_EMsgCastMatchVoteResponse":                     7153,
	"k_EMsgRetrieveMatchVote":                         7154,
	"k_EMsgRetrieveMatchVoteResponse":                 7155,
	"k_EMsgTeamFanfare":                               7156,
	"k_EMsgResponseTeamFanfare":                       7157,
	"k_EMsgGC_GameServerUploadSaveGame":               7158,
	"k_EMsgGC_GameServerSaveGameResult":               7159,
	"k_EMsgGC_GameServerGetLoadGame":                  7160,
	"k_EMsgGC_GameServerGetLoadGameResult":            7161,
	"k_EMsgGCTeamProfileRequest":                      7164,
	"k_EMsgGCTeamProfileResponse":                     7165,
	"k_EMsgGCEditTeamDetails":                         7166,
	"k_EMsgGCEditTeamDetailsResponse":                 7167,
	"k_EMsgGCProTeamListRequest":                      7168,
	"k_EMsgGCProTeamListResponse":                     7169,
	"k_EMsgGCReadyUpStatus":                           7170,
	"k_EMsgGCHallOfFame":                              7171,
	"k_EMsgGCHallOfFameRequest":                       7172,
	"k_EMsgGCHallOfFameResponse":                      7173,
	"k_EMsgGCGenerateDiretidePrizeList":               7174,
	"k_EMsgGCRewardDiretidePrizes":                    7176,
	"k_EMsgGCDiretidePrizesRewardedResponse":          7177,
	"k_EMsgGCHalloweenHighScoreRequest":               7178,
	"k_EMsgGCHalloweenHighScoreResponse":              7179,
	"k_EMsgGCGenerateDiretidePrizeListResponse":       7180,
	"k_EMsgGCStorePromoPagesRequest":                  7182,
	"k_EMsgGCStorePromoPagesResponse":                 7183,
	"k_EMsgGCSpawnLootGreevil":                        7184,
	"k_EMsgGCDismissLootGreevil":                      7185,
	"k_EMsgGCToGCMatchCompleted":                      7186,
	"k_EMsgGCDismissLootGreevilResponse":              7187,
	"k_EMsgGCBalancedShuffleLobby":                    7188,
	"k_EMsgGCToGCCheckLeaguePermission":               7189,
	"k_EMsgGCToGCCheckLeaguePermissionResponse":       7190,
	"k_EMsgGCLeagueScheduleRequest":                   7191,
	"k_EMsgGCLeagueScheduleResponse":                  7192,
	"k_EMsgGCLeagueScheduleEdit":                      7193,
	"k_EMsgGCLeagueScheduleEditResponse":              7194,
	"k_EMsgGCLeaguesInMonthRequest":                   7195,
	"k_EMsgGCLeaguesInMonthResponse":                  7196,
	"k_EMsgGCMatchmakingStatsRequest":                 7197,
	"k_EMsgGCMatchmakingStatsResponse":                7198,
	"k_EMsgGCBotGameCreate":                           7199,
	"k_EMsgGCSetMatchHistoryAccess":                   7200,
	"k_EMsgGCSetMatchHistoryAccessResponse":           7201,
	"k_EMsgUpgradeLeagueItem":                         7203,
	"k_EMsgUpgradeLeagueItemResponse":                 7204,
	"k_EMsgGCTeamMemberProfileRequest":                7205,
	"k_EMsgGCWatchDownloadedReplay":                   7206,
	"k_EMsgGCSetMapLocationState":                     7207,
	"k_EMsgGCSetMapLocationStateResponse":             7208,
	"k_EMsgGCResetMapLocations":                       7209,
	"k_EMsgGCResetMapLocationsResponse":               7210,
	"k_EMsgGCTeamOnProfile":                           7211,
	"k_EMsgGCSetFeaturedItems":                        7212,
	"k_EMsgGCFeaturedItems":                           7215,
	"k_EMsgRefreshPartnerAccountLink":                 7216,
	"k_EMsgClientsRejoinChatChannels":                 7217,
	"k_EMsgGCToGCGetUserChatInfo":                     7218,
	"k_EMsgGCToGCGetUserChatInfoResponse":             7219,
	"k_EMsgGCToGCLeaveAllChatChannels":                7220,
	"k_EMsgGCToGCUpdateAccountChatBan":                7221,
	"k_EMsgGCGuildCreateRequest":                      7222,
	"k_EMsgGCGuildCreateResponse":                     7223,
	"k_EMsgGCGuildSetAccountRoleRequest":              7224,
	"k_EMsgGCGuildSetAccountRoleResponse":             7225,
	"k_EMsgGCRequestGuildData":                        7226,
	"k_EMsgGCGuildData":                               7227,
	"k_EMsgGCGuildInviteAccountRequest":               7228,
	"k_EMsgGCGuildInviteAccountResponse":              7229,
	"k_EMsgGCGuildCancelInviteRequest":                7230,
	"k_EMsgGCGuildCancelInviteResponse":               7231,
	"k_EMsgGCGuildUpdateDetailsRequest":               7232,
	"k_EMsgGCGuildUpdateDetailsResponse":              7233,
	"k_EMsgGCToGCCanInviteUser":                       7234,
	"k_EMsgGCToGCCanInviteUserResponse":               7235,
	"k_EMsgGCToGCGetUserRank":                         7236,
	"k_EMsgGCToGCGetUserRankResponse":                 7237,
	"k_EMsgGCToGCUpdateTeamStats":                     7240,
	"k_EMsgGCToGCGetTeamRank":                         7241,
	"k_EMsgGCToGCGetTeamRankResponse":                 7242,
	"k_EMsgGCTeamIDByNameRequest":                     7245,
	"k_EMsgGCTeamIDByNameResponse":                    7246,
	"k_EMsgGCEditTeam":                                7247,
	"k_EMsgGCPassportDataRequest":                     7248,
	"k_EMsgGCPassportDataResponse":                    7249,
	"k_EMsgGCNotInGuildData":                          7251,
	"k_EMsgGCGuildInviteData":                         7254,
	"k_EMsgGCToGCGetLeagueAdmin":                      7255,
	"k_EMsgGCToGCGetLeagueAdminResponse":              7256,
	"k_EMsgGCRequestLeaguePrizePool":                  7258,
	"k_EMsgGCRequestLeaguePrizePoolResponse":          7259,
	"k_EMsgGCToGCUpdateOpenGuildPartyRequest":         7261,
	"k_EMsgGCToGCUpdateOpenGuildPartyResponse":        7262,
	"k_EMsgGCToGCDestroyOpenGuildPartyRequest":        7263,
	"k_EMsgGCToGCDestroyOpenGuildPartyResponse":       7264,
	"k_EMsgGCGuildUpdateMessage":                      7265,
	"k_EMsgGCPartySetOpenGuildRequest":                7266,
	"k_EMsgGCPartySetOpenGuildResponse":               7267,
	"k_EMsgGCGuildOpenPartyRefresh":                   7268,
	"k_EMsgGCJoinOpenGuildPartyRequest":               7269,
	"k_EMsgGCJoinOpenGuildPartyResponse":              7270,
	"k_EMsgGCLeaveChatChannel":                        7272,
	"k_EMsgGCChatMessage":                             7273,
	"k_EMsgGCGetHeroStandings":                        7274,
	"k_EMsgGCGetHeroStandingsResponse":                7275,
	"k_EMsgGCGuildEditLogoRequest":                    7279,
	"k_EMsgGCGuildEditLogoResponse":                   7280,
	"k_EMsgGCGuildmatePracticeLobbyListRequest":       7281,
	"k_EMsgGCGuildmatePracticeLobbyListResponse":      7282,
	"k_EMsgGCItemEditorReservationsRequest":           7283,
	"k_EMsgGCItemEditorReservationsResponse":          7284,
	"k_EMsgGCItemEditorReserveItemDef":                7285,
	"k_EMsgGCItemEditorReserveItemDefResponse":        7286,
	"k_EMsgGCItemEditorReleaseReservation":            7287,
	"k_EMsgGCItemEditorReleaseReservationResponse":    7288,
	"k_EMsgGCRewardTutorialPrizes":                    7289,
	"k_EMsgGCLastHitChallengeHighScorePost":           7290,
	"k_EMsgGCLastHitChallengeHighScoreRequest":        7291,
	"k_EMsgGCLastHitChallengeHighScoreResponse":       7292,
	"k_EMsgGCCreateFantasyLeagueRequest":              7293,
	"k_EMsgGCCreateFantasyLeagueResponse":             7294,
	"k_EMsgGCFantasyLeagueInfoRequest":                7297,
	"k_EMsgGCFantasyLeagueInfoResponse":               7298,
	"k_EMsgGCFantasyLeagueInfo":                       7299,
	"k_EMsgGCCreateFantasyTeamRequest":                7300,
	"k_EMsgGCCreateFantasyTeamResponse":               7301,
	"k_EMsgGCEditFantasyTeamRequest":                  7302,
	"k_EMsgGCEditFantasyTeamResponse":                 7303,
	"k_EMsgGCFantasyTeamInfoRequestByFantasyLeagueID": 7304,
	"k_EMsgGCFantasyTeamInfoRequestByOwnerAccountID":  7305,
	"k_EMsgGCFantasyTeamInfoResponse":                 7306,
	"k_EMsgGCFantasyTeamInfo":                         7307,
	"k_EMsgGCFantasyLivePlayerStats":                  7308,
	"k_EMsgGCFantasyFinalPlayerStats":                 7309,
	"k_EMsgGCFantasyMatchFinished":                    7310,
	"k_EMsgGCToGCReloadVersions":                      7311,
	"k_EMsgGCFantasyTeamScoreRequest":                 7312,
	"k_EMsgGCFantasyTeamScoreResponse":                7313,
	"k_EMsgGCFantasyTeamStandingsRequest":             7314,
	"k_EMsgGCFantasyTeamStandingsResponse":            7315,
	"k_EMsgGCFantasyPlayerScoreRequest":               7316,
	"k_EMsgGCFantasyPlayerScoreResponse":              7317,
	"k_EMsgGCFantasyPlayerStandingsRequest":           7318,
	"k_EMsgGCFantasyPlayerStandingsResponse":          7319,
	"k_EMsgGCFlipLobbyTeams":                          7320,
	"k_EMsgGCCustomGameCreate":                        7321,
	"k_EMsgGCFantasyPlayerInfoRequest":                7322,
	"k_EMsgGCFantasyPlayerInfoResponse":               7323,
	"k_EMsgGCToGCProcessPlayerReportForTarget":        7324,
	"k_EMsgGCToGCProcessReportSuccess":                7325,
	"k_EMsgGCNotifyAccountFlagsChange":                7326,
	"k_EMsgGCSetProfilePrivacy":                       7327,
	"k_EMsgGCSetProfilePrivacyResponse":               7328,
	"k_EMsgGCSteamProfileRequest":                     7329,
	"k_EMsgGCSteamProfileRequestResponse":             7330,
	"k_EMsgGCFantasyLeagueCreateInfoRequest":          7331,
	"k_EMsgGCFantasyLeagueCreateInfoResponse":         7332,
	"k_EMsgGCFantasyLeagueInviteInfoRequest":          7333,
	"k_EMsgGCFantasyLeagueInviteInfoResponse":         7334,
	"k_EMsgGCClientIgnoredUser":                       7335,
	"k_EMsgGCFantasyLeagueCreateRequest":              7336,
	"k_EMsgGCFantasyLeagueCreateResponse":             7337,
	"k_EMsgGCFantasyTeamCreateRequest":                7338,
	"k_EMsgGCFantasyTeamCreateResponse":               7339,
	"k_EMsgGCFantasyLeagueFriendJoinListRequest":      7340,
	"k_EMsgGCFantasyLeagueFriendJoinListResponse":     7341,
	"k_EMsgGCClientSuspended":                         7342,
	"k_EMsgGCPartyMemberSetCoach":                     7343,
	"k_EMsgGCFantasyLeagueEditInvitesRequest":         7344,
	"k_EMsgGCFantasyLeagueEditInvitesResponse":        7345,
	"k_EMsgGCPracticeLobbySetCoach":                   7346,
	"k_EMsgGCFantasyLeagueEditInfoRequest":            7347,
	"k_EMsgGCFantasyLeagueEditInfoResponse":           7348,
	"k_EMsgGCFantasyLeagueDraftStatusRequest":         7349,
	"k_EMsgGCFantasyLeagueDraftStatus":                7350,
	"k_EMsgGCFantasyLeagueDraftPlayerRequest":         7351,
	"k_EMsgGCFantasyLeagueDraftPlayerResponse":        7352,
	"k_EMsgGCFantasyLeagueMatchupsRequest":            7353,
	"k_EMsgGCFantasyLeagueMatchupsResponse":           7354,
	"k_EMsgGCFantasyTeamRosterSwapRequest":            7355,
	"k_EMsgGCFantasyTeamRosterSwapResponse":           7356,
	"k_EMsgGCFantasyTeamRosterRequest":                7357,
	"k_EMsgGCFantasyTeamRosterResponse":               7358,
	"k_EMsgGCNexonPartnerUpdate":                      7359,
	"k_EMsgGCToGCProcessPCBangRewardPoints":           7360,
	"k_EMsgGCFantasyTeamRosterAddDropRequest":         7361,
	"k_EMsgGCFantasyTeamRosterAddDropResponse":        7362,
	"k_EMsgPresentedClientTerminateDlg":               7363,
	"k_EMsgGCFantasyPlayerHisoricalStatsRequest":      7364,
	"k_EMsgGCFantasyPlayerHisoricalStatsResponse":     7365,
	"k_EMsgGCPCBangTimedRewardMessage":                7366,
	"k_EMsgGCLobbyUpdateBroadcastChannelInfo":         7367,
	"k_EMsgGCFantasyTeamTradesRequest":                7368,
	"k_EMsgGCFantasyTeamTradesResponse":               7369,
	"k_EMsgGCFantasyTeamTradeCancelRequest":           7370,
	"k_EMsgGCFantasyTeamTradeCancelResponse":          7371,
	"k_EMsgGCToGCGrantTournamentItem":                 7372,
	"k_EMsgGCProcessFantasyScheduledEvent":            7373,
	"k_EMsgGCToGCGrantPCBangRewardItem":               7374,
	"k_EMsgGCToGCUpgradeTwitchViewerItems":            7375,
	"k_EMsgGCToGCGetLiveMatchAffiliates":              7376,
	"k_EMsgGCToGCGetLiveMatchAffiliatesResponse":      7377,
	"k_EMsgGCToGCUpdatePlayerPennantCounts":           7378,
	"k_EMsgGCToGCGetPlayerPennantCounts":              7379,
	"k_EMsgGCToGCGetPlayerPennantCountsResponse":      7380,
	"k_EMsgGCGameMatchSignOutPermissionRequest":       7381,
	"k_EMsgGCGameMatchSignOutPermissionResponse":      7382,
	"k_EMsgDOTAChatChannelMemberUpdate":               7383,
	"k_EMsgDOTAAwardEventPoints":                      7384,
	"k_EMsgDOTARedeemEventPrize":                      7385,
	"k_EMsgDOTARedeemEventPrizeResponse":              7386,
	"k_EMsgDOTAGetEventPoints":                        7387,
	"k_EMsgDOTAGetEventPointsResponse":                7388,
	"k_EMsgGCToGCSignoutAwardEventPoints":             7390,
	"k_EMsgDOTASendFriendRecruits":                    7393,
	"k_EMsgDOTAFriendRecruitsRequest":                 7394,
	"k_EMsgDOTAFriendRecruitsResponse":                7395,
	"k_EMsgDOTAFriendRecruitInviteAcceptDecline":      7396,
	"k_EMsgGCPartyLeaderWatchGamePrompt":              7397,
	"k_EMsgDOTAFrostivusTimeElapsed":                  7398,
	"k_EMsgGCToGCGrantEarnedLicense":                  7399,
	"k_EMsgDOTAExchangeEventPoints":                   7400,
	"k_EMsgDOTAExchangeEventPointsResponse":           7401,
	"k_EMsgDOTALiveLeagueGameUpdate":                  7402,
	"k_EMsgDOTAChatGetUserList":                       7403,
	"k_EMsgDOTAChatGetUserListResponse":               7404,
	"k_EMsgGCCompendiumSetSelection":                  7405,
	"k_EMsgGCCompendiumDataRequest":                   7406,
	"k_EMsgGCCompendiumDataResponse":                  7407,
	"k_EMsgDOTAGetPlayerMatchHistory":                 7408,
	"k_EMsgDOTAGetPlayerMatchHistoryResponse":         7409,
	"k_EMsgGCToGCMatchmakingAddParty":                 7410,
	"k_EMsgGCToGCMatchmakingRemoveParty":              7411,
	"k_EMsgGCToGCMatchmakingRemoveAllParties":         7412,
	"k_EMsgGCToGCMatchmakingMatchFound":               7413,
	"k_EMsgGCToGCUpdateMatchManagementStats":          7414,
	"k_EMsgGCToGCUpdateMatchmakingStats":              7415,
	"k_EMsgGCToServerPingRequest":                     7416,
	"k_EMsgGCToServerPingResponse":                    7417,
	"k_EMsgGCToServerConsoleCommand":                  7418,
	"k_EMsgGCToGCUpdateLiveLeagueGameInfo":            7420,
	"k_EMsgGCNewBloomModeState":                       7421,
	"k_EMsgGCNewBloomModeStateResponse":               7422,
	"k_EMsgGCMakeOffering":                            7423,
	"k_EMsgGCRequestOfferings":                        7424,
	"k_EMsgGCRequestOfferingsResponse":                7425,
	"k_EMsgGCToGCProcessMatchLeaver":                  7426,
	"k_EMsgGCNotificationsRequest":                    7427,
	"k_EMsgGCNotificationsResponse":                   7428,
	"k_EMsgGCToGCModifyNotification":                  7429,
	"k_EMsgGCToGCSetNewNotifications":                 7430,
	"k_EMsgGCToGCSetIsLeagueAdmin":                    7431,
	"k_EMsgGCLeagueAdminState":                        7432,
	"k_EMsgGCToGCSendLeagueAdminState":                7433,
	"k_EMsgGCLeagueAdminList":                         7434,
	"k_EMsgGCNotificationsMarkReadRequest":            7435,
	"k_EMsgGCFantasyMessageAdd":                       7436,
	"k_EMsgGCFantasyMessagesRequest":                  7437,
	"k_EMsgGCFantasyMessagesResponse":                 7438,
	"k_EMsgGCFantasyScheduledMatchesRequest":          7439,
	"k_EMsgGCFantasyScheduledMatchesResponse":         7440,
	"k_EMsgGCToGCGrantLeagueAccess":                   7441,
	"k_EMsgGCEventGameCreate":                         7443,
	"k_EMsgGCPerfectWorldUserLookupRequest":           7444,
	"k_EMsgGCPerfectWorldUserLookupResponse":          7445,
	"k_EMsgGCToGCIncrementRecruitmentSDO":             7446,
	"k_EMsgGCToGCIncrementRecruitmentLevel":           7447,
	"k_EMsgGCFantasyRemoveOwner":                      7448,
	"k_EMsgGCFantasyRemoveOwnerResponse":              7449,
	"k_EMsgGCRequestBatchPlayerResources":             7450,
	"k_EMsgGCRequestBatchPlayerResourcesResponse":     7451,
	"k_EMsgGCToGCSendUpdateLeagues":                   7452,
	"k_EMsgGCCompendiumSetSelectionResponse":          7453,
	"k_EMsgGCPlayerInfoRequest":                       7454,
	"k_EMsgGCPlayerInfo":                              7455,
	"k_EMsgGCPlayerInfoSubmit":                        7456,
	"k_EMsgGCPlayerInfoSubmitResponse":                7457,
	"k_EMsgGCToGCGetAccountLevel":                     7458,
	"k_EMsgGCToGCGetAccountLevelResponse":             7459,
	"k_EMsgGCToGCGetAccountPartner":                   7460,
	"k_EMsgGCToGCGetAccountPartnerResponse":           7461,
	"k_EMsgGCToGCGetAccountProfile":                   7462,
	"k_EMsgGCToGCGetAccountProfileResponse":           7463,
	"k_EMsgDOTAGetWeekendTourneySchedule":             7464,
	"k_EMsgDOTAWeekendTourneySchedule":                7465,
	"k_EMsgGCJoinableCustomGameModesRequest":          7466,
	"k_EMsgGCJoinableCustomGameModesResponse":         7467,
	"k_EMsgGCJoinableCustomLobbiesRequest":            7468,
	"k_EMsgGCJoinableCustomLobbiesResponse":           7469,
	"k_EMsgGCQuickJoinCustomLobby":                    7470,
	"k_EMsgGCQuickJoinCustomLobbyResponse":            7471,
	"k_EMsgGCToGCGrantEventPointAction":               7472,
	"k_EMsgServerGetEventPoints":                      7473,
	"k_EMsgServerGetEventPointsResponse":              7474,
	"k_EMsgServerGrantSurveyPermission":               7475,
	"k_EMsgServerGrantSurveyPermissionResponse":       7476,
	"k_EMsgClientProvideSurveyResult":                 7477,
	"k_EMsgGCToGCSetCompendiumSelection":              7478,
	"k_EMsgDOTAUpdateTI4HeroQuest":                    7479,
	"k_EMsgGCToGCUpdateTI4HeroQuest":                  7480,
	"k_EMsgGCCompendiumDataChanged":                   7481,
	"k_EMsgDOTAFantasyLeagueFindRequest":              7482,
	"k_EMsgDOTAFantasyLeagueFindResponse":             7483,
	"k_EMsgGCHasItemQuery":                            7484,
	"k_EMsgGCHasItemResponse":                         7485,
	"k_EMsgGCConsumeFantasyTicket":                    7486,
	"k_EMsgGCConsumeFantasyTicketFailure":             7487,
	"k_EMsgGCToGCGrantEventPointActionMsg":            7488,
	"k_EMsgClientToGCTrackDialogResult":               7489,
	"k_EMsgGCFantasyLeaveLeagueRequest":               7490,
	"k_EMsgGCFantasyLeaveLeagueResponse":              7491,
	"k_EMsgGCToGCGetCompendiumSelections":             7492,
	"k_EMsgGCToGCGetCompendiumSelectionsResponse":     7493,
	"k_EMsgServerToGCMatchConnectionStats":            7494,
	"k_EMsgGCToClientTournamentItemDrop":              7495,
	"k_EMsgSQLDelayedGrantLeagueDrop":                 7496,
	"k_EMsgServerGCUpdateSpectatorCount":              7497,
	"k_EMsgDOTAStartDailyHeroChallengeRequest":        7498,
	"k_EMsgGCFantasyPlayerScoreDetailsRequest":        7499,
	"k_EMsgGCFantasyPlayerScoreDetailsResponse":       7500,
	"k_EMsgGCToGCEmoticonUnlock":                      7501,
	"k_EMsgSignOutDraftInfo":                          7502,
	"k_EMsgGCDev_GrantWarKill":                        8001,
}

func (x EDOTAGCMsg) Enum() *EDOTAGCMsg {
	p := new(EDOTAGCMsg)
	*p = x
	return p
}
func (x EDOTAGCMsg) String() string {
	return proto.EnumName(EDOTAGCMsg_name, int32(x))
}
func (x *EDOTAGCMsg) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EDOTAGCMsg_value, data, "EDOTAGCMsg")
	if err != nil {
		return err
	}
	*x = EDOTAGCMsg(value)
	return nil
}

type DOTA_GameMode int32

const (
	DOTA_GameMode_DOTA_GAMEMODE_NONE          DOTA_GameMode = 0
	DOTA_GameMode_DOTA_GAMEMODE_AP            DOTA_GameMode = 1
	DOTA_GameMode_DOTA_GAMEMODE_CM            DOTA_GameMode = 2
	DOTA_GameMode_DOTA_GAMEMODE_RD            DOTA_GameMode = 3
	DOTA_GameMode_DOTA_GAMEMODE_SD            DOTA_GameMode = 4
	DOTA_GameMode_DOTA_GAMEMODE_AR            DOTA_GameMode = 5
	DOTA_GameMode_DOTA_GAMEMODE_INTRO         DOTA_GameMode = 6
	DOTA_GameMode_DOTA_GAMEMODE_HW            DOTA_GameMode = 7
	DOTA_GameMode_DOTA_GAMEMODE_REVERSE_CM    DOTA_GameMode = 8
	DOTA_GameMode_DOTA_GAMEMODE_XMAS          DOTA_GameMode = 9
	DOTA_GameMode_DOTA_GAMEMODE_TUTORIAL      DOTA_GameMode = 10
	DOTA_GameMode_DOTA_GAMEMODE_MO            DOTA_GameMode = 11
	DOTA_GameMode_DOTA_GAMEMODE_LP            DOTA_GameMode = 12
	DOTA_GameMode_DOTA_GAMEMODE_POOL1         DOTA_GameMode = 13
	DOTA_GameMode_DOTA_GAMEMODE_FH            DOTA_GameMode = 14
	DOTA_GameMode_DOTA_GAMEMODE_CUSTOM        DOTA_GameMode = 15
	DOTA_GameMode_DOTA_GAMEMODE_CD            DOTA_GameMode = 16
	DOTA_GameMode_DOTA_GAMEMODE_BD            DOTA_GameMode = 17
	DOTA_GameMode_DOTA_GAMEMODE_ABILITY_DRAFT DOTA_GameMode = 18
	DOTA_GameMode_DOTA_GAMEMODE_EVENT         DOTA_GameMode = 19
	DOTA_GameMode_DOTA_GAMEMODE_ARDM          DOTA_GameMode = 20
	DOTA_GameMode_DOTA_GAMEMODE_1V1MID        DOTA_GameMode = 21
)

var DOTA_GameMode_name = map[int32]string{
	0:  "DOTA_GAMEMODE_NONE",
	1:  "DOTA_GAMEMODE_AP",
	2:  "DOTA_GAMEMODE_CM",
	3:  "DOTA_GAMEMODE_RD",
	4:  "DOTA_GAMEMODE_SD",
	5:  "DOTA_GAMEMODE_AR",
	6:  "DOTA_GAMEMODE_INTRO",
	7:  "DOTA_GAMEMODE_HW",
	8:  "DOTA_GAMEMODE_REVERSE_CM",
	9:  "DOTA_GAMEMODE_XMAS",
	10: "DOTA_GAMEMODE_TUTORIAL",
	11: "DOTA_GAMEMODE_MO",
	12: "DOTA_GAMEMODE_LP",
	13: "DOTA_GAMEMODE_POOL1",
	14: "DOTA_GAMEMODE_FH",
	15: "DOTA_GAMEMODE_CUSTOM",
	16: "DOTA_GAMEMODE_CD",
	17: "DOTA_GAMEMODE_BD",
	18: "DOTA_GAMEMODE_ABILITY_DRAFT",
	19: "DOTA_GAMEMODE_EVENT",
	20: "DOTA_GAMEMODE_ARDM",
	21: "DOTA_GAMEMODE_1V1MID",
}
var DOTA_GameMode_value = map[string]int32{
	"DOTA_GAMEMODE_NONE":          0,
	"DOTA_GAMEMODE_AP":            1,
	"DOTA_GAMEMODE_CM":            2,
	"DOTA_GAMEMODE_RD":            3,
	"DOTA_GAMEMODE_SD":            4,
	"DOTA_GAMEMODE_AR":            5,
	"DOTA_GAMEMODE_INTRO":         6,
	"DOTA_GAMEMODE_HW":            7,
	"DOTA_GAMEMODE_REVERSE_CM":    8,
	"DOTA_GAMEMODE_XMAS":          9,
	"DOTA_GAMEMODE_TUTORIAL":      10,
	"DOTA_GAMEMODE_MO":            11,
	"DOTA_GAMEMODE_LP":            12,
	"DOTA_GAMEMODE_POOL1":         13,
	"DOTA_GAMEMODE_FH":            14,
	"DOTA_GAMEMODE_CUSTOM":        15,
	"DOTA_GAMEMODE_CD":            16,
	"DOTA_GAMEMODE_BD":            17,
	"DOTA_GAMEMODE_ABILITY_DRAFT": 18,
	"DOTA_GAMEMODE_EVENT":         19,
	"DOTA_GAMEMODE_ARDM":          20,
	"DOTA_GAMEMODE_1V1MID":        21,
}

func (x DOTA_GameMode) Enum() *DOTA_GameMode {
	p := new(DOTA_GameMode)
	*p = x
	return p
}
func (x DOTA_GameMode) String() string {
	return proto.EnumName(DOTA_GameMode_name, int32(x))
}
func (x *DOTA_GameMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_GameMode_value, data, "DOTA_GameMode")
	if err != nil {
		return err
	}
	*x = DOTA_GameMode(value)
	return nil
}

type DOTA_GameState int32

const (
	DOTA_GameState_DOTA_GAMERULES_STATE_INIT                     DOTA_GameState = 0
	DOTA_GameState_DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD DOTA_GameState = 1
	DOTA_GameState_DOTA_GAMERULES_STATE_HERO_SELECTION           DOTA_GameState = 2
	DOTA_GameState_DOTA_GAMERULES_STATE_STRATEGY_TIME            DOTA_GameState = 3
	DOTA_GameState_DOTA_GAMERULES_STATE_PRE_GAME                 DOTA_GameState = 4
	DOTA_GameState_DOTA_GAMERULES_STATE_GAME_IN_PROGRESS         DOTA_GameState = 5
	DOTA_GameState_DOTA_GAMERULES_STATE_POST_GAME                DOTA_GameState = 6
	DOTA_GameState_DOTA_GAMERULES_STATE_DISCONNECT               DOTA_GameState = 7
	DOTA_GameState_DOTA_GAMERULES_STATE_TEAM_SHOWCASE            DOTA_GameState = 8
	DOTA_GameState_DOTA_GAMERULES_STATE_LAST                     DOTA_GameState = 9
)

var DOTA_GameState_name = map[int32]string{
	0: "DOTA_GAMERULES_STATE_INIT",
	1: "DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD",
	2: "DOTA_GAMERULES_STATE_HERO_SELECTION",
	3: "DOTA_GAMERULES_STATE_STRATEGY_TIME",
	4: "DOTA_GAMERULES_STATE_PRE_GAME",
	5: "DOTA_GAMERULES_STATE_GAME_IN_PROGRESS",
	6: "DOTA_GAMERULES_STATE_POST_GAME",
	7: "DOTA_GAMERULES_STATE_DISCONNECT",
	8: "DOTA_GAMERULES_STATE_TEAM_SHOWCASE",
	9: "DOTA_GAMERULES_STATE_LAST",
}
var DOTA_GameState_value = map[string]int32{
	"DOTA_GAMERULES_STATE_INIT":                     0,
	"DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD": 1,
	"DOTA_GAMERULES_STATE_HERO_SELECTION":           2,
	"DOTA_GAMERULES_STATE_STRATEGY_TIME":            3,
	"DOTA_GAMERULES_STATE_PRE_GAME":                 4,
	"DOTA_GAMERULES_STATE_GAME_IN_PROGRESS":         5,
	"DOTA_GAMERULES_STATE_POST_GAME":                6,
	"DOTA_GAMERULES_STATE_DISCONNECT":               7,
	"DOTA_GAMERULES_STATE_TEAM_SHOWCASE":            8,
	"DOTA_GAMERULES_STATE_LAST":                     9,
}

func (x DOTA_GameState) Enum() *DOTA_GameState {
	p := new(DOTA_GameState)
	*p = x
	return p
}
func (x DOTA_GameState) String() string {
	return proto.EnumName(DOTA_GameState_name, int32(x))
}
func (x *DOTA_GameState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_GameState_value, data, "DOTA_GameState")
	if err != nil {
		return err
	}
	*x = DOTA_GameState(value)
	return nil
}

type DOTA_GC_TEAM int32

const (
	DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS   DOTA_GC_TEAM = 0
	DOTA_GC_TEAM_DOTA_GC_TEAM_BAD_GUYS    DOTA_GC_TEAM = 1
	DOTA_GC_TEAM_DOTA_GC_TEAM_BROADCASTER DOTA_GC_TEAM = 2
	DOTA_GC_TEAM_DOTA_GC_TEAM_SPECTATOR   DOTA_GC_TEAM = 3
	DOTA_GC_TEAM_DOTA_GC_TEAM_PLAYER_POOL DOTA_GC_TEAM = 4
	DOTA_GC_TEAM_DOTA_GC_TEAM_NOTEAM      DOTA_GC_TEAM = 5
)

var DOTA_GC_TEAM_name = map[int32]string{
	0: "DOTA_GC_TEAM_GOOD_GUYS",
	1: "DOTA_GC_TEAM_BAD_GUYS",
	2: "DOTA_GC_TEAM_BROADCASTER",
	3: "DOTA_GC_TEAM_SPECTATOR",
	4: "DOTA_GC_TEAM_PLAYER_POOL",
	5: "DOTA_GC_TEAM_NOTEAM",
}
var DOTA_GC_TEAM_value = map[string]int32{
	"DOTA_GC_TEAM_GOOD_GUYS":   0,
	"DOTA_GC_TEAM_BAD_GUYS":    1,
	"DOTA_GC_TEAM_BROADCASTER": 2,
	"DOTA_GC_TEAM_SPECTATOR":   3,
	"DOTA_GC_TEAM_PLAYER_POOL": 4,
	"DOTA_GC_TEAM_NOTEAM":      5,
}

func (x DOTA_GC_TEAM) Enum() *DOTA_GC_TEAM {
	p := new(DOTA_GC_TEAM)
	*p = x
	return p
}
func (x DOTA_GC_TEAM) String() string {
	return proto.EnumName(DOTA_GC_TEAM_name, int32(x))
}
func (x *DOTA_GC_TEAM) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_GC_TEAM_value, data, "DOTA_GC_TEAM")
	if err != nil {
		return err
	}
	*x = DOTA_GC_TEAM(value)
	return nil
}

type DOTA_CM_PICK int32

const (
	DOTA_CM_PICK_DOTA_CM_RANDOM    DOTA_CM_PICK = 0
	DOTA_CM_PICK_DOTA_CM_GOOD_GUYS DOTA_CM_PICK = 1
	DOTA_CM_PICK_DOTA_CM_BAD_GUYS  DOTA_CM_PICK = 2
)

var DOTA_CM_PICK_name = map[int32]string{
	0: "DOTA_CM_RANDOM",
	1: "DOTA_CM_GOOD_GUYS",
	2: "DOTA_CM_BAD_GUYS",
}
var DOTA_CM_PICK_value = map[string]int32{
	"DOTA_CM_RANDOM":    0,
	"DOTA_CM_GOOD_GUYS": 1,
	"DOTA_CM_BAD_GUYS":  2,
}

func (x DOTA_CM_PICK) Enum() *DOTA_CM_PICK {
	p := new(DOTA_CM_PICK)
	*p = x
	return p
}
func (x DOTA_CM_PICK) String() string {
	return proto.EnumName(DOTA_CM_PICK_name, int32(x))
}
func (x *DOTA_CM_PICK) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_CM_PICK_value, data, "DOTA_CM_PICK")
	if err != nil {
		return err
	}
	*x = DOTA_CM_PICK(value)
	return nil
}

type DOTAConnectionStateT int32

const (
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_UNKNOWN           DOTAConnectionStateT = 0
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_NOT_YET_CONNECTED DOTAConnectionStateT = 1
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_CONNECTED         DOTAConnectionStateT = 2
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_DISCONNECTED      DOTAConnectionStateT = 3
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_ABANDONED         DOTAConnectionStateT = 4
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_LOADING           DOTAConnectionStateT = 5
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_FAILED            DOTAConnectionStateT = 6
)

var DOTAConnectionStateT_name = map[int32]string{
	0: "DOTA_CONNECTION_STATE_UNKNOWN",
	1: "DOTA_CONNECTION_STATE_NOT_YET_CONNECTED",
	2: "DOTA_CONNECTION_STATE_CONNECTED",
	3: "DOTA_CONNECTION_STATE_DISCONNECTED",
	4: "DOTA_CONNECTION_STATE_ABANDONED",
	5: "DOTA_CONNECTION_STATE_LOADING",
	6: "DOTA_CONNECTION_STATE_FAILED",
}
var DOTAConnectionStateT_value = map[string]int32{
	"DOTA_CONNECTION_STATE_UNKNOWN":           0,
	"DOTA_CONNECTION_STATE_NOT_YET_CONNECTED": 1,
	"DOTA_CONNECTION_STATE_CONNECTED":         2,
	"DOTA_CONNECTION_STATE_DISCONNECTED":      3,
	"DOTA_CONNECTION_STATE_ABANDONED":         4,
	"DOTA_CONNECTION_STATE_LOADING":           5,
	"DOTA_CONNECTION_STATE_FAILED":            6,
}

func (x DOTAConnectionStateT) Enum() *DOTAConnectionStateT {
	p := new(DOTAConnectionStateT)
	*p = x
	return p
}
func (x DOTAConnectionStateT) String() string {
	return proto.EnumName(DOTAConnectionStateT_name, int32(x))
}
func (x *DOTAConnectionStateT) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTAConnectionStateT_value, data, "DOTAConnectionStateT")
	if err != nil {
		return err
	}
	*x = DOTAConnectionStateT(value)
	return nil
}

type DOTALeaverStatusT int32

const (
	DOTALeaverStatusT_DOTA_LEAVER_NONE                     DOTALeaverStatusT = 0
	DOTALeaverStatusT_DOTA_LEAVER_DISCONNECTED             DOTALeaverStatusT = 1
	DOTALeaverStatusT_DOTA_LEAVER_DISCONNECTED_TOO_LONG    DOTALeaverStatusT = 2
	DOTALeaverStatusT_DOTA_LEAVER_ABANDONED                DOTALeaverStatusT = 3
	DOTALeaverStatusT_DOTA_LEAVER_AFK                      DOTALeaverStatusT = 4
	DOTALeaverStatusT_DOTA_LEAVER_NEVER_CONNECTED          DOTALeaverStatusT = 5
	DOTALeaverStatusT_DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG DOTALeaverStatusT = 6
	DOTALeaverStatusT_DOTA_LEAVER_FAILED_TO_READY_UP       DOTALeaverStatusT = 7
	DOTALeaverStatusT_DOTA_LEAVER_DECLINED                 DOTALeaverStatusT = 8
)

var DOTALeaverStatusT_name = map[int32]string{
	0: "DOTA_LEAVER_NONE",
	1: "DOTA_LEAVER_DISCONNECTED",
	2: "DOTA_LEAVER_DISCONNECTED_TOO_LONG",
	3: "DOTA_LEAVER_ABANDONED",
	4: "DOTA_LEAVER_AFK",
	5: "DOTA_LEAVER_NEVER_CONNECTED",
	6: "DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG",
	7: "DOTA_LEAVER_FAILED_TO_READY_UP",
	8: "DOTA_LEAVER_DECLINED",
}
var DOTALeaverStatusT_value = map[string]int32{
	"DOTA_LEAVER_NONE":                     0,
	"DOTA_LEAVER_DISCONNECTED":             1,
	"DOTA_LEAVER_DISCONNECTED_TOO_LONG":    2,
	"DOTA_LEAVER_ABANDONED":                3,
	"DOTA_LEAVER_AFK":                      4,
	"DOTA_LEAVER_NEVER_CONNECTED":          5,
	"DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG": 6,
	"DOTA_LEAVER_FAILED_TO_READY_UP":       7,
	"DOTA_LEAVER_DECLINED":                 8,
}

func (x DOTALeaverStatusT) Enum() *DOTALeaverStatusT {
	p := new(DOTALeaverStatusT)
	*p = x
	return p
}
func (x DOTALeaverStatusT) String() string {
	return proto.EnumName(DOTALeaverStatusT_name, int32(x))
}
func (x *DOTALeaverStatusT) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTALeaverStatusT_value, data, "DOTALeaverStatusT")
	if err != nil {
		return err
	}
	*x = DOTALeaverStatusT(value)
	return nil
}

type DOTALowPriorityBanType int32

const (
	DOTALowPriorityBanType_DOTA_LOW_PRIORITY_BAN_ABANDON           DOTALowPriorityBanType = 0
	DOTALowPriorityBanType_DOTA_LOW_PRIORITY_BAN_REPORTS           DOTALowPriorityBanType = 1
	DOTALowPriorityBanType_DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON DOTALowPriorityBanType = 2
)

var DOTALowPriorityBanType_name = map[int32]string{
	0: "DOTA_LOW_PRIORITY_BAN_ABANDON",
	1: "DOTA_LOW_PRIORITY_BAN_REPORTS",
	2: "DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON",
}
var DOTALowPriorityBanType_value = map[string]int32{
	"DOTA_LOW_PRIORITY_BAN_ABANDON":           0,
	"DOTA_LOW_PRIORITY_BAN_REPORTS":           1,
	"DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON": 2,
}

func (x DOTALowPriorityBanType) Enum() *DOTALowPriorityBanType {
	p := new(DOTALowPriorityBanType)
	*p = x
	return p
}
func (x DOTALowPriorityBanType) String() string {
	return proto.EnumName(DOTALowPriorityBanType_name, int32(x))
}
func (x *DOTALowPriorityBanType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTALowPriorityBanType_value, data, "DOTALowPriorityBanType")
	if err != nil {
		return err
	}
	*x = DOTALowPriorityBanType(value)
	return nil
}

type DOTALobbyReadyState int32

const (
	DOTALobbyReadyState_DOTALobbyReadyState_UNDECLARED DOTALobbyReadyState = 0
	DOTALobbyReadyState_DOTALobbyReadyState_ACCEPTED   DOTALobbyReadyState = 1
	DOTALobbyReadyState_DOTALobbyReadyState_DECLINED   DOTALobbyReadyState = 2
)

var DOTALobbyReadyState_name = map[int32]string{
	0: "DOTALobbyReadyState_UNDECLARED",
	1: "DOTALobbyReadyState_ACCEPTED",
	2: "DOTALobbyReadyState_DECLINED",
}
var DOTALobbyReadyState_value = map[string]int32{
	"DOTALobbyReadyState_UNDECLARED": 0,
	"DOTALobbyReadyState_ACCEPTED":   1,
	"DOTALobbyReadyState_DECLINED":   2,
}

func (x DOTALobbyReadyState) Enum() *DOTALobbyReadyState {
	p := new(DOTALobbyReadyState)
	*p = x
	return p
}
func (x DOTALobbyReadyState) String() string {
	return proto.EnumName(DOTALobbyReadyState_name, int32(x))
}
func (x *DOTALobbyReadyState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTALobbyReadyState_value, data, "DOTALobbyReadyState")
	if err != nil {
		return err
	}
	*x = DOTALobbyReadyState(value)
	return nil
}

type DOTAGameVersion int32

const (
	DOTAGameVersion_GAME_VERSION_CURRENT DOTAGameVersion = 0
	DOTAGameVersion_GAME_VERSION_STABLE  DOTAGameVersion = 1
)

var DOTAGameVersion_name = map[int32]string{
	0: "GAME_VERSION_CURRENT",
	1: "GAME_VERSION_STABLE",
}
var DOTAGameVersion_value = map[string]int32{
	"GAME_VERSION_CURRENT": 0,
	"GAME_VERSION_STABLE":  1,
}

func (x DOTAGameVersion) Enum() *DOTAGameVersion {
	p := new(DOTAGameVersion)
	*p = x
	return p
}
func (x DOTAGameVersion) String() string {
	return proto.EnumName(DOTAGameVersion_name, int32(x))
}
func (x *DOTAGameVersion) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTAGameVersion_value, data, "DOTAGameVersion")
	if err != nil {
		return err
	}
	*x = DOTAGameVersion(value)
	return nil
}

type DOTAJoinLobbyResult int32

const (
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_SUCCESS            DOTAJoinLobbyResult = 0
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_ALREADY_IN_GAME    DOTAJoinLobbyResult = 1
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_INVALID_LOBBY      DOTAJoinLobbyResult = 2
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_INCORRECT_PASSWORD DOTAJoinLobbyResult = 3
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_ACCESS_DENIED      DOTAJoinLobbyResult = 4
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_GENERIC_ERROR      DOTAJoinLobbyResult = 5
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_INCORRECT_VERSION  DOTAJoinLobbyResult = 6
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_IN_TEAM_PARTY      DOTAJoinLobbyResult = 7
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_NO_LOBBY_FOUND     DOTAJoinLobbyResult = 8
	DOTAJoinLobbyResult_DOTA_JOIN_RESULT_LOBBY_FULL         DOTAJoinLobbyResult = 9
)

var DOTAJoinLobbyResult_name = map[int32]string{
	0: "DOTA_JOIN_RESULT_SUCCESS",
	1: "DOTA_JOIN_RESULT_ALREADY_IN_GAME",
	2: "DOTA_JOIN_RESULT_INVALID_LOBBY",
	3: "DOTA_JOIN_RESULT_INCORRECT_PASSWORD",
	4: "DOTA_JOIN_RESULT_ACCESS_DENIED",
	5: "DOTA_JOIN_RESULT_GENERIC_ERROR",
	6: "DOTA_JOIN_RESULT_INCORRECT_VERSION",
	7: "DOTA_JOIN_RESULT_IN_TEAM_PARTY",
	8: "DOTA_JOIN_RESULT_NO_LOBBY_FOUND",
	9: "DOTA_JOIN_RESULT_LOBBY_FULL",
}
var DOTAJoinLobbyResult_value = map[string]int32{
	"DOTA_JOIN_RESULT_SUCCESS":            0,
	"DOTA_JOIN_RESULT_ALREADY_IN_GAME":    1,
	"DOTA_JOIN_RESULT_INVALID_LOBBY":      2,
	"DOTA_JOIN_RESULT_INCORRECT_PASSWORD": 3,
	"DOTA_JOIN_RESULT_ACCESS_DENIED":      4,
	"DOTA_JOIN_RESULT_GENERIC_ERROR":      5,
	"DOTA_JOIN_RESULT_INCORRECT_VERSION":  6,
	"DOTA_JOIN_RESULT_IN_TEAM_PARTY":      7,
	"DOTA_JOIN_RESULT_NO_LOBBY_FOUND":     8,
	"DOTA_JOIN_RESULT_LOBBY_FULL":         9,
}

func (x DOTAJoinLobbyResult) Enum() *DOTAJoinLobbyResult {
	p := new(DOTAJoinLobbyResult)
	*p = x
	return p
}
func (x DOTAJoinLobbyResult) String() string {
	return proto.EnumName(DOTAJoinLobbyResult_name, int32(x))
}
func (x *DOTAJoinLobbyResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTAJoinLobbyResult_value, data, "DOTAJoinLobbyResult")
	if err != nil {
		return err
	}
	*x = DOTAJoinLobbyResult(value)
	return nil
}

type DOTAMatchVote int32

const (
	DOTAMatchVote_DOTAMatchVote_INVALID  DOTAMatchVote = 0
	DOTAMatchVote_DOTAMatchVote_POSITIVE DOTAMatchVote = 1
	DOTAMatchVote_DOTAMatchVote_NEGATIVE DOTAMatchVote = 2
)

var DOTAMatchVote_name = map[int32]string{
	0: "DOTAMatchVote_INVALID",
	1: "DOTAMatchVote_POSITIVE",
	2: "DOTAMatchVote_NEGATIVE",
}
var DOTAMatchVote_value = map[string]int32{
	"DOTAMatchVote_INVALID":  0,
	"DOTAMatchVote_POSITIVE": 1,
	"DOTAMatchVote_NEGATIVE": 2,
}

func (x DOTAMatchVote) Enum() *DOTAMatchVote {
	p := new(DOTAMatchVote)
	*p = x
	return p
}
func (x DOTAMatchVote) String() string {
	return proto.EnumName(DOTAMatchVote_name, int32(x))
}
func (x *DOTAMatchVote) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTAMatchVote_value, data, "DOTAMatchVote")
	if err != nil {
		return err
	}
	*x = DOTAMatchVote(value)
	return nil
}

type DOTA_LobbyMemberXPBonus int32

const (
	DOTA_LobbyMemberXPBonus_DOTA_LobbyMemberXPBonus_DEFAULT        DOTA_LobbyMemberXPBonus = 0
	DOTA_LobbyMemberXPBonus_DOTA_LobbyMemberXPBonus_BATTLE_BOOSTER DOTA_LobbyMemberXPBonus = 1
	DOTA_LobbyMemberXPBonus_DOTA_LobbyMemberXPBonus_SHARE_BONUS    DOTA_LobbyMemberXPBonus = 2
	DOTA_LobbyMemberXPBonus_DOTA_LobbyMemberXPBonus_PARTY          DOTA_LobbyMemberXPBonus = 3
	DOTA_LobbyMemberXPBonus_DOTA_LobbyMemberXPBonus_RECRUITMENT    DOTA_LobbyMemberXPBonus = 4
	DOTA_LobbyMemberXPBonus_DOTA_LobbyMemberXPBonus_PCBANG         DOTA_LobbyMemberXPBonus = 5
)

var DOTA_LobbyMemberXPBonus_name = map[int32]string{
	0: "DOTA_LobbyMemberXPBonus_DEFAULT",
	1: "DOTA_LobbyMemberXPBonus_BATTLE_BOOSTER",
	2: "DOTA_LobbyMemberXPBonus_SHARE_BONUS",
	3: "DOTA_LobbyMemberXPBonus_PARTY",
	4: "DOTA_LobbyMemberXPBonus_RECRUITMENT",
	5: "DOTA_LobbyMemberXPBonus_PCBANG",
}
var DOTA_LobbyMemberXPBonus_value = map[string]int32{
	"DOTA_LobbyMemberXPBonus_DEFAULT":        0,
	"DOTA_LobbyMemberXPBonus_BATTLE_BOOSTER": 1,
	"DOTA_LobbyMemberXPBonus_SHARE_BONUS":    2,
	"DOTA_LobbyMemberXPBonus_PARTY":          3,
	"DOTA_LobbyMemberXPBonus_RECRUITMENT":    4,
	"DOTA_LobbyMemberXPBonus_PCBANG":         5,
}

func (x DOTA_LobbyMemberXPBonus) Enum() *DOTA_LobbyMemberXPBonus {
	p := new(DOTA_LobbyMemberXPBonus)
	*p = x
	return p
}
func (x DOTA_LobbyMemberXPBonus) String() string {
	return proto.EnumName(DOTA_LobbyMemberXPBonus_name, int32(x))
}
func (x *DOTA_LobbyMemberXPBonus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_LobbyMemberXPBonus_value, data, "DOTA_LobbyMemberXPBonus")
	if err != nil {
		return err
	}
	*x = DOTA_LobbyMemberXPBonus(value)
	return nil
}

type EDOTAPlayerMMRType int32

const (
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_Invalid            EDOTAPlayerMMRType = 0
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_GeneralHidden      EDOTAPlayerMMRType = 1
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_SoloHidden         EDOTAPlayerMMRType = 2
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_GeneralCompetitive EDOTAPlayerMMRType = 3
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_SoloCompetitive    EDOTAPlayerMMRType = 4
	EDOTAPlayerMMRType_k_EDOTAPlayerMMRType_1v1Competitive     EDOTAPlayerMMRType = 5
)

var EDOTAPlayerMMRType_name = map[int32]string{
	0: "k_EDOTAPlayerMMRType_Invalid",
	1: "k_EDOTAPlayerMMRType_GeneralHidden",
	2: "k_EDOTAPlayerMMRType_SoloHidden",
	3: "k_EDOTAPlayerMMRType_GeneralCompetitive",
	4: "k_EDOTAPlayerMMRType_SoloCompetitive",
	5: "k_EDOTAPlayerMMRType_1v1Competitive",
}
var EDOTAPlayerMMRType_value = map[string]int32{
	"k_EDOTAPlayerMMRType_Invalid":            0,
	"k_EDOTAPlayerMMRType_GeneralHidden":      1,
	"k_EDOTAPlayerMMRType_SoloHidden":         2,
	"k_EDOTAPlayerMMRType_GeneralCompetitive": 3,
	"k_EDOTAPlayerMMRType_SoloCompetitive":    4,
	"k_EDOTAPlayerMMRType_1v1Competitive":     5,
}

func (x EDOTAPlayerMMRType) Enum() *EDOTAPlayerMMRType {
	p := new(EDOTAPlayerMMRType)
	*p = x
	return p
}
func (x EDOTAPlayerMMRType) String() string {
	return proto.EnumName(EDOTAPlayerMMRType_name, int32(x))
}
func (x *EDOTAPlayerMMRType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EDOTAPlayerMMRType_value, data, "EDOTAPlayerMMRType")
	if err != nil {
		return err
	}
	*x = EDOTAPlayerMMRType(value)
	return nil
}

type LobbyDotaTVDelay int32

const (
	LobbyDotaTVDelay_LobbyDotaTV_10  LobbyDotaTVDelay = 0
	LobbyDotaTVDelay_LobbyDotaTV_120 LobbyDotaTVDelay = 1
	LobbyDotaTVDelay_LobbyDotaTV_300 LobbyDotaTVDelay = 2
)

var LobbyDotaTVDelay_name = map[int32]string{
	0: "LobbyDotaTV_10",
	1: "LobbyDotaTV_120",
	2: "LobbyDotaTV_300",
}
var LobbyDotaTVDelay_value = map[string]int32{
	"LobbyDotaTV_10":  0,
	"LobbyDotaTV_120": 1,
	"LobbyDotaTV_300": 2,
}

func (x LobbyDotaTVDelay) Enum() *LobbyDotaTVDelay {
	p := new(LobbyDotaTVDelay)
	*p = x
	return p
}
func (x LobbyDotaTVDelay) String() string {
	return proto.EnumName(LobbyDotaTVDelay_name, int32(x))
}
func (x *LobbyDotaTVDelay) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LobbyDotaTVDelay_value, data, "LobbyDotaTVDelay")
	if err != nil {
		return err
	}
	*x = LobbyDotaTVDelay(value)
	return nil
}

type EDOTAGCSessionNeed int32

const (
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_Unknown                EDOTAGCSessionNeed = 0
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserNoSessionNeeded    EDOTAGCSessionNeed = 100
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserInOnlineGame       EDOTAGCSessionNeed = 101
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserInLocalGame        EDOTAGCSessionNeed = 102
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserInUIWasConnected   EDOTAGCSessionNeed = 103
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserInUINeverConnected EDOTAGCSessionNeed = 104
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_UserTutorials          EDOTAGCSessionNeed = 105
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_GameServerOnline       EDOTAGCSessionNeed = 200
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_GameServerLocal        EDOTAGCSessionNeed = 201
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_GameServerIdle         EDOTAGCSessionNeed = 202
	EDOTAGCSessionNeed_k_EDOTAGCSessionNeed_GameServerRelay        EDOTAGCSessionNeed = 203
)

var EDOTAGCSessionNeed_name = map[int32]string{
	0:   "k_EDOTAGCSessionNeed_Unknown",
	100: "k_EDOTAGCSessionNeed_UserNoSessionNeeded",
	101: "k_EDOTAGCSessionNeed_UserInOnlineGame",
	102: "k_EDOTAGCSessionNeed_UserInLocalGame",
	103: "k_EDOTAGCSessionNeed_UserInUIWasConnected",
	104: "k_EDOTAGCSessionNeed_UserInUINeverConnected",
	105: "k_EDOTAGCSessionNeed_UserTutorials",
	200: "k_EDOTAGCSessionNeed_GameServerOnline",
	201: "k_EDOTAGCSessionNeed_GameServerLocal",
	202: "k_EDOTAGCSessionNeed_GameServerIdle",
	203: "k_EDOTAGCSessionNeed_GameServerRelay",
}
var EDOTAGCSessionNeed_value = map[string]int32{
	"k_EDOTAGCSessionNeed_Unknown":                0,
	"k_EDOTAGCSessionNeed_UserNoSessionNeeded":    100,
	"k_EDOTAGCSessionNeed_UserInOnlineGame":       101,
	"k_EDOTAGCSessionNeed_UserInLocalGame":        102,
	"k_EDOTAGCSessionNeed_UserInUIWasConnected":   103,
	"k_EDOTAGCSessionNeed_UserInUINeverConnected": 104,
	"k_EDOTAGCSessionNeed_UserTutorials":          105,
	"k_EDOTAGCSessionNeed_GameServerOnline":       200,
	"k_EDOTAGCSessionNeed_GameServerLocal":        201,
	"k_EDOTAGCSessionNeed_GameServerIdle":         202,
	"k_EDOTAGCSessionNeed_GameServerRelay":        203,
}

func (x EDOTAGCSessionNeed) Enum() *EDOTAGCSessionNeed {
	p := new(EDOTAGCSessionNeed)
	*p = x
	return p
}
func (x EDOTAGCSessionNeed) String() string {
	return proto.EnumName(EDOTAGCSessionNeed_name, int32(x))
}
func (x *EDOTAGCSessionNeed) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EDOTAGCSessionNeed_value, data, "EDOTAGCSessionNeed")
	if err != nil {
		return err
	}
	*x = EDOTAGCSessionNeed(value)
	return nil
}

type Fantasy_Roles int32

const (
	Fantasy_Roles_FANTASY_ROLE_UNDEFINED Fantasy_Roles = 0
	Fantasy_Roles_FANTASY_ROLE_CORE      Fantasy_Roles = 1
	Fantasy_Roles_FANTASY_ROLE_SUPPORT   Fantasy_Roles = 2
)

var Fantasy_Roles_name = map[int32]string{
	0: "FANTASY_ROLE_UNDEFINED",
	1: "FANTASY_ROLE_CORE",
	2: "FANTASY_ROLE_SUPPORT",
}
var Fantasy_Roles_value = map[string]int32{
	"FANTASY_ROLE_UNDEFINED": 0,
	"FANTASY_ROLE_CORE":      1,
	"FANTASY_ROLE_SUPPORT":   2,
}

func (x Fantasy_Roles) Enum() *Fantasy_Roles {
	p := new(Fantasy_Roles)
	*p = x
	return p
}
func (x Fantasy_Roles) String() string {
	return proto.EnumName(Fantasy_Roles_name, int32(x))
}
func (x *Fantasy_Roles) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Fantasy_Roles_value, data, "Fantasy_Roles")
	if err != nil {
		return err
	}
	*x = Fantasy_Roles(value)
	return nil
}

type Fantasy_Team_Slots int32

const (
	Fantasy_Team_Slots_FANTASY_SLOT_NONE    Fantasy_Team_Slots = 0
	Fantasy_Team_Slots_FANTASY_SLOT_CORE    Fantasy_Team_Slots = 1
	Fantasy_Team_Slots_FANTASY_SLOT_SUPPORT Fantasy_Team_Slots = 2
	Fantasy_Team_Slots_FANTASY_SLOT_ANY     Fantasy_Team_Slots = 3
	Fantasy_Team_Slots_FANTASY_SLOT_BENCH   Fantasy_Team_Slots = 4
)

var Fantasy_Team_Slots_name = map[int32]string{
	0: "FANTASY_SLOT_NONE",
	1: "FANTASY_SLOT_CORE",
	2: "FANTASY_SLOT_SUPPORT",
	3: "FANTASY_SLOT_ANY",
	4: "FANTASY_SLOT_BENCH",
}
var Fantasy_Team_Slots_value = map[string]int32{
	"FANTASY_SLOT_NONE":    0,
	"FANTASY_SLOT_CORE":    1,
	"FANTASY_SLOT_SUPPORT": 2,
	"FANTASY_SLOT_ANY":     3,
	"FANTASY_SLOT_BENCH":   4,
}

func (x Fantasy_Team_Slots) Enum() *Fantasy_Team_Slots {
	p := new(Fantasy_Team_Slots)
	*p = x
	return p
}
func (x Fantasy_Team_Slots) String() string {
	return proto.EnumName(Fantasy_Team_Slots_name, int32(x))
}
func (x *Fantasy_Team_Slots) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Fantasy_Team_Slots_value, data, "Fantasy_Team_Slots")
	if err != nil {
		return err
	}
	*x = Fantasy_Team_Slots(value)
	return nil
}

type Fantasy_Selection_Mode int32

const (
	Fantasy_Selection_Mode_FANTASY_SELECTION_INVALID        Fantasy_Selection_Mode = 0
	Fantasy_Selection_Mode_FANTASY_SELECTION_LOCKED         Fantasy_Selection_Mode = 1
	Fantasy_Selection_Mode_FANTASY_SELECTION_SHUFFLE        Fantasy_Selection_Mode = 2
	Fantasy_Selection_Mode_FANTASY_SELECTION_FREE_PICK      Fantasy_Selection_Mode = 3
	Fantasy_Selection_Mode_FANTASY_SELECTION_ENDED          Fantasy_Selection_Mode = 4
	Fantasy_Selection_Mode_FANTASY_SELECTION_PRE_SEASON     Fantasy_Selection_Mode = 5
	Fantasy_Selection_Mode_FANTASY_SELECTION_PRE_DRAFT      Fantasy_Selection_Mode = 6
	Fantasy_Selection_Mode_FANTASY_SELECTION_DRAFTING       Fantasy_Selection_Mode = 7
	Fantasy_Selection_Mode_FANTASY_SELECTION_REGULAR_SEASON Fantasy_Selection_Mode = 8
)

var Fantasy_Selection_Mode_name = map[int32]string{
	0: "FANTASY_SELECTION_INVALID",
	1: "FANTASY_SELECTION_LOCKED",
	2: "FANTASY_SELECTION_SHUFFLE",
	3: "FANTASY_SELECTION_FREE_PICK",
	4: "FANTASY_SELECTION_ENDED",
	5: "FANTASY_SELECTION_PRE_SEASON",
	6: "FANTASY_SELECTION_PRE_DRAFT",
	7: "FANTASY_SELECTION_DRAFTING",
	8: "FANTASY_SELECTION_REGULAR_SEASON",
}
var Fantasy_Selection_Mode_value = map[string]int32{
	"FANTASY_SELECTION_INVALID":        0,
	"FANTASY_SELECTION_LOCKED":         1,
	"FANTASY_SELECTION_SHUFFLE":        2,
	"FANTASY_SELECTION_FREE_PICK":      3,
	"FANTASY_SELECTION_ENDED":          4,
	"FANTASY_SELECTION_PRE_SEASON":     5,
	"FANTASY_SELECTION_PRE_DRAFT":      6,
	"FANTASY_SELECTION_DRAFTING":       7,
	"FANTASY_SELECTION_REGULAR_SEASON": 8,
}

func (x Fantasy_Selection_Mode) Enum() *Fantasy_Selection_Mode {
	p := new(Fantasy_Selection_Mode)
	*p = x
	return p
}
func (x Fantasy_Selection_Mode) String() string {
	return proto.EnumName(Fantasy_Selection_Mode_name, int32(x))
}
func (x *Fantasy_Selection_Mode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Fantasy_Selection_Mode_value, data, "Fantasy_Selection_Mode")
	if err != nil {
		return err
	}
	*x = Fantasy_Selection_Mode(value)
	return nil
}

type DOTA_TournamentEvents int32

const (
	DOTA_TournamentEvents_TE_FIRST_BLOOD  DOTA_TournamentEvents = 0
	DOTA_TournamentEvents_TE_GAME_END     DOTA_TournamentEvents = 1
	DOTA_TournamentEvents_TE_MULTI_KILL   DOTA_TournamentEvents = 2
	DOTA_TournamentEvents_TE_HERO_DENY    DOTA_TournamentEvents = 3
	DOTA_TournamentEvents_TE_AEGIS_DENY   DOTA_TournamentEvents = 4
	DOTA_TournamentEvents_TE_AEGIS_STOLEN DOTA_TournamentEvents = 5
	DOTA_TournamentEvents_TE_GODLIKE      DOTA_TournamentEvents = 6
	DOTA_TournamentEvents_TE_COURIER_KILL DOTA_TournamentEvents = 7
	DOTA_TournamentEvents_TE_ECHOSLAM     DOTA_TournamentEvents = 8
	DOTA_TournamentEvents_TE_RAPIER       DOTA_TournamentEvents = 9
	DOTA_TournamentEvents_TE_EARLY_ROSHAN DOTA_TournamentEvents = 10
)

var DOTA_TournamentEvents_name = map[int32]string{
	0:  "TE_FIRST_BLOOD",
	1:  "TE_GAME_END",
	2:  "TE_MULTI_KILL",
	3:  "TE_HERO_DENY",
	4:  "TE_AEGIS_DENY",
	5:  "TE_AEGIS_STOLEN",
	6:  "TE_GODLIKE",
	7:  "TE_COURIER_KILL",
	8:  "TE_ECHOSLAM",
	9:  "TE_RAPIER",
	10: "TE_EARLY_ROSHAN",
}
var DOTA_TournamentEvents_value = map[string]int32{
	"TE_FIRST_BLOOD":  0,
	"TE_GAME_END":     1,
	"TE_MULTI_KILL":   2,
	"TE_HERO_DENY":    3,
	"TE_AEGIS_DENY":   4,
	"TE_AEGIS_STOLEN": 5,
	"TE_GODLIKE":      6,
	"TE_COURIER_KILL": 7,
	"TE_ECHOSLAM":     8,
	"TE_RAPIER":       9,
	"TE_EARLY_ROSHAN": 10,
}

func (x DOTA_TournamentEvents) Enum() *DOTA_TournamentEvents {
	p := new(DOTA_TournamentEvents)
	*p = x
	return p
}
func (x DOTA_TournamentEvents) String() string {
	return proto.EnumName(DOTA_TournamentEvents_name, int32(x))
}
func (x *DOTA_TournamentEvents) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_TournamentEvents_value, data, "DOTA_TournamentEvents")
	if err != nil {
		return err
	}
	*x = DOTA_TournamentEvents(value)
	return nil
}

type CSODOTAParty_State int32

const (
	CSODOTAParty_UI            CSODOTAParty_State = 0
	CSODOTAParty_FINDING_MATCH CSODOTAParty_State = 1
	CSODOTAParty_IN_MATCH      CSODOTAParty_State = 2
)

var CSODOTAParty_State_name = map[int32]string{
	0: "UI",
	1: "FINDING_MATCH",
	2: "IN_MATCH",
}
var CSODOTAParty_State_value = map[string]int32{
	"UI":            0,
	"FINDING_MATCH": 1,
	"IN_MATCH":      2,
}

func (x CSODOTAParty_State) Enum() *CSODOTAParty_State {
	p := new(CSODOTAParty_State)
	*p = x
	return p
}
func (x CSODOTAParty_State) String() string {
	return proto.EnumName(CSODOTAParty_State_name, int32(x))
}
func (x *CSODOTAParty_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CSODOTAParty_State_value, data, "CSODOTAParty_State")
	if err != nil {
		return err
	}
	*x = CSODOTAParty_State(value)
	return nil
}

type CSODOTALobby_State int32

const (
	CSODOTALobby_UI           CSODOTALobby_State = 0
	CSODOTALobby_READYUP      CSODOTALobby_State = 4
	CSODOTALobby_SERVERSETUP  CSODOTALobby_State = 1
	CSODOTALobby_RUN          CSODOTALobby_State = 2
	CSODOTALobby_POSTGAME     CSODOTALobby_State = 3
	CSODOTALobby_NOTREADY     CSODOTALobby_State = 5
	CSODOTALobby_SERVERASSIGN CSODOTALobby_State = 6
)

var CSODOTALobby_State_name = map[int32]string{
	0: "UI",
	4: "READYUP",
	1: "SERVERSETUP",
	2: "RUN",
	3: "POSTGAME",
	5: "NOTREADY",
	6: "SERVERASSIGN",
}
var CSODOTALobby_State_value = map[string]int32{
	"UI":           0,
	"READYUP":      4,
	"SERVERSETUP":  1,
	"RUN":          2,
	"POSTGAME":     3,
	"NOTREADY":     5,
	"SERVERASSIGN": 6,
}

func (x CSODOTALobby_State) Enum() *CSODOTALobby_State {
	p := new(CSODOTALobby_State)
	*p = x
	return p
}
func (x CSODOTALobby_State) String() string {
	return proto.EnumName(CSODOTALobby_State_name, int32(x))
}
func (x *CSODOTALobby_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CSODOTALobby_State_value, data, "CSODOTALobby_State")
	if err != nil {
		return err
	}
	*x = CSODOTALobby_State(value)
	return nil
}

type CSODOTALobby_LobbyType int32

const (
	CSODOTALobby_INVALID                 CSODOTALobby_LobbyType = -1
	CSODOTALobby_CASUAL_MATCH            CSODOTALobby_LobbyType = 0
	CSODOTALobby_PRACTICE                CSODOTALobby_LobbyType = 1
	CSODOTALobby_TOURNAMENT              CSODOTALobby_LobbyType = 2
	CSODOTALobby_COOP_BOT_MATCH          CSODOTALobby_LobbyType = 4
	CSODOTALobby_LEGACY_TEAM_MATCH       CSODOTALobby_LobbyType = 5
	CSODOTALobby_LEGACY_SOLO_QUEUE_MATCH CSODOTALobby_LobbyType = 6
	CSODOTALobby_COMPETITIVE_MATCH       CSODOTALobby_LobbyType = 7
	CSODOTALobby_CASUAL_1V1_MATCH        CSODOTALobby_LobbyType = 8
)

var CSODOTALobby_LobbyType_name = map[int32]string{
	-1: "INVALID",
	0:  "CASUAL_MATCH",
	1:  "PRACTICE",
	2:  "TOURNAMENT",
	4:  "COOP_BOT_MATCH",
	5:  "LEGACY_TEAM_MATCH",
	6:  "LEGACY_SOLO_QUEUE_MATCH",
	7:  "COMPETITIVE_MATCH",
	8:  "CASUAL_1V1_MATCH",
}
var CSODOTALobby_LobbyType_value = map[string]int32{
	"INVALID":                 -1,
	"CASUAL_MATCH":            0,
	"PRACTICE":                1,
	"TOURNAMENT":              2,
	"COOP_BOT_MATCH":          4,
	"LEGACY_TEAM_MATCH":       5,
	"LEGACY_SOLO_QUEUE_MATCH": 6,
	"COMPETITIVE_MATCH":       7,
	"CASUAL_1V1_MATCH":        8,
}

func (x CSODOTALobby_LobbyType) Enum() *CSODOTALobby_LobbyType {
	p := new(CSODOTALobby_LobbyType)
	*p = x
	return p
}
func (x CSODOTALobby_LobbyType) String() string {
	return proto.EnumName(CSODOTALobby_LobbyType_name, int32(x))
}
func (x *CSODOTALobby_LobbyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CSODOTALobby_LobbyType_value, data, "CSODOTALobby_LobbyType")
	if err != nil {
		return err
	}
	*x = CSODOTALobby_LobbyType(value)
	return nil
}

type CMsgPerfectWorldUserLookupResponse_EResultCode int32

const (
	CMsgPerfectWorldUserLookupResponse_SUCCESS_ACCOUNT_FOUND                CMsgPerfectWorldUserLookupResponse_EResultCode = 0
	CMsgPerfectWorldUserLookupResponse_ERROR_UNKNOWN                        CMsgPerfectWorldUserLookupResponse_EResultCode = 1
	CMsgPerfectWorldUserLookupResponse_ERROR_USER_NAME_WRONG_FORMAT         CMsgPerfectWorldUserLookupResponse_EResultCode = 2
	CMsgPerfectWorldUserLookupResponse_ERROR_NO_PERFECT_WORLD_ACCOUNT_FOUND CMsgPerfectWorldUserLookupResponse_EResultCode = 3
	CMsgPerfectWorldUserLookupResponse_ERROR_NO_LINKED_STEAM_ACCOUNT_FOUND  CMsgPerfectWorldUserLookupResponse_EResultCode = 4
)

var CMsgPerfectWorldUserLookupResponse_EResultCode_name = map[int32]string{
	0: "SUCCESS_ACCOUNT_FOUND",
	1: "ERROR_UNKNOWN",
	2: "ERROR_USER_NAME_WRONG_FORMAT",
	3: "ERROR_NO_PERFECT_WORLD_ACCOUNT_FOUND",
	4: "ERROR_NO_LINKED_STEAM_ACCOUNT_FOUND",
}
var CMsgPerfectWorldUserLookupResponse_EResultCode_value = map[string]int32{
	"SUCCESS_ACCOUNT_FOUND":                0,
	"ERROR_UNKNOWN":                        1,
	"ERROR_USER_NAME_WRONG_FORMAT":         2,
	"ERROR_NO_PERFECT_WORLD_ACCOUNT_FOUND": 3,
	"ERROR_NO_LINKED_STEAM_ACCOUNT_FOUND":  4,
}

func (x CMsgPerfectWorldUserLookupResponse_EResultCode) Enum() *CMsgPerfectWorldUserLookupResponse_EResultCode {
	p := new(CMsgPerfectWorldUserLookupResponse_EResultCode)
	*p = x
	return p
}
func (x CMsgPerfectWorldUserLookupResponse_EResultCode) String() string {
	return proto.EnumName(CMsgPerfectWorldUserLookupResponse_EResultCode_name, int32(x))
}
func (x *CMsgPerfectWorldUserLookupResponse_EResultCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgPerfectWorldUserLookupResponse_EResultCode_value, data, "CMsgPerfectWorldUserLookupResponse_EResultCode")
	if err != nil {
		return err
	}
	*x = CMsgPerfectWorldUserLookupResponse_EResultCode(value)
	return nil
}

type CSODOTAGameAccountClient struct {
	AccountId                                *uint32                              `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	Wins                                     *uint32                              `protobuf:"varint,3,opt,name=wins" json:"wins,omitempty"`
	Losses                                   *uint32                              `protobuf:"varint,4,opt,name=losses" json:"losses,omitempty"`
	Xp                                       *uint32                              `protobuf:"varint,12,opt,name=xp" json:"xp,omitempty"`
	Level                                    *uint32                              `protobuf:"varint,13,opt,name=level" json:"level,omitempty"`
	InitialSkill                             *uint32                              `protobuf:"varint,14,opt,name=initial_skill" json:"initial_skill,omitempty"`
	LeaverCount                              *uint32                              `protobuf:"varint,15,opt,name=leaver_count" json:"leaver_count,omitempty"`
	SecondaryLeaverCount                     *uint32                              `protobuf:"varint,58,opt,name=secondary_leaver_count" json:"secondary_leaver_count,omitempty"`
	LowPriorityUntilDate                     *uint32                              `protobuf:"varint,18,opt,name=low_priority_until_date" json:"low_priority_until_date,omitempty"`
	PreventTextChatUntilDate                 *uint32                              `protobuf:"varint,20,opt,name=prevent_text_chat_until_date" json:"prevent_text_chat_until_date,omitempty"`
	PreventVoiceUntilDate                    *uint32                              `protobuf:"varint,21,opt,name=prevent_voice_until_date" json:"prevent_voice_until_date,omitempty"`
	LastAbandonedGameDate                    *uint32                              `protobuf:"varint,22,opt,name=last_abandoned_game_date" json:"last_abandoned_game_date,omitempty"`
	LastSecondaryAbandonedGameDate           *uint32                              `protobuf:"varint,59,opt,name=last_secondary_abandoned_game_date" json:"last_secondary_abandoned_game_date,omitempty"`
	LeaverPenaltyCount                       *uint32                              `protobuf:"varint,23,opt,name=leaver_penalty_count" json:"leaver_penalty_count,omitempty"`
	CompletedGameStreak                      *uint32                              `protobuf:"varint,24,opt,name=completed_game_streak" json:"completed_game_streak,omitempty"`
	Teaching                                 *uint32                              `protobuf:"varint,28,opt,name=teaching" json:"teaching,omitempty"`
	Leadership                               *uint32                              `protobuf:"varint,29,opt,name=leadership" json:"leadership,omitempty"`
	Friendly                                 *uint32                              `protobuf:"varint,30,opt,name=friendly" json:"friendly,omitempty"`
	Forgiving                                *uint32                              `protobuf:"varint,31,opt,name=forgiving" json:"forgiving,omitempty"`
	AccountDisabledUntilDate                 *uint32                              `protobuf:"varint,38,opt,name=account_disabled_until_date" json:"account_disabled_until_date,omitempty"`
	AccountDisabledCount                     *uint32                              `protobuf:"varint,39,opt,name=account_disabled_count" json:"account_disabled_count,omitempty"`
	ShowcaseHeroId                           *uint32                              `protobuf:"varint,40,opt,name=showcase_hero_id" json:"showcase_hero_id,omitempty"`
	MatchDisabledUntilDate                   *uint32                              `protobuf:"varint,41,opt,name=match_disabled_until_date" json:"match_disabled_until_date,omitempty"`
	MatchDisabledCount                       *uint32                              `protobuf:"varint,42,opt,name=match_disabled_count" json:"match_disabled_count,omitempty"`
	PartnerAccountType                       *PartnerAccountType `protobuf:"varint,44,opt,name=partner_account_type,enum=PartnerAccountType,def=0" json:"partner_account_type,omitempty"`
	PartnerAccountState                      *uint32                              `protobuf:"varint,45,opt,name=partner_account_state" json:"partner_account_state,omitempty"`
	Shutdownlawterminatetimestamp            *uint32                              `protobuf:"varint,47,opt,name=shutdownlawterminatetimestamp" json:"shutdownlawterminatetimestamp,omitempty"`
	LowPriorityGamesRemaining                *uint32                              `protobuf:"varint,48,opt,name=low_priority_games_remaining" json:"low_priority_games_remaining,omitempty"`
	CompetitiveRank                          *uint32                              `protobuf:"varint,49,opt,name=competitive_rank" json:"competitive_rank,omitempty"`
	CalibrationGamesRemaining                *uint32                              `protobuf:"varint,51,opt,name=calibration_games_remaining" json:"calibration_games_remaining,omitempty"`
	SoloCompetitiveRank                      *uint32                              `protobuf:"varint,52,opt,name=solo_competitive_rank" json:"solo_competitive_rank,omitempty"`
	SoloCalibrationGamesRemaining            *uint32                              `protobuf:"varint,54,opt,name=solo_calibration_games_remaining" json:"solo_calibration_games_remaining,omitempty"`
	Competitive_1V1Rank                      *uint32                              `protobuf:"varint,63,opt,name=competitive_1v1_rank" json:"competitive_1v1_rank,omitempty"`
	Competitive_1V1CalibrationGamesRemaining *uint32                              `protobuf:"varint,64,opt,name=competitive_1v1_calibration_games_remaining" json:"competitive_1v1_calibration_games_remaining,omitempty"`
	RecruitmentLevel                         *uint32                              `protobuf:"varint,55,opt,name=recruitment_level" json:"recruitment_level,omitempty"`
	HasNewNotifications                      *bool                                `protobuf:"varint,56,opt,name=has_new_notifications" json:"has_new_notifications,omitempty"`
	IsLeagueAdmin                            *bool                                `protobuf:"varint,57,opt,name=is_league_admin" json:"is_league_admin,omitempty"`
	CasualGamesPlayed                        *uint32                              `protobuf:"varint,60,opt,name=casual_games_played" json:"casual_games_played,omitempty"`
	SoloCompetitiveGamesPlayed               *uint32                              `protobuf:"varint,61,opt,name=solo_competitive_games_played" json:"solo_competitive_games_played,omitempty"`
	PartyCompetitiveGamesPlayed              *uint32                              `protobuf:"varint,62,opt,name=party_competitive_games_played" json:"party_competitive_games_played,omitempty"`
	Casual_1V1GamesPlayed                    *uint32                              `protobuf:"varint,65,opt,name=casual_1v1_games_played" json:"casual_1v1_games_played,omitempty"`
	CompetitiveTeamGamesPlayed               *uint32                              `protobuf:"varint,66,opt,name=competitive_team_games_played" json:"competitive_team_games_played,omitempty"`
	XXX_unrecognized                         []byte                               `json:"-"`
}

func (m *CSODOTAGameAccountClient) Reset()         { *m = CSODOTAGameAccountClient{} }
func (m *CSODOTAGameAccountClient) String() string { return proto.CompactTextString(m) }
func (*CSODOTAGameAccountClient) ProtoMessage()    {}

const Default_CSODOTAGameAccountClient_PartnerAccountType PartnerAccountType = PartnerAccountType_PARTNER_NONE

func (m *CSODOTAGameAccountClient) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetWins() uint32 {
	if m != nil && m.Wins != nil {
		return *m.Wins
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLosses() uint32 {
	if m != nil && m.Losses != nil {
		return *m.Losses
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetXp() uint32 {
	if m != nil && m.Xp != nil {
		return *m.Xp
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetInitialSkill() uint32 {
	if m != nil && m.InitialSkill != nil {
		return *m.InitialSkill
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLeaverCount() uint32 {
	if m != nil && m.LeaverCount != nil {
		return *m.LeaverCount
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetSecondaryLeaverCount() uint32 {
	if m != nil && m.SecondaryLeaverCount != nil {
		return *m.SecondaryLeaverCount
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLowPriorityUntilDate() uint32 {
	if m != nil && m.LowPriorityUntilDate != nil {
		return *m.LowPriorityUntilDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetPreventTextChatUntilDate() uint32 {
	if m != nil && m.PreventTextChatUntilDate != nil {
		return *m.PreventTextChatUntilDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetPreventVoiceUntilDate() uint32 {
	if m != nil && m.PreventVoiceUntilDate != nil {
		return *m.PreventVoiceUntilDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLastAbandonedGameDate() uint32 {
	if m != nil && m.LastAbandonedGameDate != nil {
		return *m.LastAbandonedGameDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLastSecondaryAbandonedGameDate() uint32 {
	if m != nil && m.LastSecondaryAbandonedGameDate != nil {
		return *m.LastSecondaryAbandonedGameDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLeaverPenaltyCount() uint32 {
	if m != nil && m.LeaverPenaltyCount != nil {
		return *m.LeaverPenaltyCount
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetCompletedGameStreak() uint32 {
	if m != nil && m.CompletedGameStreak != nil {
		return *m.CompletedGameStreak
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetTeaching() uint32 {
	if m != nil && m.Teaching != nil {
		return *m.Teaching
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLeadership() uint32 {
	if m != nil && m.Leadership != nil {
		return *m.Leadership
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetFriendly() uint32 {
	if m != nil && m.Friendly != nil {
		return *m.Friendly
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetForgiving() uint32 {
	if m != nil && m.Forgiving != nil {
		return *m.Forgiving
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetAccountDisabledUntilDate() uint32 {
	if m != nil && m.AccountDisabledUntilDate != nil {
		return *m.AccountDisabledUntilDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetAccountDisabledCount() uint32 {
	if m != nil && m.AccountDisabledCount != nil {
		return *m.AccountDisabledCount
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetShowcaseHeroId() uint32 {
	if m != nil && m.ShowcaseHeroId != nil {
		return *m.ShowcaseHeroId
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetMatchDisabledUntilDate() uint32 {
	if m != nil && m.MatchDisabledUntilDate != nil {
		return *m.MatchDisabledUntilDate
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetMatchDisabledCount() uint32 {
	if m != nil && m.MatchDisabledCount != nil {
		return *m.MatchDisabledCount
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetPartnerAccountType() PartnerAccountType {
	if m != nil && m.PartnerAccountType != nil {
		return *m.PartnerAccountType
	}
	return Default_CSODOTAGameAccountClient_PartnerAccountType
}

func (m *CSODOTAGameAccountClient) GetPartnerAccountState() uint32 {
	if m != nil && m.PartnerAccountState != nil {
		return *m.PartnerAccountState
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetShutdownlawterminatetimestamp() uint32 {
	if m != nil && m.Shutdownlawterminatetimestamp != nil {
		return *m.Shutdownlawterminatetimestamp
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetLowPriorityGamesRemaining() uint32 {
	if m != nil && m.LowPriorityGamesRemaining != nil {
		return *m.LowPriorityGamesRemaining
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetCompetitiveRank() uint32 {
	if m != nil && m.CompetitiveRank != nil {
		return *m.CompetitiveRank
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetCalibrationGamesRemaining() uint32 {
	if m != nil && m.CalibrationGamesRemaining != nil {
		return *m.CalibrationGamesRemaining
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetSoloCompetitiveRank() uint32 {
	if m != nil && m.SoloCompetitiveRank != nil {
		return *m.SoloCompetitiveRank
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetSoloCalibrationGamesRemaining() uint32 {
	if m != nil && m.SoloCalibrationGamesRemaining != nil {
		return *m.SoloCalibrationGamesRemaining
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetCompetitive_1V1Rank() uint32 {
	if m != nil && m.Competitive_1V1Rank != nil {
		return *m.Competitive_1V1Rank
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetCompetitive_1V1CalibrationGamesRemaining() uint32 {
	if m != nil && m.Competitive_1V1CalibrationGamesRemaining != nil {
		return *m.Competitive_1V1CalibrationGamesRemaining
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetRecruitmentLevel() uint32 {
	if m != nil && m.RecruitmentLevel != nil {
		return *m.RecruitmentLevel
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetHasNewNotifications() bool {
	if m != nil && m.HasNewNotifications != nil {
		return *m.HasNewNotifications
	}
	return false
}

func (m *CSODOTAGameAccountClient) GetIsLeagueAdmin() bool {
	if m != nil && m.IsLeagueAdmin != nil {
		return *m.IsLeagueAdmin
	}
	return false
}

func (m *CSODOTAGameAccountClient) GetCasualGamesPlayed() uint32 {
	if m != nil && m.CasualGamesPlayed != nil {
		return *m.CasualGamesPlayed
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetSoloCompetitiveGamesPlayed() uint32 {
	if m != nil && m.SoloCompetitiveGamesPlayed != nil {
		return *m.SoloCompetitiveGamesPlayed
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetPartyCompetitiveGamesPlayed() uint32 {
	if m != nil && m.PartyCompetitiveGamesPlayed != nil {
		return *m.PartyCompetitiveGamesPlayed
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetCasual_1V1GamesPlayed() uint32 {
	if m != nil && m.Casual_1V1GamesPlayed != nil {
		return *m.Casual_1V1GamesPlayed
	}
	return 0
}

func (m *CSODOTAGameAccountClient) GetCompetitiveTeamGamesPlayed() uint32 {
	if m != nil && m.CompetitiveTeamGamesPlayed != nil {
		return *m.CompetitiveTeamGamesPlayed
	}
	return 0
}

type CSODOTAPartyMember struct {
	PartnerType      *PartnerAccountType `protobuf:"varint,1,opt,name=partner_type,enum=PartnerAccountType,def=0" json:"partner_type,omitempty"`
	IsCoach          *bool                                `protobuf:"varint,2,opt,name=is_coach" json:"is_coach,omitempty"`
	XXX_unrecognized []byte                               `json:"-"`
}

func (m *CSODOTAPartyMember) Reset()         { *m = CSODOTAPartyMember{} }
func (m *CSODOTAPartyMember) String() string { return proto.CompactTextString(m) }
func (*CSODOTAPartyMember) ProtoMessage()    {}

const Default_CSODOTAPartyMember_PartnerType PartnerAccountType = PartnerAccountType_PARTNER_NONE

func (m *CSODOTAPartyMember) GetPartnerType() PartnerAccountType {
	if m != nil && m.PartnerType != nil {
		return *m.PartnerType
	}
	return Default_CSODOTAPartyMember_PartnerType
}

func (m *CSODOTAPartyMember) GetIsCoach() bool {
	if m != nil && m.IsCoach != nil {
		return *m.IsCoach
	}
	return false
}

type CSODOTAParty struct {
	PartyId                         *uint64                              `protobuf:"varint,1,opt,name=party_id" json:"party_id,omitempty"`
	LeaderId                        *uint64                              `protobuf:"fixed64,2,opt,name=leader_id" json:"leader_id,omitempty"`
	MemberIds                       []uint64                             `protobuf:"fixed64,3,rep,name=member_ids" json:"member_ids,omitempty"`
	GameModes                       *uint32                              `protobuf:"varint,4,opt,name=game_modes" json:"game_modes,omitempty"`
	PendingInvites                  []uint64                             `protobuf:"fixed64,5,rep,name=pending_invites" json:"pending_invites,omitempty"`
	State                           *CSODOTAParty_State                  `protobuf:"varint,6,opt,name=state,enum=CSODOTAParty_State,def=0" json:"state,omitempty"`
	EffectiveStartedMatchmakingTime *uint32                              `protobuf:"varint,7,opt,name=effective_started_matchmaking_time" json:"effective_started_matchmaking_time,omitempty"`
	RawStartedMatchmakingTime       *uint32                              `protobuf:"varint,32,opt,name=raw_started_matchmaking_time" json:"raw_started_matchmaking_time,omitempty"`
	AttemptStartTime                *uint32                              `protobuf:"varint,33,opt,name=attempt_start_time" json:"attempt_start_time,omitempty"`
	AttemptNum                      *uint32                              `protobuf:"varint,34,opt,name=attempt_num" json:"attempt_num,omitempty"`
	Matchgroups                     *uint32                              `protobuf:"varint,11,opt,name=matchgroups" json:"matchgroups,omitempty"`
	LowPriorityAccountId            *uint32                              `protobuf:"varint,19,opt,name=low_priority_account_id" json:"low_priority_account_id,omitempty"`
	MatchType                       *MatchType         `protobuf:"varint,21,opt,name=match_type,enum=MatchType,def=0" json:"match_type,omitempty"`
	BotDifficulty                   *DOTABotDifficulty `protobuf:"varint,22,opt,name=bot_difficulty,enum=DOTABotDifficulty,def=0" json:"bot_difficulty,omitempty"`
	TeamId                          *uint32                              `protobuf:"varint,23,opt,name=team_id" json:"team_id,omitempty"`
	MatchDisabledUntilDate          *uint32                              `protobuf:"varint,24,opt,name=match_disabled_until_date" json:"match_disabled_until_date,omitempty"`
	MatchDisabledAccountId          *uint32                              `protobuf:"varint,25,opt,name=match_disabled_account_id" json:"match_disabled_account_id,omitempty"`
	MatchmakingMaxRangeMinutes      *uint32                              `protobuf:"varint,26,opt,name=matchmaking_max_range_minutes" json:"matchmaking_max_range_minutes,omitempty"`
	Matchlanguages                  *uint32                              `protobuf:"varint,27,opt,name=matchlanguages" json:"matchlanguages,omitempty"`
	MapPreference                   *uint32                              `protobuf:"varint,38,opt,name=map_preference" json:"map_preference,omitempty"`
	Members                         []*CSODOTAPartyMember                `protobuf:"bytes,29,rep,name=members" json:"members,omitempty"`
	OpenGuildId                     *uint32                              `protobuf:"varint,30,opt,name=open_guild_id" json:"open_guild_id,omitempty"`
	CommonGuilds                    []uint32                             `protobuf:"varint,31,rep,name=common_guilds" json:"common_guilds,omitempty"`
	LowPriorityGamesRemaining       *uint32                              `protobuf:"varint,35,opt,name=low_priority_games_remaining" json:"low_priority_games_remaining,omitempty"`
	MinLevel                        *uint32                              `protobuf:"varint,36,opt,name=min_level" json:"min_level,omitempty"`
	MaxLevel                        *uint32                              `protobuf:"varint,37,opt,name=max_level" json:"max_level,omitempty"`
	XXX_unrecognized                []byte                               `json:"-"`
}

func (m *CSODOTAParty) Reset()         { *m = CSODOTAParty{} }
func (m *CSODOTAParty) String() string { return proto.CompactTextString(m) }
func (*CSODOTAParty) ProtoMessage()    {}

const Default_CSODOTAParty_State CSODOTAParty_State = CSODOTAParty_UI
const Default_CSODOTAParty_MatchType MatchType = MatchType_MATCH_TYPE_CASUAL
const Default_CSODOTAParty_BotDifficulty DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE

func (m *CSODOTAParty) GetPartyId() uint64 {
	if m != nil && m.PartyId != nil {
		return *m.PartyId
	}
	return 0
}

func (m *CSODOTAParty) GetLeaderId() uint64 {
	if m != nil && m.LeaderId != nil {
		return *m.LeaderId
	}
	return 0
}

func (m *CSODOTAParty) GetMemberIds() []uint64 {
	if m != nil {
		return m.MemberIds
	}
	return nil
}

func (m *CSODOTAParty) GetGameModes() uint32 {
	if m != nil && m.GameModes != nil {
		return *m.GameModes
	}
	return 0
}

func (m *CSODOTAParty) GetPendingInvites() []uint64 {
	if m != nil {
		return m.PendingInvites
	}
	return nil
}

func (m *CSODOTAParty) GetState() CSODOTAParty_State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_CSODOTAParty_State
}

func (m *CSODOTAParty) GetEffectiveStartedMatchmakingTime() uint32 {
	if m != nil && m.EffectiveStartedMatchmakingTime != nil {
		return *m.EffectiveStartedMatchmakingTime
	}
	return 0
}

func (m *CSODOTAParty) GetRawStartedMatchmakingTime() uint32 {
	if m != nil && m.RawStartedMatchmakingTime != nil {
		return *m.RawStartedMatchmakingTime
	}
	return 0
}

func (m *CSODOTAParty) GetAttemptStartTime() uint32 {
	if m != nil && m.AttemptStartTime != nil {
		return *m.AttemptStartTime
	}
	return 0
}

func (m *CSODOTAParty) GetAttemptNum() uint32 {
	if m != nil && m.AttemptNum != nil {
		return *m.AttemptNum
	}
	return 0
}

func (m *CSODOTAParty) GetMatchgroups() uint32 {
	if m != nil && m.Matchgroups != nil {
		return *m.Matchgroups
	}
	return 0
}

func (m *CSODOTAParty) GetLowPriorityAccountId() uint32 {
	if m != nil && m.LowPriorityAccountId != nil {
		return *m.LowPriorityAccountId
	}
	return 0
}

func (m *CSODOTAParty) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return Default_CSODOTAParty_MatchType
}

func (m *CSODOTAParty) GetBotDifficulty() DOTABotDifficulty {
	if m != nil && m.BotDifficulty != nil {
		return *m.BotDifficulty
	}
	return Default_CSODOTAParty_BotDifficulty
}

func (m *CSODOTAParty) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CSODOTAParty) GetMatchDisabledUntilDate() uint32 {
	if m != nil && m.MatchDisabledUntilDate != nil {
		return *m.MatchDisabledUntilDate
	}
	return 0
}

func (m *CSODOTAParty) GetMatchDisabledAccountId() uint32 {
	if m != nil && m.MatchDisabledAccountId != nil {
		return *m.MatchDisabledAccountId
	}
	return 0
}

func (m *CSODOTAParty) GetMatchmakingMaxRangeMinutes() uint32 {
	if m != nil && m.MatchmakingMaxRangeMinutes != nil {
		return *m.MatchmakingMaxRangeMinutes
	}
	return 0
}

func (m *CSODOTAParty) GetMatchlanguages() uint32 {
	if m != nil && m.Matchlanguages != nil {
		return *m.Matchlanguages
	}
	return 0
}

func (m *CSODOTAParty) GetMapPreference() uint32 {
	if m != nil && m.MapPreference != nil {
		return *m.MapPreference
	}
	return 0
}

func (m *CSODOTAParty) GetMembers() []*CSODOTAPartyMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CSODOTAParty) GetOpenGuildId() uint32 {
	if m != nil && m.OpenGuildId != nil {
		return *m.OpenGuildId
	}
	return 0
}

func (m *CSODOTAParty) GetCommonGuilds() []uint32 {
	if m != nil {
		return m.CommonGuilds
	}
	return nil
}

func (m *CSODOTAParty) GetLowPriorityGamesRemaining() uint32 {
	if m != nil && m.LowPriorityGamesRemaining != nil {
		return *m.LowPriorityGamesRemaining
	}
	return 0
}

func (m *CSODOTAParty) GetMinLevel() uint32 {
	if m != nil && m.MinLevel != nil {
		return *m.MinLevel
	}
	return 0
}

func (m *CSODOTAParty) GetMaxLevel() uint32 {
	if m != nil && m.MaxLevel != nil {
		return *m.MaxLevel
	}
	return 0
}

type CSODOTAPartyInvite struct {
	GroupId           *uint64                           `protobuf:"varint,1,opt,name=group_id" json:"group_id,omitempty"`
	SenderId          *uint64                           `protobuf:"fixed64,2,opt,name=sender_id" json:"sender_id,omitempty"`
	SenderName        *string                           `protobuf:"bytes,3,opt,name=sender_name" json:"sender_name,omitempty"`
	Members           []*CSODOTAPartyInvite_PartyMember `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	TeamId            *uint32                           `protobuf:"varint,5,opt,name=team_id" json:"team_id,omitempty"`
	LowPriorityStatus *bool                             `protobuf:"varint,6,opt,name=low_priority_status" json:"low_priority_status,omitempty"`
	AsCoach           *bool                             `protobuf:"varint,7,opt,name=as_coach" json:"as_coach,omitempty"`
	XXX_unrecognized  []byte                            `json:"-"`
}

func (m *CSODOTAPartyInvite) Reset()         { *m = CSODOTAPartyInvite{} }
func (m *CSODOTAPartyInvite) String() string { return proto.CompactTextString(m) }
func (*CSODOTAPartyInvite) ProtoMessage()    {}

func (m *CSODOTAPartyInvite) GetGroupId() uint64 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *CSODOTAPartyInvite) GetSenderId() uint64 {
	if m != nil && m.SenderId != nil {
		return *m.SenderId
	}
	return 0
}

func (m *CSODOTAPartyInvite) GetSenderName() string {
	if m != nil && m.SenderName != nil {
		return *m.SenderName
	}
	return ""
}

func (m *CSODOTAPartyInvite) GetMembers() []*CSODOTAPartyInvite_PartyMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CSODOTAPartyInvite) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CSODOTAPartyInvite) GetLowPriorityStatus() bool {
	if m != nil && m.LowPriorityStatus != nil {
		return *m.LowPriorityStatus
	}
	return false
}

func (m *CSODOTAPartyInvite) GetAsCoach() bool {
	if m != nil && m.AsCoach != nil {
		return *m.AsCoach
	}
	return false
}

type CSODOTAPartyInvite_PartyMember struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SteamId          *uint64 `protobuf:"fixed64,2,opt,name=steam_id" json:"steam_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CSODOTAPartyInvite_PartyMember) Reset()         { *m = CSODOTAPartyInvite_PartyMember{} }
func (m *CSODOTAPartyInvite_PartyMember) String() string { return proto.CompactTextString(m) }
func (*CSODOTAPartyInvite_PartyMember) ProtoMessage()    {}

func (m *CSODOTAPartyInvite_PartyMember) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CSODOTAPartyInvite_PartyMember) GetSteamId() uint64 {
	if m != nil && m.SteamId != nil {
		return *m.SteamId
	}
	return 0
}

type CMsgDOTAPartyMemberSetCoach struct {
	WantsCoach       *bool  `protobuf:"varint,1,opt,name=wants_coach" json:"wants_coach,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgDOTAPartyMemberSetCoach) Reset()         { *m = CMsgDOTAPartyMemberSetCoach{} }
func (m *CMsgDOTAPartyMemberSetCoach) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAPartyMemberSetCoach) ProtoMessage()    {}

func (m *CMsgDOTAPartyMemberSetCoach) GetWantsCoach() bool {
	if m != nil && m.WantsCoach != nil {
		return *m.WantsCoach
	}
	return false
}

type CDOTASaveGame struct {
	MatchId          *uint32                       `protobuf:"varint,5,opt,name=match_id" json:"match_id,omitempty"`
	SaveTime         *uint32                       `protobuf:"varint,2,opt,name=save_time" json:"save_time,omitempty"`
	Players          []*CDOTASaveGame_Player       `protobuf:"bytes,3,rep,name=players" json:"players,omitempty"`
	SaveInstances    []*CDOTASaveGame_SaveInstance `protobuf:"bytes,4,rep,name=save_instances" json:"save_instances,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *CDOTASaveGame) Reset()         { *m = CDOTASaveGame{} }
func (m *CDOTASaveGame) String() string { return proto.CompactTextString(m) }
func (*CDOTASaveGame) ProtoMessage()    {}

func (m *CDOTASaveGame) GetMatchId() uint32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CDOTASaveGame) GetSaveTime() uint32 {
	if m != nil && m.SaveTime != nil {
		return *m.SaveTime
	}
	return 0
}

func (m *CDOTASaveGame) GetPlayers() []*CDOTASaveGame_Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CDOTASaveGame) GetSaveInstances() []*CDOTASaveGame_SaveInstance {
	if m != nil {
		return m.SaveInstances
	}
	return nil
}

type CDOTASaveGame_Player struct {
	Team             *DOTA_GC_TEAM `protobuf:"varint,1,opt,name=team,enum=DOTA_GC_TEAM,def=0" json:"team,omitempty"`
	Name             *string       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Hero             *string       `protobuf:"bytes,3,opt,name=hero" json:"hero,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *CDOTASaveGame_Player) Reset()         { *m = CDOTASaveGame_Player{} }
func (m *CDOTASaveGame_Player) String() string { return proto.CompactTextString(m) }
func (*CDOTASaveGame_Player) ProtoMessage()    {}

const Default_CDOTASaveGame_Player_Team DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS

func (m *CDOTASaveGame_Player) GetTeam() DOTA_GC_TEAM {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return Default_CDOTASaveGame_Player_Team
}

func (m *CDOTASaveGame_Player) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CDOTASaveGame_Player) GetHero() string {
	if m != nil && m.Hero != nil {
		return *m.Hero
	}
	return ""
}

type CDOTASaveGame_SaveInstance struct {
	GameTime         *uint32                                       `protobuf:"varint,2,opt,name=game_time" json:"game_time,omitempty"`
	Team1Score       *uint32                                       `protobuf:"varint,3,opt,name=team1_score" json:"team1_score,omitempty"`
	Team2Score       *uint32                                       `protobuf:"varint,4,opt,name=team2_score" json:"team2_score,omitempty"`
	PlayerPositions  []*CDOTASaveGame_SaveInstance_PlayerPositions `protobuf:"bytes,5,rep,name=player_positions" json:"player_positions,omitempty"`
	SaveId           *uint32                                       `protobuf:"varint,6,opt,name=save_id" json:"save_id,omitempty"`
	SaveTime         *uint32                                       `protobuf:"varint,7,opt,name=save_time" json:"save_time,omitempty"`
	XXX_unrecognized []byte                                        `json:"-"`
}

func (m *CDOTASaveGame_SaveInstance) Reset()         { *m = CDOTASaveGame_SaveInstance{} }
func (m *CDOTASaveGame_SaveInstance) String() string { return proto.CompactTextString(m) }
func (*CDOTASaveGame_SaveInstance) ProtoMessage()    {}

func (m *CDOTASaveGame_SaveInstance) GetGameTime() uint32 {
	if m != nil && m.GameTime != nil {
		return *m.GameTime
	}
	return 0
}

func (m *CDOTASaveGame_SaveInstance) GetTeam1Score() uint32 {
	if m != nil && m.Team1Score != nil {
		return *m.Team1Score
	}
	return 0
}

func (m *CDOTASaveGame_SaveInstance) GetTeam2Score() uint32 {
	if m != nil && m.Team2Score != nil {
		return *m.Team2Score
	}
	return 0
}

func (m *CDOTASaveGame_SaveInstance) GetPlayerPositions() []*CDOTASaveGame_SaveInstance_PlayerPositions {
	if m != nil {
		return m.PlayerPositions
	}
	return nil
}

func (m *CDOTASaveGame_SaveInstance) GetSaveId() uint32 {
	if m != nil && m.SaveId != nil {
		return *m.SaveId
	}
	return 0
}

func (m *CDOTASaveGame_SaveInstance) GetSaveTime() uint32 {
	if m != nil && m.SaveTime != nil {
		return *m.SaveTime
	}
	return 0
}

type CDOTASaveGame_SaveInstance_PlayerPositions struct {
	X                *float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y                *float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CDOTASaveGame_SaveInstance_PlayerPositions) Reset() {
	*m = CDOTASaveGame_SaveInstance_PlayerPositions{}
}
func (m *CDOTASaveGame_SaveInstance_PlayerPositions) String() string {
	return proto.CompactTextString(m)
}
func (*CDOTASaveGame_SaveInstance_PlayerPositions) ProtoMessage() {}

func (m *CDOTASaveGame_SaveInstance_PlayerPositions) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *CDOTASaveGame_SaveInstance_PlayerPositions) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

type CMsgLeaverState struct {
	LobbyState          *uint32         `protobuf:"varint,1,opt,name=lobby_state" json:"lobby_state,omitempty"`
	GameState           *DOTA_GameState `protobuf:"varint,2,opt,name=game_state,enum=DOTA_GameState,def=0" json:"game_state,omitempty"`
	LeaverDetected      *bool           `protobuf:"varint,3,opt,name=leaver_detected" json:"leaver_detected,omitempty"`
	FirstBloodHappened  *bool           `protobuf:"varint,4,opt,name=first_blood_happened" json:"first_blood_happened,omitempty"`
	DiscardMatchResults *bool           `protobuf:"varint,5,opt,name=discard_match_results" json:"discard_match_results,omitempty"`
	MassDisconnect      *bool           `protobuf:"varint,6,opt,name=mass_disconnect" json:"mass_disconnect,omitempty"`
	XXX_unrecognized    []byte          `json:"-"`
}

func (m *CMsgLeaverState) Reset()         { *m = CMsgLeaverState{} }
func (m *CMsgLeaverState) String() string { return proto.CompactTextString(m) }
func (*CMsgLeaverState) ProtoMessage()    {}

const Default_CMsgLeaverState_GameState DOTA_GameState = DOTA_GameState_DOTA_GAMERULES_STATE_INIT

func (m *CMsgLeaverState) GetLobbyState() uint32 {
	if m != nil && m.LobbyState != nil {
		return *m.LobbyState
	}
	return 0
}

func (m *CMsgLeaverState) GetGameState() DOTA_GameState {
	if m != nil && m.GameState != nil {
		return *m.GameState
	}
	return Default_CMsgLeaverState_GameState
}

func (m *CMsgLeaverState) GetLeaverDetected() bool {
	if m != nil && m.LeaverDetected != nil {
		return *m.LeaverDetected
	}
	return false
}

func (m *CMsgLeaverState) GetFirstBloodHappened() bool {
	if m != nil && m.FirstBloodHappened != nil {
		return *m.FirstBloodHappened
	}
	return false
}

func (m *CMsgLeaverState) GetDiscardMatchResults() bool {
	if m != nil && m.DiscardMatchResults != nil {
		return *m.DiscardMatchResults
	}
	return false
}

func (m *CMsgLeaverState) GetMassDisconnect() bool {
	if m != nil && m.MassDisconnect != nil {
		return *m.MassDisconnect
	}
	return false
}

type CDOTALobbyMember struct {
	Id                 *uint64                                     `protobuf:"fixed64,1,opt,name=id" json:"id,omitempty"`
	HeroId             *uint32                                     `protobuf:"varint,2,opt,name=hero_id" json:"hero_id,omitempty"`
	Team               *DOTA_GC_TEAM                               `protobuf:"varint,3,opt,name=team,enum=DOTA_GC_TEAM,def=0" json:"team,omitempty"`
	Name               *string                                     `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	Slot               *uint32                                     `protobuf:"varint,7,opt,name=slot" json:"slot,omitempty"`
	PartyId            *uint64                                     `protobuf:"varint,12,opt,name=party_id" json:"party_id,omitempty"`
	MetaLevel          *uint32                                     `protobuf:"varint,13,opt,name=meta_level" json:"meta_level,omitempty"`
	MetaXp             *uint32                                     `protobuf:"varint,14,opt,name=meta_xp" json:"meta_xp,omitempty"`
	MetaXpAwarded      *uint32                                     `protobuf:"varint,15,opt,name=meta_xp_awarded" json:"meta_xp_awarded,omitempty"`
	LeaverStatus       *DOTALeaverStatusT                          `protobuf:"varint,16,opt,name=leaver_status,enum=DOTALeaverStatusT,def=0" json:"leaver_status,omitempty"`
	LeaverActions      *uint32                                     `protobuf:"varint,28,opt,name=leaver_actions" json:"leaver_actions,omitempty"`
	Channel            *uint32                                     `protobuf:"varint,17,opt,name=channel" json:"channel,omitempty"`
	PrizeDefIndex      *uint32                                     `protobuf:"varint,18,opt,name=prize_def_index" json:"prize_def_index,omitempty"`
	DisabledHeroId     []uint32                                    `protobuf:"varint,20,rep,name=disabled_hero_id" json:"disabled_hero_id,omitempty"`
	PartnerAccountType *PartnerAccountType        `protobuf:"varint,21,opt,name=partner_account_type,enum=PartnerAccountType,def=0" json:"partner_account_type,omitempty"`
	EnabledHeroId      []uint32                                    `protobuf:"varint,22,rep,name=enabled_hero_id" json:"enabled_hero_id,omitempty"`
	CoachTeam          *DOTA_GC_TEAM                               `protobuf:"varint,23,opt,name=coach_team,enum=DOTA_GC_TEAM,def=0" json:"coach_team,omitempty"`
	NexonPcBangNo      *uint32                                     `protobuf:"varint,24,opt,name=nexon_pc_bang_no" json:"nexon_pc_bang_no,omitempty"`
	NexonPcBangName    *string                                     `protobuf:"bytes,25,opt,name=nexon_pc_bang_name" json:"nexon_pc_bang_name,omitempty"`
	XpBonuses          []*CDOTALobbyMember_CDOTALobbyMemberXPBonus `protobuf:"bytes,27,rep,name=xp_bonuses" json:"xp_bonuses,omitempty"`
	RankChange         *int32                                      `protobuf:"zigzag32,29,opt,name=rank_change" json:"rank_change,omitempty"`
	XXX_unrecognized   []byte                                      `json:"-"`
}

func (m *CDOTALobbyMember) Reset()         { *m = CDOTALobbyMember{} }
func (m *CDOTALobbyMember) String() string { return proto.CompactTextString(m) }
func (*CDOTALobbyMember) ProtoMessage()    {}

const Default_CDOTALobbyMember_Team DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
const Default_CDOTALobbyMember_LeaverStatus DOTALeaverStatusT = DOTALeaverStatusT_DOTA_LEAVER_NONE
const Default_CDOTALobbyMember_PartnerAccountType PartnerAccountType = PartnerAccountType_PARTNER_NONE
const Default_CDOTALobbyMember_CoachTeam DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS

func (m *CDOTALobbyMember) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CDOTALobbyMember) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

func (m *CDOTALobbyMember) GetTeam() DOTA_GC_TEAM {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return Default_CDOTALobbyMember_Team
}

func (m *CDOTALobbyMember) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CDOTALobbyMember) GetSlot() uint32 {
	if m != nil && m.Slot != nil {
		return *m.Slot
	}
	return 0
}

func (m *CDOTALobbyMember) GetPartyId() uint64 {
	if m != nil && m.PartyId != nil {
		return *m.PartyId
	}
	return 0
}

func (m *CDOTALobbyMember) GetMetaLevel() uint32 {
	if m != nil && m.MetaLevel != nil {
		return *m.MetaLevel
	}
	return 0
}

func (m *CDOTALobbyMember) GetMetaXp() uint32 {
	if m != nil && m.MetaXp != nil {
		return *m.MetaXp
	}
	return 0
}

func (m *CDOTALobbyMember) GetMetaXpAwarded() uint32 {
	if m != nil && m.MetaXpAwarded != nil {
		return *m.MetaXpAwarded
	}
	return 0
}

func (m *CDOTALobbyMember) GetLeaverStatus() DOTALeaverStatusT {
	if m != nil && m.LeaverStatus != nil {
		return *m.LeaverStatus
	}
	return Default_CDOTALobbyMember_LeaverStatus
}

func (m *CDOTALobbyMember) GetLeaverActions() uint32 {
	if m != nil && m.LeaverActions != nil {
		return *m.LeaverActions
	}
	return 0
}

func (m *CDOTALobbyMember) GetChannel() uint32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

func (m *CDOTALobbyMember) GetPrizeDefIndex() uint32 {
	if m != nil && m.PrizeDefIndex != nil {
		return *m.PrizeDefIndex
	}
	return 0
}

func (m *CDOTALobbyMember) GetDisabledHeroId() []uint32 {
	if m != nil {
		return m.DisabledHeroId
	}
	return nil
}

func (m *CDOTALobbyMember) GetPartnerAccountType() PartnerAccountType {
	if m != nil && m.PartnerAccountType != nil {
		return *m.PartnerAccountType
	}
	return Default_CDOTALobbyMember_PartnerAccountType
}

func (m *CDOTALobbyMember) GetEnabledHeroId() []uint32 {
	if m != nil {
		return m.EnabledHeroId
	}
	return nil
}

func (m *CDOTALobbyMember) GetCoachTeam() DOTA_GC_TEAM {
	if m != nil && m.CoachTeam != nil {
		return *m.CoachTeam
	}
	return Default_CDOTALobbyMember_CoachTeam
}

func (m *CDOTALobbyMember) GetNexonPcBangNo() uint32 {
	if m != nil && m.NexonPcBangNo != nil {
		return *m.NexonPcBangNo
	}
	return 0
}

func (m *CDOTALobbyMember) GetNexonPcBangName() string {
	if m != nil && m.NexonPcBangName != nil {
		return *m.NexonPcBangName
	}
	return ""
}

func (m *CDOTALobbyMember) GetXpBonuses() []*CDOTALobbyMember_CDOTALobbyMemberXPBonus {
	if m != nil {
		return m.XpBonuses
	}
	return nil
}

func (m *CDOTALobbyMember) GetRankChange() int32 {
	if m != nil && m.RankChange != nil {
		return *m.RankChange
	}
	return 0
}

type CDOTALobbyMember_CDOTALobbyMemberXPBonus struct {
	Type             *uint32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	XpBonus          *float32 `protobuf:"fixed32,2,opt,name=xp_bonus" json:"xp_bonus,omitempty"`
	SourceKey        *uint64  `protobuf:"varint,3,opt,name=source_key" json:"source_key,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) Reset() {
	*m = CDOTALobbyMember_CDOTALobbyMemberXPBonus{}
}
func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) String() string { return proto.CompactTextString(m) }
func (*CDOTALobbyMember_CDOTALobbyMemberXPBonus) ProtoMessage()    {}

func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) GetXpBonus() float32 {
	if m != nil && m.XpBonus != nil {
		return *m.XpBonus
	}
	return 0
}

func (m *CDOTALobbyMember_CDOTALobbyMemberXPBonus) GetSourceKey() uint64 {
	if m != nil && m.SourceKey != nil {
		return *m.SourceKey
	}
	return 0
}

type CDOTALobbyMemberPrivate struct {
	Ip               *uint32              `protobuf:"varint,1,opt,name=ip" json:"ip,omitempty"`
	ReadyState       *DOTALobbyReadyState `protobuf:"varint,2,opt,name=ready_state,enum=DOTALobbyReadyState,def=0" json:"ready_state,omitempty"`
	LeaverState      *CMsgLeaverState     `protobuf:"bytes,3,opt,name=leaver_state" json:"leaver_state,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *CDOTALobbyMemberPrivate) Reset()         { *m = CDOTALobbyMemberPrivate{} }
func (m *CDOTALobbyMemberPrivate) String() string { return proto.CompactTextString(m) }
func (*CDOTALobbyMemberPrivate) ProtoMessage()    {}

const Default_CDOTALobbyMemberPrivate_ReadyState DOTALobbyReadyState = DOTALobbyReadyState_DOTALobbyReadyState_UNDECLARED

func (m *CDOTALobbyMemberPrivate) GetIp() uint32 {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return 0
}

func (m *CDOTALobbyMemberPrivate) GetReadyState() DOTALobbyReadyState {
	if m != nil && m.ReadyState != nil {
		return *m.ReadyState
	}
	return Default_CDOTALobbyMemberPrivate_ReadyState
}

func (m *CDOTALobbyMemberPrivate) GetLeaverState() *CMsgLeaverState {
	if m != nil {
		return m.LeaverState
	}
	return nil
}

type CLobbyTeamDetails struct {
	TeamName         *string `protobuf:"bytes,1,opt,name=team_name" json:"team_name,omitempty"`
	TeamTag          *string `protobuf:"bytes,3,opt,name=team_tag" json:"team_tag,omitempty"`
	TeamId           *uint32 `protobuf:"varint,4,opt,name=team_id" json:"team_id,omitempty"`
	TeamLogo         *uint64 `protobuf:"varint,5,opt,name=team_logo" json:"team_logo,omitempty"`
	TeamBaseLogo     *uint64 `protobuf:"varint,6,opt,name=team_base_logo" json:"team_base_logo,omitempty"`
	TeamBannerLogo   *uint64 `protobuf:"varint,7,opt,name=team_banner_logo" json:"team_banner_logo,omitempty"`
	TeamComplete     *bool   `protobuf:"varint,8,opt,name=team_complete" json:"team_complete,omitempty"`
	GuildName        *string `protobuf:"bytes,9,opt,name=guild_name" json:"guild_name,omitempty"`
	GuildTag         *string `protobuf:"bytes,10,opt,name=guild_tag" json:"guild_tag,omitempty"`
	GuildId          *uint32 `protobuf:"varint,11,opt,name=guild_id" json:"guild_id,omitempty"`
	GuildLogo        *uint64 `protobuf:"varint,12,opt,name=guild_logo" json:"guild_logo,omitempty"`
	GuildBaseLogo    *uint64 `protobuf:"varint,13,opt,name=guild_base_logo" json:"guild_base_logo,omitempty"`
	GuildBannerLogo  *uint64 `protobuf:"varint,14,opt,name=guild_banner_logo" json:"guild_banner_logo,omitempty"`
	Rank             *uint32 `protobuf:"varint,15,opt,name=rank" json:"rank,omitempty"`
	RankChange       *int32  `protobuf:"zigzag32,16,opt,name=rank_change" json:"rank_change,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CLobbyTeamDetails) Reset()         { *m = CLobbyTeamDetails{} }
func (m *CLobbyTeamDetails) String() string { return proto.CompactTextString(m) }
func (*CLobbyTeamDetails) ProtoMessage()    {}

func (m *CLobbyTeamDetails) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CLobbyTeamDetails) GetTeamTag() string {
	if m != nil && m.TeamTag != nil {
		return *m.TeamTag
	}
	return ""
}

func (m *CLobbyTeamDetails) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamLogo() uint64 {
	if m != nil && m.TeamLogo != nil {
		return *m.TeamLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamBaseLogo() uint64 {
	if m != nil && m.TeamBaseLogo != nil {
		return *m.TeamBaseLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamBannerLogo() uint64 {
	if m != nil && m.TeamBannerLogo != nil {
		return *m.TeamBannerLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetTeamComplete() bool {
	if m != nil && m.TeamComplete != nil {
		return *m.TeamComplete
	}
	return false
}

func (m *CLobbyTeamDetails) GetGuildName() string {
	if m != nil && m.GuildName != nil {
		return *m.GuildName
	}
	return ""
}

func (m *CLobbyTeamDetails) GetGuildTag() string {
	if m != nil && m.GuildTag != nil {
		return *m.GuildTag
	}
	return ""
}

func (m *CLobbyTeamDetails) GetGuildId() uint32 {
	if m != nil && m.GuildId != nil {
		return *m.GuildId
	}
	return 0
}

func (m *CLobbyTeamDetails) GetGuildLogo() uint64 {
	if m != nil && m.GuildLogo != nil {
		return *m.GuildLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetGuildBaseLogo() uint64 {
	if m != nil && m.GuildBaseLogo != nil {
		return *m.GuildBaseLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetGuildBannerLogo() uint64 {
	if m != nil && m.GuildBannerLogo != nil {
		return *m.GuildBannerLogo
	}
	return 0
}

func (m *CLobbyTeamDetails) GetRank() uint32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

func (m *CLobbyTeamDetails) GetRankChange() int32 {
	if m != nil && m.RankChange != nil {
		return *m.RankChange
	}
	return 0
}

type CLobbyTimedRewardDetails struct {
	ItemDefIndex     *uint32 `protobuf:"varint,2,opt,name=item_def_index" json:"item_def_index,omitempty"`
	IsSupplyCrate    *bool   `protobuf:"varint,3,opt,name=is_supply_crate" json:"is_supply_crate,omitempty"`
	IsTimedDrop      *bool   `protobuf:"varint,4,opt,name=is_timed_drop" json:"is_timed_drop,omitempty"`
	AccountId        *uint32 `protobuf:"varint,5,opt,name=account_id" json:"account_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CLobbyTimedRewardDetails) Reset()         { *m = CLobbyTimedRewardDetails{} }
func (m *CLobbyTimedRewardDetails) String() string { return proto.CompactTextString(m) }
func (*CLobbyTimedRewardDetails) ProtoMessage()    {}

func (m *CLobbyTimedRewardDetails) GetItemDefIndex() uint32 {
	if m != nil && m.ItemDefIndex != nil {
		return *m.ItemDefIndex
	}
	return 0
}

func (m *CLobbyTimedRewardDetails) GetIsSupplyCrate() bool {
	if m != nil && m.IsSupplyCrate != nil {
		return *m.IsSupplyCrate
	}
	return false
}

func (m *CLobbyTimedRewardDetails) GetIsTimedDrop() bool {
	if m != nil && m.IsTimedDrop != nil {
		return *m.IsTimedDrop
	}
	return false
}

func (m *CLobbyTimedRewardDetails) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

type CLobbyBroadcastChannelInfo struct {
	ChannelId        *uint32 `protobuf:"varint,1,opt,name=channel_id" json:"channel_id,omitempty"`
	CountryCode      *string `protobuf:"bytes,2,opt,name=country_code" json:"country_code,omitempty"`
	Description      *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CLobbyBroadcastChannelInfo) Reset()         { *m = CLobbyBroadcastChannelInfo{} }
func (m *CLobbyBroadcastChannelInfo) String() string { return proto.CompactTextString(m) }
func (*CLobbyBroadcastChannelInfo) ProtoMessage()    {}

func (m *CLobbyBroadcastChannelInfo) GetChannelId() uint32 {
	if m != nil && m.ChannelId != nil {
		return *m.ChannelId
	}
	return 0
}

func (m *CLobbyBroadcastChannelInfo) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

func (m *CLobbyBroadcastChannelInfo) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

type CSODOTALobby struct {
	LobbyId              *uint64                               `protobuf:"varint,1,opt,name=lobby_id" json:"lobby_id,omitempty"`
	Members              []*CDOTALobbyMember                   `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
	LeftMembers          []*CDOTALobbyMember                   `protobuf:"bytes,7,rep,name=left_members" json:"left_members,omitempty"`
	LeaderId             *uint64                               `protobuf:"fixed64,11,opt,name=leader_id" json:"leader_id,omitempty"`
	ServerId             *uint64                               `protobuf:"fixed64,6,opt,name=server_id,def=0" json:"server_id,omitempty"`
	GameMode             *uint32                               `protobuf:"varint,3,opt,name=game_mode" json:"game_mode,omitempty"`
	PendingInvites       []uint64                              `protobuf:"fixed64,10,rep,name=pending_invites" json:"pending_invites,omitempty"`
	State                *CSODOTALobby_State                   `protobuf:"varint,4,opt,name=state,enum=CSODOTALobby_State,def=0" json:"state,omitempty"`
	Connect              *string                               `protobuf:"bytes,5,opt,name=connect" json:"connect,omitempty"`
	LobbyType            *CSODOTALobby_LobbyType               `protobuf:"varint,12,opt,name=lobby_type,enum=CSODOTALobby_LobbyType,def=-1" json:"lobby_type,omitempty"`
	AllowCheats          *bool                                 `protobuf:"varint,13,opt,name=allow_cheats" json:"allow_cheats,omitempty"`
	FillWithBots         *bool                                 `protobuf:"varint,14,opt,name=fill_with_bots" json:"fill_with_bots,omitempty"`
	IntroMode            *bool                                 `protobuf:"varint,15,opt,name=intro_mode" json:"intro_mode,omitempty"`
	GameName             *string                               `protobuf:"bytes,16,opt,name=game_name" json:"game_name,omitempty"`
	TeamDetails          []*CLobbyTeamDetails                  `protobuf:"bytes,17,rep,name=team_details" json:"team_details,omitempty"`
	TutorialLesson       *uint32                               `protobuf:"varint,18,opt,name=tutorial_lesson" json:"tutorial_lesson,omitempty"`
	TournamentId         *uint32                               `protobuf:"varint,19,opt,name=tournament_id" json:"tournament_id,omitempty"`
	TournamentGameId     *uint32                               `protobuf:"varint,20,opt,name=tournament_game_id" json:"tournament_game_id,omitempty"`
	ServerRegion         *uint32                               `protobuf:"varint,21,opt,name=server_region,def=0" json:"server_region,omitempty"`
	GameState            *DOTA_GameState                       `protobuf:"varint,22,opt,name=game_state,enum=DOTA_GameState,def=0" json:"game_state,omitempty"`
	NumSpectators        *uint32                               `protobuf:"varint,23,opt,name=num_spectators" json:"num_spectators,omitempty"`
	Matchgroup           *uint32                               `protobuf:"varint,25,opt,name=matchgroup" json:"matchgroup,omitempty"`
	CmPick               *DOTA_CM_PICK                         `protobuf:"varint,28,opt,name=cm_pick,enum=DOTA_CM_PICK,def=0" json:"cm_pick,omitempty"`
	MatchId              *uint32                               `protobuf:"varint,30,opt,name=match_id" json:"match_id,omitempty"`
	AllowSpectating      *bool                                 `protobuf:"varint,31,opt,name=allow_spectating,def=1" json:"allow_spectating,omitempty"`
	BotDifficulty        *DOTABotDifficulty  `protobuf:"varint,36,opt,name=bot_difficulty,enum=DOTABotDifficulty,def=3" json:"bot_difficulty,omitempty"`
	GameVersion          *DOTAGameVersion                      `protobuf:"varint,37,opt,name=game_version,enum=DOTAGameVersion,def=0" json:"game_version,omitempty"`
	TimedRewardDetails   []*CLobbyTimedRewardDetails           `protobuf:"bytes,38,rep,name=timed_reward_details" json:"timed_reward_details,omitempty"`
	PassKey              *string                               `protobuf:"bytes,39,opt,name=pass_key" json:"pass_key,omitempty"`
	BotSlotDifficulty    []DOTABotDifficulty `protobuf:"varint,41,rep,name=bot_slot_difficulty,enum=DOTABotDifficulty" json:"bot_slot_difficulty,omitempty"`
	Leagueid             *uint32                               `protobuf:"varint,42,opt,name=leagueid" json:"leagueid,omitempty"`
	PenaltyLevelRadiant  *uint32                               `protobuf:"varint,43,opt,name=penalty_level_radiant,def=0" json:"penalty_level_radiant,omitempty"`
	PenaltyLevelDire     *uint32                               `protobuf:"varint,44,opt,name=penalty_level_dire,def=0" json:"penalty_level_dire,omitempty"`
	LoadGameId           *uint32                               `protobuf:"varint,45,opt,name=load_game_id" json:"load_game_id,omitempty"`
	SeriesType           *uint32                               `protobuf:"varint,46,opt,name=series_type" json:"series_type,omitempty"`
	RadiantSeriesWins    *uint32                               `protobuf:"varint,47,opt,name=radiant_series_wins" json:"radiant_series_wins,omitempty"`
	DireSeriesWins       *uint32                               `protobuf:"varint,48,opt,name=dire_series_wins" json:"dire_series_wins,omitempty"`
	LootGenerated        *uint32                               `protobuf:"varint,49,opt,name=loot_generated" json:"loot_generated,omitempty"`
	LootAwarded          *uint32                               `protobuf:"varint,50,opt,name=loot_awarded" json:"loot_awarded,omitempty"`
	Allchat              *bool                                 `protobuf:"varint,51,opt,name=allchat,def=0" json:"allchat,omitempty"`
	DotaTvDelay          *LobbyDotaTVDelay                     `protobuf:"varint,53,opt,name=dota_tv_delay,enum=LobbyDotaTVDelay,def=0" json:"dota_tv_delay,omitempty"`
	CustomGameMode       *string                               `protobuf:"bytes,54,opt,name=custom_game_mode" json:"custom_game_mode,omitempty"`
	CustomMapName        *string                               `protobuf:"bytes,55,opt,name=custom_map_name" json:"custom_map_name,omitempty"`
	CustomDifficulty     *uint32                               `protobuf:"varint,56,opt,name=custom_difficulty" json:"custom_difficulty,omitempty"`
	Lan                  *bool                                 `protobuf:"varint,57,opt,name=lan" json:"lan,omitempty"`
	BroadcastChannelInfo []*CLobbyBroadcastChannelInfo         `protobuf:"bytes,58,rep,name=broadcast_channel_info" json:"broadcast_channel_info,omitempty"`
	FirstLeaverAccountid *uint32                               `protobuf:"varint,59,opt,name=first_leaver_accountid" json:"first_leaver_accountid,omitempty"`
	SeriesId             *uint32                               `protobuf:"varint,60,opt,name=series_id" json:"series_id,omitempty"`
	LowPriority          *bool                                 `protobuf:"varint,61,opt,name=low_priority" json:"low_priority,omitempty"`
	ExtraMessages        []*CSODOTALobby_CExtraMsg             `protobuf:"bytes,62,rep,name=extra_messages" json:"extra_messages,omitempty"`
	SaveGame             *CDOTASaveGame                        `protobuf:"bytes,63,opt,name=save_game" json:"save_game,omitempty"`
	FirstBloodHappened   *bool                                 `protobuf:"varint,65,opt,name=first_blood_happened" json:"first_blood_happened,omitempty"`
	DiscardMatchResults  *bool                                 `protobuf:"varint,66,opt,name=discard_match_results" json:"discard_match_results,omitempty"`
	MassDisconnect       *bool                                 `protobuf:"varint,67,opt,name=mass_disconnect" json:"mass_disconnect,omitempty"`
	CustomGameId         *uint64                               `protobuf:"varint,68,opt,name=custom_game_id" json:"custom_game_id,omitempty"`
	XXX_unrecognized     []byte                                `json:"-"`
}

func (m *CSODOTALobby) Reset()         { *m = CSODOTALobby{} }
func (m *CSODOTALobby) String() string { return proto.CompactTextString(m) }
func (*CSODOTALobby) ProtoMessage()    {}

const Default_CSODOTALobby_ServerId uint64 = 0
const Default_CSODOTALobby_State CSODOTALobby_State = CSODOTALobby_UI
const Default_CSODOTALobby_LobbyType CSODOTALobby_LobbyType = CSODOTALobby_INVALID
const Default_CSODOTALobby_ServerRegion uint32 = 0
const Default_CSODOTALobby_GameState DOTA_GameState = DOTA_GameState_DOTA_GAMERULES_STATE_INIT
const Default_CSODOTALobby_CmPick DOTA_CM_PICK = DOTA_CM_PICK_DOTA_CM_RANDOM
const Default_CSODOTALobby_AllowSpectating bool = true
const Default_CSODOTALobby_BotDifficulty DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_HARD
const Default_CSODOTALobby_GameVersion DOTAGameVersion = DOTAGameVersion_GAME_VERSION_CURRENT
const Default_CSODOTALobby_PenaltyLevelRadiant uint32 = 0
const Default_CSODOTALobby_PenaltyLevelDire uint32 = 0
const Default_CSODOTALobby_Allchat bool = false
const Default_CSODOTALobby_DotaTvDelay LobbyDotaTVDelay = LobbyDotaTVDelay_LobbyDotaTV_10

func (m *CSODOTALobby) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CSODOTALobby) GetMembers() []*CDOTALobbyMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CSODOTALobby) GetLeftMembers() []*CDOTALobbyMember {
	if m != nil {
		return m.LeftMembers
	}
	return nil
}

func (m *CSODOTALobby) GetLeaderId() uint64 {
	if m != nil && m.LeaderId != nil {
		return *m.LeaderId
	}
	return 0
}

func (m *CSODOTALobby) GetServerId() uint64 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return Default_CSODOTALobby_ServerId
}

func (m *CSODOTALobby) GetGameMode() uint32 {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return 0
}

func (m *CSODOTALobby) GetPendingInvites() []uint64 {
	if m != nil {
		return m.PendingInvites
	}
	return nil
}

func (m *CSODOTALobby) GetState() CSODOTALobby_State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_CSODOTALobby_State
}

func (m *CSODOTALobby) GetConnect() string {
	if m != nil && m.Connect != nil {
		return *m.Connect
	}
	return ""
}

func (m *CSODOTALobby) GetLobbyType() CSODOTALobby_LobbyType {
	if m != nil && m.LobbyType != nil {
		return *m.LobbyType
	}
	return Default_CSODOTALobby_LobbyType
}

func (m *CSODOTALobby) GetAllowCheats() bool {
	if m != nil && m.AllowCheats != nil {
		return *m.AllowCheats
	}
	return false
}

func (m *CSODOTALobby) GetFillWithBots() bool {
	if m != nil && m.FillWithBots != nil {
		return *m.FillWithBots
	}
	return false
}

func (m *CSODOTALobby) GetIntroMode() bool {
	if m != nil && m.IntroMode != nil {
		return *m.IntroMode
	}
	return false
}

func (m *CSODOTALobby) GetGameName() string {
	if m != nil && m.GameName != nil {
		return *m.GameName
	}
	return ""
}

func (m *CSODOTALobby) GetTeamDetails() []*CLobbyTeamDetails {
	if m != nil {
		return m.TeamDetails
	}
	return nil
}

func (m *CSODOTALobby) GetTutorialLesson() uint32 {
	if m != nil && m.TutorialLesson != nil {
		return *m.TutorialLesson
	}
	return 0
}

func (m *CSODOTALobby) GetTournamentId() uint32 {
	if m != nil && m.TournamentId != nil {
		return *m.TournamentId
	}
	return 0
}

func (m *CSODOTALobby) GetTournamentGameId() uint32 {
	if m != nil && m.TournamentGameId != nil {
		return *m.TournamentGameId
	}
	return 0
}

func (m *CSODOTALobby) GetServerRegion() uint32 {
	if m != nil && m.ServerRegion != nil {
		return *m.ServerRegion
	}
	return Default_CSODOTALobby_ServerRegion
}

func (m *CSODOTALobby) GetGameState() DOTA_GameState {
	if m != nil && m.GameState != nil {
		return *m.GameState
	}
	return Default_CSODOTALobby_GameState
}

func (m *CSODOTALobby) GetNumSpectators() uint32 {
	if m != nil && m.NumSpectators != nil {
		return *m.NumSpectators
	}
	return 0
}

func (m *CSODOTALobby) GetMatchgroup() uint32 {
	if m != nil && m.Matchgroup != nil {
		return *m.Matchgroup
	}
	return 0
}

func (m *CSODOTALobby) GetCmPick() DOTA_CM_PICK {
	if m != nil && m.CmPick != nil {
		return *m.CmPick
	}
	return Default_CSODOTALobby_CmPick
}

func (m *CSODOTALobby) GetMatchId() uint32 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CSODOTALobby) GetAllowSpectating() bool {
	if m != nil && m.AllowSpectating != nil {
		return *m.AllowSpectating
	}
	return Default_CSODOTALobby_AllowSpectating
}

func (m *CSODOTALobby) GetBotDifficulty() DOTABotDifficulty {
	if m != nil && m.BotDifficulty != nil {
		return *m.BotDifficulty
	}
	return Default_CSODOTALobby_BotDifficulty
}

func (m *CSODOTALobby) GetGameVersion() DOTAGameVersion {
	if m != nil && m.GameVersion != nil {
		return *m.GameVersion
	}
	return Default_CSODOTALobby_GameVersion
}

func (m *CSODOTALobby) GetTimedRewardDetails() []*CLobbyTimedRewardDetails {
	if m != nil {
		return m.TimedRewardDetails
	}
	return nil
}

func (m *CSODOTALobby) GetPassKey() string {
	if m != nil && m.PassKey != nil {
		return *m.PassKey
	}
	return ""
}

func (m *CSODOTALobby) GetBotSlotDifficulty() []DOTABotDifficulty {
	if m != nil {
		return m.BotSlotDifficulty
	}
	return nil
}

func (m *CSODOTALobby) GetLeagueid() uint32 {
	if m != nil && m.Leagueid != nil {
		return *m.Leagueid
	}
	return 0
}

func (m *CSODOTALobby) GetPenaltyLevelRadiant() uint32 {
	if m != nil && m.PenaltyLevelRadiant != nil {
		return *m.PenaltyLevelRadiant
	}
	return Default_CSODOTALobby_PenaltyLevelRadiant
}

func (m *CSODOTALobby) GetPenaltyLevelDire() uint32 {
	if m != nil && m.PenaltyLevelDire != nil {
		return *m.PenaltyLevelDire
	}
	return Default_CSODOTALobby_PenaltyLevelDire
}

func (m *CSODOTALobby) GetLoadGameId() uint32 {
	if m != nil && m.LoadGameId != nil {
		return *m.LoadGameId
	}
	return 0
}

func (m *CSODOTALobby) GetSeriesType() uint32 {
	if m != nil && m.SeriesType != nil {
		return *m.SeriesType
	}
	return 0
}

func (m *CSODOTALobby) GetRadiantSeriesWins() uint32 {
	if m != nil && m.RadiantSeriesWins != nil {
		return *m.RadiantSeriesWins
	}
	return 0
}

func (m *CSODOTALobby) GetDireSeriesWins() uint32 {
	if m != nil && m.DireSeriesWins != nil {
		return *m.DireSeriesWins
	}
	return 0
}

func (m *CSODOTALobby) GetLootGenerated() uint32 {
	if m != nil && m.LootGenerated != nil {
		return *m.LootGenerated
	}
	return 0
}

func (m *CSODOTALobby) GetLootAwarded() uint32 {
	if m != nil && m.LootAwarded != nil {
		return *m.LootAwarded
	}
	return 0
}

func (m *CSODOTALobby) GetAllchat() bool {
	if m != nil && m.Allchat != nil {
		return *m.Allchat
	}
	return Default_CSODOTALobby_Allchat
}

func (m *CSODOTALobby) GetDotaTvDelay() LobbyDotaTVDelay {
	if m != nil && m.DotaTvDelay != nil {
		return *m.DotaTvDelay
	}
	return Default_CSODOTALobby_DotaTvDelay
}

func (m *CSODOTALobby) GetCustomGameMode() string {
	if m != nil && m.CustomGameMode != nil {
		return *m.CustomGameMode
	}
	return ""
}

func (m *CSODOTALobby) GetCustomMapName() string {
	if m != nil && m.CustomMapName != nil {
		return *m.CustomMapName
	}
	return ""
}

func (m *CSODOTALobby) GetCustomDifficulty() uint32 {
	if m != nil && m.CustomDifficulty != nil {
		return *m.CustomDifficulty
	}
	return 0
}

func (m *CSODOTALobby) GetLan() bool {
	if m != nil && m.Lan != nil {
		return *m.Lan
	}
	return false
}

func (m *CSODOTALobby) GetBroadcastChannelInfo() []*CLobbyBroadcastChannelInfo {
	if m != nil {
		return m.BroadcastChannelInfo
	}
	return nil
}

func (m *CSODOTALobby) GetFirstLeaverAccountid() uint32 {
	if m != nil && m.FirstLeaverAccountid != nil {
		return *m.FirstLeaverAccountid
	}
	return 0
}

func (m *CSODOTALobby) GetSeriesId() uint32 {
	if m != nil && m.SeriesId != nil {
		return *m.SeriesId
	}
	return 0
}

func (m *CSODOTALobby) GetLowPriority() bool {
	if m != nil && m.LowPriority != nil {
		return *m.LowPriority
	}
	return false
}

func (m *CSODOTALobby) GetExtraMessages() []*CSODOTALobby_CExtraMsg {
	if m != nil {
		return m.ExtraMessages
	}
	return nil
}

func (m *CSODOTALobby) GetSaveGame() *CDOTASaveGame {
	if m != nil {
		return m.SaveGame
	}
	return nil
}

func (m *CSODOTALobby) GetFirstBloodHappened() bool {
	if m != nil && m.FirstBloodHappened != nil {
		return *m.FirstBloodHappened
	}
	return false
}

func (m *CSODOTALobby) GetDiscardMatchResults() bool {
	if m != nil && m.DiscardMatchResults != nil {
		return *m.DiscardMatchResults
	}
	return false
}

func (m *CSODOTALobby) GetMassDisconnect() bool {
	if m != nil && m.MassDisconnect != nil {
		return *m.MassDisconnect
	}
	return false
}

func (m *CSODOTALobby) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

type CSODOTALobby_CExtraMsg struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Contents         []byte  `protobuf:"bytes,2,opt,name=contents" json:"contents,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CSODOTALobby_CExtraMsg) Reset()         { *m = CSODOTALobby_CExtraMsg{} }
func (m *CSODOTALobby_CExtraMsg) String() string { return proto.CompactTextString(m) }
func (*CSODOTALobby_CExtraMsg) ProtoMessage()    {}

func (m *CSODOTALobby_CExtraMsg) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CSODOTALobby_CExtraMsg) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

type CSODOTALobbyInternal struct {
	SearchKey                            *string                    `protobuf:"bytes,1,opt,name=search_key" json:"search_key,omitempty"`
	AverageRank                          *uint32                    `protobuf:"varint,3,opt,name=average_rank" json:"average_rank,omitempty"`
	ReplaySalt                           *uint32                    `protobuf:"fixed32,4,opt,name=replay_salt" json:"replay_salt,omitempty"`
	DisableRadiantAutomaticTeamDetection *bool                      `protobuf:"varint,5,opt,name=disable_radiant_automatic_team_detection" json:"disable_radiant_automatic_team_detection,omitempty"`
	DisableDireAutomaticTeamDetection    *bool                      `protobuf:"varint,6,opt,name=disable_dire_automatic_team_detection" json:"disable_dire_automatic_team_detection,omitempty"`
	SubmittedMatchHistory                *bool                      `protobuf:"varint,8,opt,name=submitted_match_history" json:"submitted_match_history,omitempty"`
	Members                              []*CDOTALobbyMemberPrivate `protobuf:"bytes,9,rep,name=members" json:"members,omitempty"`
	LeftMembers                          []*CDOTALobbyMemberPrivate `protobuf:"bytes,10,rep,name=left_members" json:"left_members,omitempty"`
	SaveGameData                         []byte                     `protobuf:"bytes,11,opt,name=save_game_data" json:"save_game_data,omitempty"`
	ServerRunTime                        *uint32                    `protobuf:"varint,12,opt,name=server_run_time" json:"server_run_time,omitempty"`
	LastStateChangeTime                  *uint32                    `protobuf:"varint,13,opt,name=last_state_change_time" json:"last_state_change_time,omitempty"`
	TowerState                           *uint32                    `protobuf:"varint,14,opt,name=tower_state" json:"tower_state,omitempty"`
	XXX_unrecognized                     []byte                     `json:"-"`
}

func (m *CSODOTALobbyInternal) Reset()         { *m = CSODOTALobbyInternal{} }
func (m *CSODOTALobbyInternal) String() string { return proto.CompactTextString(m) }
func (*CSODOTALobbyInternal) ProtoMessage()    {}

func (m *CSODOTALobbyInternal) GetSearchKey() string {
	if m != nil && m.SearchKey != nil {
		return *m.SearchKey
	}
	return ""
}

func (m *CSODOTALobbyInternal) GetAverageRank() uint32 {
	if m != nil && m.AverageRank != nil {
		return *m.AverageRank
	}
	return 0
}

func (m *CSODOTALobbyInternal) GetReplaySalt() uint32 {
	if m != nil && m.ReplaySalt != nil {
		return *m.ReplaySalt
	}
	return 0
}

func (m *CSODOTALobbyInternal) GetDisableRadiantAutomaticTeamDetection() bool {
	if m != nil && m.DisableRadiantAutomaticTeamDetection != nil {
		return *m.DisableRadiantAutomaticTeamDetection
	}
	return false
}

func (m *CSODOTALobbyInternal) GetDisableDireAutomaticTeamDetection() bool {
	if m != nil && m.DisableDireAutomaticTeamDetection != nil {
		return *m.DisableDireAutomaticTeamDetection
	}
	return false
}

func (m *CSODOTALobbyInternal) GetSubmittedMatchHistory() bool {
	if m != nil && m.SubmittedMatchHistory != nil {
		return *m.SubmittedMatchHistory
	}
	return false
}

func (m *CSODOTALobbyInternal) GetMembers() []*CDOTALobbyMemberPrivate {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CSODOTALobbyInternal) GetLeftMembers() []*CDOTALobbyMemberPrivate {
	if m != nil {
		return m.LeftMembers
	}
	return nil
}

func (m *CSODOTALobbyInternal) GetSaveGameData() []byte {
	if m != nil {
		return m.SaveGameData
	}
	return nil
}

func (m *CSODOTALobbyInternal) GetServerRunTime() uint32 {
	if m != nil && m.ServerRunTime != nil {
		return *m.ServerRunTime
	}
	return 0
}

func (m *CSODOTALobbyInternal) GetLastStateChangeTime() uint32 {
	if m != nil && m.LastStateChangeTime != nil {
		return *m.LastStateChangeTime
	}
	return 0
}

func (m *CSODOTALobbyInternal) GetTowerState() uint32 {
	if m != nil && m.TowerState != nil {
		return *m.TowerState
	}
	return 0
}

type CMsgDOTAGenericResult struct {
	Eresult          *uint32 `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAGenericResult) Reset()         { *m = CMsgDOTAGenericResult{} }
func (m *CMsgDOTAGenericResult) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAGenericResult) ProtoMessage()    {}

const Default_CMsgDOTAGenericResult_Eresult uint32 = 2

func (m *CMsgDOTAGenericResult) GetEresult() uint32 {
	if m != nil && m.Eresult != nil {
		return *m.Eresult
	}
	return Default_CMsgDOTAGenericResult_Eresult
}

type CMsgDOTABroadcastNotification struct {
	Message          *string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTABroadcastNotification) Reset()         { *m = CMsgDOTABroadcastNotification{} }
func (m *CMsgDOTABroadcastNotification) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTABroadcastNotification) ProtoMessage()    {}

func (m *CMsgDOTABroadcastNotification) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type CMsgDOTAPCBangTimedReward struct {
	Persona          *string `protobuf:"bytes,1,opt,name=persona" json:"persona,omitempty"`
	Itemdef          *uint32 `protobuf:"varint,2,opt,name=itemdef" json:"itemdef,omitempty"`
	Pcbangname       *string `protobuf:"bytes,3,opt,name=pcbangname" json:"pcbangname,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAPCBangTimedReward) Reset()         { *m = CMsgDOTAPCBangTimedReward{} }
func (m *CMsgDOTAPCBangTimedReward) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAPCBangTimedReward) ProtoMessage()    {}

func (m *CMsgDOTAPCBangTimedReward) GetPersona() string {
	if m != nil && m.Persona != nil {
		return *m.Persona
	}
	return ""
}

func (m *CMsgDOTAPCBangTimedReward) GetItemdef() uint32 {
	if m != nil && m.Itemdef != nil {
		return *m.Itemdef
	}
	return 0
}

func (m *CMsgDOTAPCBangTimedReward) GetPcbangname() string {
	if m != nil && m.Pcbangname != nil {
		return *m.Pcbangname
	}
	return ""
}

type CAttribute_String struct {
	Value            *string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CAttribute_String) Reset()         { *m = CAttribute_String{} }
func (m *CAttribute_String) String() string { return proto.CompactTextString(m) }
func (*CAttribute_String) ProtoMessage()    {}

func (m *CAttribute_String) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type CAttribute_ItemDynamicRecipeComponent struct {
	ItemDef          *uint32 `protobuf:"varint,1,opt,name=item_def" json:"item_def,omitempty"`
	ItemQuality      *uint32 `protobuf:"varint,2,opt,name=item_quality" json:"item_quality,omitempty"`
	ItemFlags        *uint32 `protobuf:"varint,3,opt,name=item_flags" json:"item_flags,omitempty"`
	AttributesString *string `protobuf:"bytes,4,opt,name=attributes_string" json:"attributes_string,omitempty"`
	ItemCount        *uint32 `protobuf:"varint,5,opt,name=item_count" json:"item_count,omitempty"`
	ItemsFulfilled   *uint32 `protobuf:"varint,6,opt,name=items_fulfilled" json:"items_fulfilled,omitempty"`
	ItemRarity       *uint32 `protobuf:"varint,7,opt,name=item_rarity" json:"item_rarity,omitempty"`
	Lootlist         *string `protobuf:"bytes,8,opt,name=lootlist" json:"lootlist,omitempty"`
	FulfilledItemId  *uint64 `protobuf:"varint,9,opt,name=fulfilled_item_id" json:"fulfilled_item_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CAttribute_ItemDynamicRecipeComponent) Reset()         { *m = CAttribute_ItemDynamicRecipeComponent{} }
func (m *CAttribute_ItemDynamicRecipeComponent) String() string { return proto.CompactTextString(m) }
func (*CAttribute_ItemDynamicRecipeComponent) ProtoMessage()    {}

func (m *CAttribute_ItemDynamicRecipeComponent) GetItemDef() uint32 {
	if m != nil && m.ItemDef != nil {
		return *m.ItemDef
	}
	return 0
}

func (m *CAttribute_ItemDynamicRecipeComponent) GetItemQuality() uint32 {
	if m != nil && m.ItemQuality != nil {
		return *m.ItemQuality
	}
	return 0
}

func (m *CAttribute_ItemDynamicRecipeComponent) GetItemFlags() uint32 {
	if m != nil && m.ItemFlags != nil {
		return *m.ItemFlags
	}
	return 0
}

func (m *CAttribute_ItemDynamicRecipeComponent) GetAttributesString() string {
	if m != nil && m.AttributesString != nil {
		return *m.AttributesString
	}
	return ""
}

func (m *CAttribute_ItemDynamicRecipeComponent) GetItemCount() uint32 {
	if m != nil && m.ItemCount != nil {
		return *m.ItemCount
	}
	return 0
}

func (m *CAttribute_ItemDynamicRecipeComponent) GetItemsFulfilled() uint32 {
	if m != nil && m.ItemsFulfilled != nil {
		return *m.ItemsFulfilled
	}
	return 0
}

func (m *CAttribute_ItemDynamicRecipeComponent) GetItemRarity() uint32 {
	if m != nil && m.ItemRarity != nil {
		return *m.ItemRarity
	}
	return 0
}

func (m *CAttribute_ItemDynamicRecipeComponent) GetLootlist() string {
	if m != nil && m.Lootlist != nil {
		return *m.Lootlist
	}
	return ""
}

func (m *CAttribute_ItemDynamicRecipeComponent) GetFulfilledItemId() uint64 {
	if m != nil && m.FulfilledItemId != nil {
		return *m.FulfilledItemId
	}
	return 0
}

type CProtoItemSocket struct {
	ItemId           *uint64 `protobuf:"varint,1,opt,name=item_id" json:"item_id,omitempty"`
	AttrDefIndex     *uint32 `protobuf:"varint,2,opt,name=attr_def_index" json:"attr_def_index,omitempty"`
	RequiredType     *uint32 `protobuf:"varint,3,opt,name=required_type" json:"required_type,omitempty"`
	RequiredHero     *string `protobuf:"bytes,4,opt,name=required_hero" json:"required_hero,omitempty"`
	GemDefIndex      *uint32 `protobuf:"varint,5,opt,name=gem_def_index" json:"gem_def_index,omitempty"`
	NotTradable      *bool   `protobuf:"varint,6,opt,name=not_tradable" json:"not_tradable,omitempty"`
	RequiredItemSlot *string `protobuf:"bytes,7,opt,name=required_item_slot" json:"required_item_slot,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CProtoItemSocket) Reset()         { *m = CProtoItemSocket{} }
func (m *CProtoItemSocket) String() string { return proto.CompactTextString(m) }
func (*CProtoItemSocket) ProtoMessage()    {}

func (m *CProtoItemSocket) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *CProtoItemSocket) GetAttrDefIndex() uint32 {
	if m != nil && m.AttrDefIndex != nil {
		return *m.AttrDefIndex
	}
	return 0
}

func (m *CProtoItemSocket) GetRequiredType() uint32 {
	if m != nil && m.RequiredType != nil {
		return *m.RequiredType
	}
	return 0
}

func (m *CProtoItemSocket) GetRequiredHero() string {
	if m != nil && m.RequiredHero != nil {
		return *m.RequiredHero
	}
	return ""
}

func (m *CProtoItemSocket) GetGemDefIndex() uint32 {
	if m != nil && m.GemDefIndex != nil {
		return *m.GemDefIndex
	}
	return 0
}

func (m *CProtoItemSocket) GetNotTradable() bool {
	if m != nil && m.NotTradable != nil {
		return *m.NotTradable
	}
	return false
}

func (m *CProtoItemSocket) GetRequiredItemSlot() string {
	if m != nil && m.RequiredItemSlot != nil {
		return *m.RequiredItemSlot
	}
	return ""
}

type CProtoItemSocket_Empty struct {
	Socket           *CProtoItemSocket `protobuf:"bytes,1,opt,name=socket" json:"socket,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CProtoItemSocket_Empty) Reset()         { *m = CProtoItemSocket_Empty{} }
func (m *CProtoItemSocket_Empty) String() string { return proto.CompactTextString(m) }
func (*CProtoItemSocket_Empty) ProtoMessage()    {}

func (m *CProtoItemSocket_Empty) GetSocket() *CProtoItemSocket {
	if m != nil {
		return m.Socket
	}
	return nil
}

type CProtoItemSocket_Effect struct {
	Socket           *CProtoItemSocket `protobuf:"bytes,1,opt,name=socket" json:"socket,omitempty"`
	Effect           *uint32           `protobuf:"varint,2,opt,name=effect" json:"effect,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CProtoItemSocket_Effect) Reset()         { *m = CProtoItemSocket_Effect{} }
func (m *CProtoItemSocket_Effect) String() string { return proto.CompactTextString(m) }
func (*CProtoItemSocket_Effect) ProtoMessage()    {}

func (m *CProtoItemSocket_Effect) GetSocket() *CProtoItemSocket {
	if m != nil {
		return m.Socket
	}
	return nil
}

func (m *CProtoItemSocket_Effect) GetEffect() uint32 {
	if m != nil && m.Effect != nil {
		return *m.Effect
	}
	return 0
}

type CProtoItemSocket_Color struct {
	Socket           *CProtoItemSocket `protobuf:"bytes,1,opt,name=socket" json:"socket,omitempty"`
	Red              *uint32           `protobuf:"varint,2,opt,name=red" json:"red,omitempty"`
	Green            *uint32           `protobuf:"varint,3,opt,name=green" json:"green,omitempty"`
	Blue             *uint32           `protobuf:"varint,4,opt,name=blue" json:"blue,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CProtoItemSocket_Color) Reset()         { *m = CProtoItemSocket_Color{} }
func (m *CProtoItemSocket_Color) String() string { return proto.CompactTextString(m) }
func (*CProtoItemSocket_Color) ProtoMessage()    {}

func (m *CProtoItemSocket_Color) GetSocket() *CProtoItemSocket {
	if m != nil {
		return m.Socket
	}
	return nil
}

func (m *CProtoItemSocket_Color) GetRed() uint32 {
	if m != nil && m.Red != nil {
		return *m.Red
	}
	return 0
}

func (m *CProtoItemSocket_Color) GetGreen() uint32 {
	if m != nil && m.Green != nil {
		return *m.Green
	}
	return 0
}

func (m *CProtoItemSocket_Color) GetBlue() uint32 {
	if m != nil && m.Blue != nil {
		return *m.Blue
	}
	return 0
}

type CProtoItemSocket_Strange struct {
	Socket           *CProtoItemSocket `protobuf:"bytes,1,opt,name=socket" json:"socket,omitempty"`
	StrangeType      *uint32           `protobuf:"varint,2,opt,name=strange_type" json:"strange_type,omitempty"`
	StrangeValue     *uint32           `protobuf:"varint,3,opt,name=strange_value" json:"strange_value,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CProtoItemSocket_Strange) Reset()         { *m = CProtoItemSocket_Strange{} }
func (m *CProtoItemSocket_Strange) String() string { return proto.CompactTextString(m) }
func (*CProtoItemSocket_Strange) ProtoMessage()    {}

func (m *CProtoItemSocket_Strange) GetSocket() *CProtoItemSocket {
	if m != nil {
		return m.Socket
	}
	return nil
}

func (m *CProtoItemSocket_Strange) GetStrangeType() uint32 {
	if m != nil && m.StrangeType != nil {
		return *m.StrangeType
	}
	return 0
}

func (m *CProtoItemSocket_Strange) GetStrangeValue() uint32 {
	if m != nil && m.StrangeValue != nil {
		return *m.StrangeValue
	}
	return 0
}

type CProtoItemSocket_Spectator struct {
	Socket           *CProtoItemSocket `protobuf:"bytes,1,opt,name=socket" json:"socket,omitempty"`
	GamesViewed      *uint32           `protobuf:"varint,2,opt,name=games_viewed" json:"games_viewed,omitempty"`
	CorporationId    *uint32           `protobuf:"varint,3,opt,name=corporation_id" json:"corporation_id,omitempty"`
	LeagueId         *uint32           `protobuf:"varint,4,opt,name=league_id" json:"league_id,omitempty"`
	TeamId           *uint32           `protobuf:"varint,5,opt,name=team_id" json:"team_id,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CProtoItemSocket_Spectator) Reset()         { *m = CProtoItemSocket_Spectator{} }
func (m *CProtoItemSocket_Spectator) String() string { return proto.CompactTextString(m) }
func (*CProtoItemSocket_Spectator) ProtoMessage()    {}

func (m *CProtoItemSocket_Spectator) GetSocket() *CProtoItemSocket {
	if m != nil {
		return m.Socket
	}
	return nil
}

func (m *CProtoItemSocket_Spectator) GetGamesViewed() uint32 {
	if m != nil && m.GamesViewed != nil {
		return *m.GamesViewed
	}
	return 0
}

func (m *CProtoItemSocket_Spectator) GetCorporationId() uint32 {
	if m != nil && m.CorporationId != nil {
		return *m.CorporationId
	}
	return 0
}

func (m *CProtoItemSocket_Spectator) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CProtoItemSocket_Spectator) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

type CProtoItemSocket_AnimModifier struct {
	Socket           *CProtoItemSocket `protobuf:"bytes,1,opt,name=socket" json:"socket,omitempty"`
	AnimModifier     *uint32           `protobuf:"varint,2,opt,name=anim_modifier" json:"anim_modifier,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CProtoItemSocket_AnimModifier) Reset()         { *m = CProtoItemSocket_AnimModifier{} }
func (m *CProtoItemSocket_AnimModifier) String() string { return proto.CompactTextString(m) }
func (*CProtoItemSocket_AnimModifier) ProtoMessage()    {}

func (m *CProtoItemSocket_AnimModifier) GetSocket() *CProtoItemSocket {
	if m != nil {
		return m.Socket
	}
	return nil
}

func (m *CProtoItemSocket_AnimModifier) GetAnimModifier() uint32 {
	if m != nil && m.AnimModifier != nil {
		return *m.AnimModifier
	}
	return 0
}

type CProtoItemSocket_Autograph struct {
	Socket           *CProtoItemSocket `protobuf:"bytes,1,opt,name=socket" json:"socket,omitempty"`
	Autograph        *string           `protobuf:"bytes,2,opt,name=autograph" json:"autograph,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CProtoItemSocket_Autograph) Reset()         { *m = CProtoItemSocket_Autograph{} }
func (m *CProtoItemSocket_Autograph) String() string { return proto.CompactTextString(m) }
func (*CProtoItemSocket_Autograph) ProtoMessage()    {}

func (m *CProtoItemSocket_Autograph) GetSocket() *CProtoItemSocket {
	if m != nil {
		return m.Socket
	}
	return nil
}

func (m *CProtoItemSocket_Autograph) GetAutograph() string {
	if m != nil && m.Autograph != nil {
		return *m.Autograph
	}
	return ""
}

type CProtoItemSocket_AbilityEffect struct {
	Socket           *CProtoItemSocket `protobuf:"bytes,1,opt,name=socket" json:"socket,omitempty"`
	AbilityEffect    *uint32           `protobuf:"varint,2,opt,name=ability_effect" json:"ability_effect,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CProtoItemSocket_AbilityEffect) Reset()         { *m = CProtoItemSocket_AbilityEffect{} }
func (m *CProtoItemSocket_AbilityEffect) String() string { return proto.CompactTextString(m) }
func (*CProtoItemSocket_AbilityEffect) ProtoMessage()    {}

func (m *CProtoItemSocket_AbilityEffect) GetSocket() *CProtoItemSocket {
	if m != nil {
		return m.Socket
	}
	return nil
}

func (m *CProtoItemSocket_AbilityEffect) GetAbilityEffect() uint32 {
	if m != nil && m.AbilityEffect != nil {
		return *m.AbilityEffect
	}
	return 0
}

type CProtoItemSocket_StaticVisuals struct {
	Socket           *CProtoItemSocket `protobuf:"bytes,1,opt,name=socket" json:"socket,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CProtoItemSocket_StaticVisuals) Reset()         { *m = CProtoItemSocket_StaticVisuals{} }
func (m *CProtoItemSocket_StaticVisuals) String() string { return proto.CompactTextString(m) }
func (*CProtoItemSocket_StaticVisuals) ProtoMessage()    {}

func (m *CProtoItemSocket_StaticVisuals) GetSocket() *CProtoItemSocket {
	if m != nil {
		return m.Socket
	}
	return nil
}

type CMatchPlayerAbilityUpgrade struct {
	Ability          *uint32 `protobuf:"varint,1,opt,name=ability" json:"ability,omitempty"`
	Time             *uint32 `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMatchPlayerAbilityUpgrade) Reset()         { *m = CMatchPlayerAbilityUpgrade{} }
func (m *CMatchPlayerAbilityUpgrade) String() string { return proto.CompactTextString(m) }
func (*CMatchPlayerAbilityUpgrade) ProtoMessage()    {}

func (m *CMatchPlayerAbilityUpgrade) GetAbility() uint32 {
	if m != nil && m.Ability != nil {
		return *m.Ability
	}
	return 0
}

func (m *CMatchPlayerAbilityUpgrade) GetTime() uint32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

type CMatchAdditionalUnitInventory struct {
	UnitName         *string  `protobuf:"bytes,1,opt,name=unit_name" json:"unit_name,omitempty"`
	Items            []uint32 `protobuf:"varint,2,rep,name=items" json:"items,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMatchAdditionalUnitInventory) Reset()         { *m = CMatchAdditionalUnitInventory{} }
func (m *CMatchAdditionalUnitInventory) String() string { return proto.CompactTextString(m) }
func (*CMatchAdditionalUnitInventory) ProtoMessage()    {}

func (m *CMatchAdditionalUnitInventory) GetUnitName() string {
	if m != nil && m.UnitName != nil {
		return *m.UnitName
	}
	return ""
}

func (m *CMatchAdditionalUnitInventory) GetItems() []uint32 {
	if m != nil {
		return m.Items
	}
	return nil
}

type CMatchHeroSelectEvent struct {
	IsPick           *bool   `protobuf:"varint,1,opt,name=is_pick" json:"is_pick,omitempty"`
	Team             *uint32 `protobuf:"varint,2,opt,name=team" json:"team,omitempty"`
	HeroId           *uint32 `protobuf:"varint,3,opt,name=hero_id" json:"hero_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMatchHeroSelectEvent) Reset()         { *m = CMatchHeroSelectEvent{} }
func (m *CMatchHeroSelectEvent) String() string { return proto.CompactTextString(m) }
func (*CMatchHeroSelectEvent) ProtoMessage()    {}

func (m *CMatchHeroSelectEvent) GetIsPick() bool {
	if m != nil && m.IsPick != nil {
		return *m.IsPick
	}
	return false
}

func (m *CMatchHeroSelectEvent) GetTeam() uint32 {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return 0
}

func (m *CMatchHeroSelectEvent) GetHeroId() uint32 {
	if m != nil && m.HeroId != nil {
		return *m.HeroId
	}
	return 0
}

type CMsgDOTAProcessFantasyScheduledEvent struct {
	Event            *uint32 `protobuf:"varint,1,opt,name=event" json:"event,omitempty"`
	Timestamp        *uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	FantasyLeagueId  *uint32 `protobuf:"varint,3,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	Season           *uint32 `protobuf:"varint,4,opt,name=season" json:"season,omitempty"`
	ReferenceData    *uint32 `protobuf:"varint,5,opt,name=reference_data" json:"reference_data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAProcessFantasyScheduledEvent) Reset()         { *m = CMsgDOTAProcessFantasyScheduledEvent{} }
func (m *CMsgDOTAProcessFantasyScheduledEvent) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAProcessFantasyScheduledEvent) ProtoMessage()    {}

func (m *CMsgDOTAProcessFantasyScheduledEvent) GetEvent() uint32 {
	if m != nil && m.Event != nil {
		return *m.Event
	}
	return 0
}

func (m *CMsgDOTAProcessFantasyScheduledEvent) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CMsgDOTAProcessFantasyScheduledEvent) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAProcessFantasyScheduledEvent) GetSeason() uint32 {
	if m != nil && m.Season != nil {
		return *m.Season
	}
	return 0
}

func (m *CMsgDOTAProcessFantasyScheduledEvent) GetReferenceData() uint32 {
	if m != nil && m.ReferenceData != nil {
		return *m.ReferenceData
	}
	return 0
}

type CMsgDOTAHasItemQuery struct {
	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	ItemId           *uint64 `protobuf:"varint,2,opt,name=item_id" json:"item_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAHasItemQuery) Reset()         { *m = CMsgDOTAHasItemQuery{} }
func (m *CMsgDOTAHasItemQuery) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAHasItemQuery) ProtoMessage()    {}

func (m *CMsgDOTAHasItemQuery) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAHasItemQuery) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

type CMsgDOTAHasItemResponse struct {
	HasItem          *bool  `protobuf:"varint,1,opt,name=has_item" json:"has_item,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgDOTAHasItemResponse) Reset()         { *m = CMsgDOTAHasItemResponse{} }
func (m *CMsgDOTAHasItemResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAHasItemResponse) ProtoMessage()    {}

func (m *CMsgDOTAHasItemResponse) GetHasItem() bool {
	if m != nil && m.HasItem != nil {
		return *m.HasItem
	}
	return false
}

type CMsgDOTAConsumeFantasyTicket struct {
	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	ItemId           *uint64 `protobuf:"varint,2,opt,name=item_id" json:"item_id,omitempty"`
	FantasyLeagueId  *uint32 `protobuf:"varint,3,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAConsumeFantasyTicket) Reset()         { *m = CMsgDOTAConsumeFantasyTicket{} }
func (m *CMsgDOTAConsumeFantasyTicket) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAConsumeFantasyTicket) ProtoMessage()    {}

func (m *CMsgDOTAConsumeFantasyTicket) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAConsumeFantasyTicket) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *CMsgDOTAConsumeFantasyTicket) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAConsumeFantasyTicketFailure struct {
	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	ItemId           *uint64 `protobuf:"varint,2,opt,name=item_id" json:"item_id,omitempty"`
	FantasyLeagueId  *uint32 `protobuf:"varint,3,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAConsumeFantasyTicketFailure) Reset()         { *m = CMsgDOTAConsumeFantasyTicketFailure{} }
func (m *CMsgDOTAConsumeFantasyTicketFailure) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAConsumeFantasyTicketFailure) ProtoMessage()    {}

func (m *CMsgDOTAConsumeFantasyTicketFailure) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAConsumeFantasyTicketFailure) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *CMsgDOTAConsumeFantasyTicketFailure) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

type CSODOTAMapLocationState struct {
	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	LocationId       *int32  `protobuf:"varint,2,opt,name=location_id" json:"location_id,omitempty"`
	Completed        *bool   `protobuf:"varint,3,opt,name=completed" json:"completed,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CSODOTAMapLocationState) Reset()         { *m = CSODOTAMapLocationState{} }
func (m *CSODOTAMapLocationState) String() string { return proto.CompactTextString(m) }
func (*CSODOTAMapLocationState) ProtoMessage()    {}

func (m *CSODOTAMapLocationState) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CSODOTAMapLocationState) GetLocationId() int32 {
	if m != nil && m.LocationId != nil {
		return *m.LocationId
	}
	return 0
}

func (m *CSODOTAMapLocationState) GetCompleted() bool {
	if m != nil && m.Completed != nil {
		return *m.Completed
	}
	return false
}

type CMsgNexonPartnerUpdate struct {
	Messagetype      *uint32 `protobuf:"varint,1,opt,name=messagetype" json:"messagetype,omitempty"`
	Timeremaining    *uint32 `protobuf:"varint,2,opt,name=timeremaining" json:"timeremaining,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgNexonPartnerUpdate) Reset()         { *m = CMsgNexonPartnerUpdate{} }
func (m *CMsgNexonPartnerUpdate) String() string { return proto.CompactTextString(m) }
func (*CMsgNexonPartnerUpdate) ProtoMessage()    {}

func (m *CMsgNexonPartnerUpdate) GetMessagetype() uint32 {
	if m != nil && m.Messagetype != nil {
		return *m.Messagetype
	}
	return 0
}

func (m *CMsgNexonPartnerUpdate) GetTimeremaining() uint32 {
	if m != nil && m.Timeremaining != nil {
		return *m.Timeremaining
	}
	return 0
}

type CMsgMakeOffering struct {
	ItemId           *uint64 `protobuf:"varint,1,opt,name=item_id" json:"item_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgMakeOffering) Reset()         { *m = CMsgMakeOffering{} }
func (m *CMsgMakeOffering) String() string { return proto.CompactTextString(m) }
func (*CMsgMakeOffering) ProtoMessage()    {}

func (m *CMsgMakeOffering) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

type CMsgRequestOfferings struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgRequestOfferings) Reset()         { *m = CMsgRequestOfferings{} }
func (m *CMsgRequestOfferings) String() string { return proto.CompactTextString(m) }
func (*CMsgRequestOfferings) ProtoMessage()    {}

type CMsgRequestOfferingsResponse struct {
	Offerings        []*CMsgRequestOfferingsResponse_NewYearsOffering `protobuf:"bytes,1,rep,name=offerings" json:"offerings,omitempty"`
	Completed        *bool                                            `protobuf:"varint,2,opt,name=completed" json:"completed,omitempty"`
	XXX_unrecognized []byte                                           `json:"-"`
}

func (m *CMsgRequestOfferingsResponse) Reset()         { *m = CMsgRequestOfferingsResponse{} }
func (m *CMsgRequestOfferingsResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgRequestOfferingsResponse) ProtoMessage()    {}

func (m *CMsgRequestOfferingsResponse) GetOfferings() []*CMsgRequestOfferingsResponse_NewYearsOffering {
	if m != nil {
		return m.Offerings
	}
	return nil
}

func (m *CMsgRequestOfferingsResponse) GetCompleted() bool {
	if m != nil && m.Completed != nil {
		return *m.Completed
	}
	return false
}

type CMsgRequestOfferingsResponse_NewYearsOffering struct {
	DefIndex         *uint32 `protobuf:"varint,1,opt,name=def_index" json:"def_index,omitempty"`
	ItemId           *uint64 `protobuf:"varint,2,opt,name=item_id" json:"item_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgRequestOfferingsResponse_NewYearsOffering) Reset() {
	*m = CMsgRequestOfferingsResponse_NewYearsOffering{}
}
func (m *CMsgRequestOfferingsResponse_NewYearsOffering) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgRequestOfferingsResponse_NewYearsOffering) ProtoMessage() {}

func (m *CMsgRequestOfferingsResponse_NewYearsOffering) GetDefIndex() uint32 {
	if m != nil && m.DefIndex != nil {
		return *m.DefIndex
	}
	return 0
}

func (m *CMsgRequestOfferingsResponse_NewYearsOffering) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

type CMsgLeagueAdminList struct {
	AccountIds       []uint32 `protobuf:"varint,1,rep,name=account_ids" json:"account_ids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgLeagueAdminList) Reset()         { *m = CMsgLeagueAdminList{} }
func (m *CMsgLeagueAdminList) String() string { return proto.CompactTextString(m) }
func (*CMsgLeagueAdminList) ProtoMessage()    {}

func (m *CMsgLeagueAdminList) GetAccountIds() []uint32 {
	if m != nil {
		return m.AccountIds
	}
	return nil
}

type CMsgPerfectWorldUserLookupRequest struct {
	UserName         *string `protobuf:"bytes,1,opt,name=user_name" json:"user_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgPerfectWorldUserLookupRequest) Reset()         { *m = CMsgPerfectWorldUserLookupRequest{} }
func (m *CMsgPerfectWorldUserLookupRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgPerfectWorldUserLookupRequest) ProtoMessage()    {}

func (m *CMsgPerfectWorldUserLookupRequest) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

type CMsgPerfectWorldUserLookupResponse struct {
	ResultCode       *CMsgPerfectWorldUserLookupResponse_EResultCode `protobuf:"varint,1,opt,name=result_code,enum=CMsgPerfectWorldUserLookupResponse_EResultCode,def=0" json:"result_code,omitempty"`
	AccountId        *uint32                                         `protobuf:"varint,2,opt,name=account_id" json:"account_id,omitempty"`
	XXX_unrecognized []byte                                          `json:"-"`
}

func (m *CMsgPerfectWorldUserLookupResponse) Reset()         { *m = CMsgPerfectWorldUserLookupResponse{} }
func (m *CMsgPerfectWorldUserLookupResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgPerfectWorldUserLookupResponse) ProtoMessage()    {}

const Default_CMsgPerfectWorldUserLookupResponse_ResultCode CMsgPerfectWorldUserLookupResponse_EResultCode = CMsgPerfectWorldUserLookupResponse_SUCCESS_ACCOUNT_FOUND

func (m *CMsgPerfectWorldUserLookupResponse) GetResultCode() CMsgPerfectWorldUserLookupResponse_EResultCode {
	if m != nil && m.ResultCode != nil {
		return *m.ResultCode
	}
	return Default_CMsgPerfectWorldUserLookupResponse_ResultCode
}

func (m *CMsgPerfectWorldUserLookupResponse) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

type CCompendiumTimestampedData struct {
	GameTime         *uint32  `protobuf:"varint,1,opt,name=game_time" json:"game_time,omitempty"`
	Gpm              *uint32  `protobuf:"varint,2,opt,name=gpm" json:"gpm,omitempty"`
	Xpm              *uint32  `protobuf:"varint,3,opt,name=xpm" json:"xpm,omitempty"`
	Kills            *uint32  `protobuf:"varint,4,opt,name=kills" json:"kills,omitempty"`
	Deaths           *uint32  `protobuf:"varint,5,opt,name=deaths" json:"deaths,omitempty"`
	ItemPurchases    []uint32 `protobuf:"varint,6,rep,name=item_purchases" json:"item_purchases,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CCompendiumTimestampedData) Reset()         { *m = CCompendiumTimestampedData{} }
func (m *CCompendiumTimestampedData) String() string { return proto.CompactTextString(m) }
func (*CCompendiumTimestampedData) ProtoMessage()    {}

func (m *CCompendiumTimestampedData) GetGameTime() uint32 {
	if m != nil && m.GameTime != nil {
		return *m.GameTime
	}
	return 0
}

func (m *CCompendiumTimestampedData) GetGpm() uint32 {
	if m != nil && m.Gpm != nil {
		return *m.Gpm
	}
	return 0
}

func (m *CCompendiumTimestampedData) GetXpm() uint32 {
	if m != nil && m.Xpm != nil {
		return *m.Xpm
	}
	return 0
}

func (m *CCompendiumTimestampedData) GetKills() uint32 {
	if m != nil && m.Kills != nil {
		return *m.Kills
	}
	return 0
}

func (m *CCompendiumTimestampedData) GetDeaths() uint32 {
	if m != nil && m.Deaths != nil {
		return *m.Deaths
	}
	return 0
}

func (m *CCompendiumTimestampedData) GetItemPurchases() []uint32 {
	if m != nil {
		return m.ItemPurchases
	}
	return nil
}

type CCompendiumGameTimeline struct {
	Data             []*CCompendiumTimestampedData `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Tags             []string                      `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *CCompendiumGameTimeline) Reset()         { *m = CCompendiumGameTimeline{} }
func (m *CCompendiumGameTimeline) String() string { return proto.CompactTextString(m) }
func (*CCompendiumGameTimeline) ProtoMessage()    {}

func (m *CCompendiumGameTimeline) GetData() []*CCompendiumTimestampedData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CCompendiumGameTimeline) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type CCompendiumGameList struct {
	Games            []*CCompendiumGameTimeline `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *CCompendiumGameList) Reset()         { *m = CCompendiumGameList{} }
func (m *CCompendiumGameList) String() string { return proto.CompactTextString(m) }
func (*CCompendiumGameList) ProtoMessage()    {}

func (m *CCompendiumGameList) GetGames() []*CCompendiumGameTimeline {
	if m != nil {
		return m.Games
	}
	return nil
}

func init() {
	proto.RegisterEnum("EDOTAGCMsg", EDOTAGCMsg_name, EDOTAGCMsg_value)
	proto.RegisterEnum("DOTA_GameMode", DOTA_GameMode_name, DOTA_GameMode_value)
	proto.RegisterEnum("DOTA_GameState", DOTA_GameState_name, DOTA_GameState_value)
	proto.RegisterEnum("DOTA_GC_TEAM", DOTA_GC_TEAM_name, DOTA_GC_TEAM_value)
	proto.RegisterEnum("DOTA_CM_PICK", DOTA_CM_PICK_name, DOTA_CM_PICK_value)
	proto.RegisterEnum("DOTAConnectionStateT", DOTAConnectionStateT_name, DOTAConnectionStateT_value)
	proto.RegisterEnum("DOTALeaverStatusT", DOTALeaverStatusT_name, DOTALeaverStatusT_value)
	proto.RegisterEnum("DOTALowPriorityBanType", DOTALowPriorityBanType_name, DOTALowPriorityBanType_value)
	proto.RegisterEnum("DOTALobbyReadyState", DOTALobbyReadyState_name, DOTALobbyReadyState_value)
	proto.RegisterEnum("DOTAGameVersion", DOTAGameVersion_name, DOTAGameVersion_value)
	proto.RegisterEnum("DOTAJoinLobbyResult", DOTAJoinLobbyResult_name, DOTAJoinLobbyResult_value)
	proto.RegisterEnum("DOTAMatchVote", DOTAMatchVote_name, DOTAMatchVote_value)
	proto.RegisterEnum("DOTA_LobbyMemberXPBonus", DOTA_LobbyMemberXPBonus_name, DOTA_LobbyMemberXPBonus_value)
	proto.RegisterEnum("EDOTAPlayerMMRType", EDOTAPlayerMMRType_name, EDOTAPlayerMMRType_value)
	proto.RegisterEnum("LobbyDotaTVDelay", LobbyDotaTVDelay_name, LobbyDotaTVDelay_value)
	proto.RegisterEnum("EDOTAGCSessionNeed", EDOTAGCSessionNeed_name, EDOTAGCSessionNeed_value)
	proto.RegisterEnum("Fantasy_Roles", Fantasy_Roles_name, Fantasy_Roles_value)
	proto.RegisterEnum("Fantasy_Team_Slots", Fantasy_Team_Slots_name, Fantasy_Team_Slots_value)
	proto.RegisterEnum("Fantasy_Selection_Mode", Fantasy_Selection_Mode_name, Fantasy_Selection_Mode_value)
	proto.RegisterEnum("DOTA_TournamentEvents", DOTA_TournamentEvents_name, DOTA_TournamentEvents_value)
	proto.RegisterEnum("CSODOTAParty_State", CSODOTAParty_State_name, CSODOTAParty_State_value)
	proto.RegisterEnum("CSODOTALobby_State", CSODOTALobby_State_name, CSODOTALobby_State_value)
	proto.RegisterEnum("CSODOTALobby_LobbyType", CSODOTALobby_LobbyType_name, CSODOTALobby_LobbyType_value)
	proto.RegisterEnum("CMsgPerfectWorldUserLookupResponse_EResultCode", CMsgPerfectWorldUserLookupResponse_EResultCode_name, CMsgPerfectWorldUserLookupResponse_EResultCode_value)
}
